{
  "swagger": "2.0",
  "info": {
      "description": "These services manage all of the common commerce functionality, and also include customizations from installed AddOns. The implementing extension is called commercewebservices.",
      "version": "2.2.1",
      "title": "Commerce Webservices",
      "license": {
          "name": "Use of this file is subject to the terms of your agreement with SAP SE or its affiliates respecting the use of the SAP product for which this file relates."
      }
  },
  "host": "localhost:9002",
  "basePath": "/occ/v2",
  "tags": [
      {
          "name": "Address",
          "description": "Address Controller"
      },
      {
          "name": "B2B Carts",
          "description": "B 2 B Carts Controller"
      },
      {
          "name": "B2B Categories",
          "description": "B 2 B Categories Controller"
      },
      {
          "name": "B2B Cost Centers",
          "description": "B 2 B Cost Centers Controller"
      },
      {
          "name": "B2B Miscs",
          "description": "B 2 B Miscs Controller"
      },
      {
          "name": "B2B Orders",
          "description": "B 2 B Orders Controller"
      },
      {
          "name": "B2B Products",
          "description": "B 2 B Products Controller"
      },
      {
          "name": "B2B Users",
          "description": "B 2 B Users Controller"
      },
      {
          "name": "Base Sites",
          "description": "Base Sites Controller"
      },
      {
          "name": "Base Stores",
          "description": "Base Stores Controller"
      },
      {
          "name": "Budget Management",
          "description": "Budget Management Controller"
      },
      {
          "name": "Bundles",
          "description": "Configurable Bundle Controller"
      },
      {
          "name": "Cart Addresses",
          "description": "Cart Addresses Controller"
      },
      {
          "name": "Cart Delivery Modes",
          "description": "Cart Delivery Modes Controller"
      },
      {
          "name": "Cart Entries",
          "description": "Cart Entries Controller"
      },
      {
          "name": "Cart Entry Groups",
          "description": "Cart Entry Groups Controller"
      },
      {
          "name": "Cart Payments",
          "description": "Cart Payments Controller"
      },
      {
          "name": "Cart Promotions",
          "description": "Cart Promotions Controller"
      },
      {
          "name": "Carts",
          "description": "Carts Controller"
      },
      {
          "name": "Catalogs",
          "description": "Catalogs Controller"
      },
      {
          "name": "Components",
          "description": "Component Controller"
      },
      {
          "name": "Consents",
          "description": "Consents Controller"
      },
      {
          "name": "Consignment Tracking",
          "description": "Consignment Tracking Controller"
      },
      {
          "name": "Countries",
          "description": "Countries Controller"
      },
      {
          "name": "Customer Coupons",
          "description": "Customer Coupons Controller"
      },
      {
          "name": "Customer Groups",
          "description": "Customer Groups Controller"
      },
      {
          "name": "Export",
          "description": "Export Controller"
      },
      {
          "name": "Extended Carts",
          "description": "Extended Carts Controller"
      },
      {
          "name": "Feeds",
          "description": "Feeds Controller"
      },
      {
          "name": "Forgotten Passwords",
          "description": "Forgotten Passwords Controller"
      },
      {
          "name": "Login Notification",
          "description": "Login Notification Controller"
      },
      {
          "name": "Merchant Callback",
          "description": "Merchant Callback Controller"
      },
      {
          "name": "Message Center",
          "description": "Message Center CS Controller"
      },
      {
          "name": "Miscs",
          "description": "Miscs Controller"
      },
      {
          "name": "Notification Preference",
          "description": "Notification Preference Controller"
      },
      {
          "name": "Order Approval Permission Types",
          "description": "Order Approval Permission Types Controller"
      },
      {
          "name": "Order Approval Permissions",
          "description": "Order Approval Permissions Controller"
      },
      {
          "name": "Order Approvals",
          "description": "Order Approvals Controller"
      },
      {
          "name": "Order Forms",
          "description": "Order Forms Controller"
      },
      {
          "name": "Orders",
          "description": "Orders Controller"
      },
      {
          "name": "Organizational Unit Customer Management",
          "description": "Org Customer Management Controller"
      },
      {
          "name": "Organizational Unit Management",
          "description": "Org Units Controller"
      },
      {
          "name": "Organizational Unit User Groups",
          "description": "Org Unit User Groups Controller"
      },
      {
          "name": "Pages",
          "description": "Page Controller"
      },
      {
          "name": "Payment Details",
          "description": "Payment Details Controller"
      },
      {
          "name": "Payment Modes",
          "description": "Payment Modes Controller"
      },
      {
          "name": "Product Configurator CCP",
          "description": "Product Configurator CCP Controller"
      },
      {
          "name": "Product Configurator CCP Cart Integration",
          "description": "Product Configurator CCP Cart Integration Controller"
      },
      {
          "name": "Product Configurator CCP Order Integration",
          "description": "Product Configurator CCP Order Integration Controller"
      },
      {
          "name": "Product Configurator Textfield Template",
          "description": "Product Configurator Textfield Template Controller"
      },
      {
          "name": "Product Interests",
          "description": "Product Interests Controller"
      },
      {
          "name": "Products",
          "description": "Products Controller"
      },
      {
          "name": "Promotions",
          "description": "Promotions Controller"
      },
      {
          "name": "Quotes",
          "description": "Quote Controller"
      },
      {
          "name": "Replenishment Order",
          "description": "Replenishment Order Controller"
      },
      {
          "name": "Return Requests",
          "description": "Order Returns Controller"
      },
      {
          "name": "Save Cart",
          "description": "Save Cart Controller"
      },
      {
          "name": "Site Messages",
          "description": "Site Message Controller"
      },
      {
          "name": "Stores",
          "description": "Stores Controller"
      },
      {
          "name": "Tickets",
          "description": "Tickets Controller"
      },
      {
          "name": "Users",
          "description": "Users Controller"
      },
      {
          "name": "Vouchers",
          "description": "Vouchers Controller"
      }
  ],
  "produces": [
      "application/xml",
      "application/json"
  ],
  "paths": {
      "/basesites": {
          "get": {
              "tags": [
                  "Base Sites"
              ],
              "summary": "Get all base sites.",
              "description": "Get all base sites with corresponding base stores details in FULL mode.",
              "operationId": "getBaseSites",
              "parameters": [
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/BaseSiteList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/basestores/{baseStoreUid}": {
          "get": {
              "tags": [
                  "Base Stores"
              ],
              "summary": "Get a base store.",
              "description": "Returns details of a specific base store based on its identifier. The response contains detailed base store information.",
              "operationId": "getBaseStore",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "baseStoreUid",
                      "in": "path",
                      "description": "Base store name",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/BaseStore"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/cardtypes": {
          "get": {
              "tags": [
                  "Miscs"
              ],
              "summary": "Get a list of supported payment card types.",
              "description": "Lists supported payment card types.",
              "operationId": "getCardTypes",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CardTypeList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/catalogs": {
          "get": {
              "tags": [
                  "Catalogs"
              ],
              "summary": "Get a list of catalogs",
              "description": "Returns all catalogs with versions defined for the base store.",
              "operationId": "getCatalogs",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CatalogList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/catalogs/{catalogId}": {
          "get": {
              "tags": [
                  "Catalogs"
              ],
              "summary": "Get a catalog",
              "description": "Returns information about a catalog based on its ID, along with the versions defined for the current base store.",
              "operationId": "getCatalog",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "catalogId",
                      "in": "path",
                      "description": "Catalog identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Catalog"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}": {
          "get": {
              "tags": [
                  "Catalogs"
              ],
              "summary": "Get information about catalog version",
              "description": "Returns information about the catalog version that exists for the current base store.",
              "operationId": "getCatalogVersion",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "catalogId",
                      "in": "path",
                      "description": "Catalog identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "catalogVersionId",
                      "in": "path",
                      "description": "Catalog version identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CatalogVersion"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/catalogs/{catalogId}/{catalogVersionId}/categories/{categoryId}": {
          "get": {
              "tags": [
                  "Catalogs"
              ],
              "summary": "Get information about catagory in a catalog version",
              "description": "Returns information about a specified category that exists in a catalog version available for the current base store.",
              "operationId": "getCategories",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "catalogId",
                      "in": "path",
                      "description": "Catalog identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "catalogVersionId",
                      "in": "path",
                      "description": "Catalog version identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "categoryId",
                      "in": "path",
                      "description": "Category identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CategoryHierarchy"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/categories/{categoryId}/products": {
          "get": {
              "tags": [
                  "B2B Categories"
              ],
              "summary": "Gets a list of products under a specific category",
              "description": "Returns a list of products in the specified category.",
              "operationId": "getProductsByCategory",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "categoryId",
                      "in": "path",
                      "description": "The category ID",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "query",
                      "in": "query",
                      "description": "Serialized query in format: freeTextSearch: sort: facetKey1: facetValue1: facetKey2: facetValue2",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the display search results.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ProductSearchPage"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/ccpconfigurator/{configId}": {
          "get": {
              "tags": [
                  "Product Configurator CCP"
              ],
              "summary": "Gets a product configuration",
              "description": "Returns a product configuration, specified by its id. In case this call is done in the context of a logged-in session, the call ensures that the configuration is only returned if the user is authorized to view the configuration",
              "operationId": "getProductConfiguration",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "configId",
                      "in": "path",
                      "description": "Configuration identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "groupId",
                      "in": "query",
                      "description": "If the parameter is provided only the attributes of the requested group are returned. If the parameter is not provided, attributes for all groups are returned.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CCPConfiguration"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "patch": {
              "tags": [
                  "Product Configurator CCP"
              ],
              "summary": "Updates a product configuration",
              "description": "Updates a product configuration. It's possible to send only the changed parts of the configuration, for example a single value change for an attribute. These changes must include their entire path through the configuration (the group they belong to and its parent groups)",
              "operationId": "updateProductConfiguration",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "configId",
                      "in": "path",
                      "description": "Configuration identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "updatedConfiguration",
                      "description": "updatedConfiguration",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/CCPConfiguration"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CCPConfiguration"
                      }
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/ccpconfigurator/{configId}/configurationOverview": {
          "get": {
              "tags": [
                  "Product Configurator CCP"
              ],
              "summary": "Gets a product configuration overview",
              "description": "Gets a configuration overview, a simplified, condensed read-only view on the product configuration. Only the selected attribute values are present here",
              "operationId": "getProductConfigurationOverview",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "configId",
                      "in": "path",
                      "description": "Configuration identifier",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CCPConfigurationOverview"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/ccpconfigurator/{configId}/pricing": {
          "get": {
              "tags": [
                  "Product Configurator CCP"
              ],
              "summary": "Gets prices for a product configuration",
              "description": "Gets price elements on configuration level and on attribute value level if present. Those price elements include e.g. the configuration base price and the sum of selected options",
              "operationId": "getProductConfigurationPricing",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "configId",
                      "in": "path",
                      "description": "Configuration identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "groupId",
                      "in": "query",
                      "description": "Specifies the group for which the value prices are requested. In case not specified, no value prices are returned",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CCPConfigurationPricing"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/cms/components": {
          "get": {
              "tags": [
                  "Components"
              ],
              "summary": "Get component data",
              "description": "Finds cms components by the specified IDs. When none is provided, this will retrieve all components\nThe components list will be filtered by the given catalog, product or category restrictions, as well as by the pagination information. The result will be sorted in the specified order.",
              "operationId": "getComponentsByIds",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "catalogCode",
                      "in": "query",
                      "description": "Catalog code",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "categoryCode",
                      "in": "query",
                      "description": "Category code",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "componentIds",
                      "in": "query",
                      "description": "List of Component identifiers",
                      "required": false,
                      "type": "array",
                      "items": {
                          "type": "string"
                      },
                      "collectionFormat": "multi",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "Optional pagination parameter. Default value 0.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration (list of fields, which should be returned in response)",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT",
                      "allowEmptyValue": false,
                      "enum": [
                          "BASIC",
                          "DEFAULT",
                          "FULL"
                      ]
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "Optional pagination parameter. Default value 10.",
                      "required": false,
                      "type": "integer",
                      "default": 10,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "productCode",
                      "in": "query",
                      "description": "Product code",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Optional sort criterion. No default value.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ListAdaptedComponents"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Components"
              ],
              "summary": "Get components' data by id given in body",
              "description": "Given a list of component identifiers in body, return cms component data.",
              "operationId": "searchComponentsByIds",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "catalogCode",
                      "in": "query",
                      "description": "Catalog code",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "categoryCode",
                      "in": "query",
                      "description": "Category code",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "in": "body",
                      "name": "componentIdList",
                      "description": "List of Component identifiers",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/ComponentIDList"
                      }
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "Optional pagination parameter. Default value 0.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration (list of fields, which should be returned in response)",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT",
                      "allowEmptyValue": false,
                      "enum": [
                          "BASIC",
                          "DEFAULT",
                          "FULL"
                      ]
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "Optional pagination parameter. Default value 10.",
                      "required": false,
                      "type": "integer",
                      "default": 10,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "productCode",
                      "in": "query",
                      "description": "Product code",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Optional sort criterion. No default value.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ListAdaptedComponents"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": true
          }
      },
      "/{baseSiteId}/cms/components/{componentId}": {
          "get": {
              "tags": [
                  "Components"
              ],
              "summary": "Get component data by id",
              "description": "Given a component identifier, return cms component data.",
              "operationId": "getComponentById",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "catalogCode",
                      "in": "query",
                      "description": "Catalog code",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "categoryCode",
                      "in": "query",
                      "description": "Category code",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "componentId",
                      "in": "path",
                      "description": "Component identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration (list of fields, which should be returned in response)",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT",
                      "allowEmptyValue": false,
                      "enum": [
                          "BASIC",
                          "DEFAULT",
                          "FULL"
                      ]
                  },
                  {
                      "name": "productCode",
                      "in": "query",
                      "description": "Product code",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ComponentAdaptedData"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/cms/pages": {
          "get": {
              "tags": [
                  "Pages"
              ],
              "summary": "Get page data with a list of cms content slots",
              "description": "Get page data with a list of cms content slots based on pageLabelOrId or code. If none is provided then this will retrieve a Homepage cms content slots.\nContent pages can be filtered by pageLabelOrId while the rest of the page types can be filtered by the code.",
              "operationId": "getPage",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "code",
                      "in": "query",
                      "description": "If pageType is ProductPage, code should be product code; if pageType is CategoryPage, code should be category code; if pageType is CatalogPage, code should be catalog code",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration (list of fields, which should be returned in response)",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT",
                      "allowEmptyValue": false,
                      "enum": [
                          "BASIC",
                          "DEFAULT",
                          "FULL"
                      ]
                  },
                  {
                      "name": "pageLabelOrId",
                      "in": "query",
                      "description": "Page Label or Id; if no page has a label that matches the provided label exactly, try to find pages whose label starts with a section of the provided label. Otherwise, try to find the page by id. Note: URL encoding on the page label should be applied when the label contains special characters",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "pageType",
                      "in": "query",
                      "description": "Page type",
                      "required": false,
                      "type": "string",
                      "default": "ContentPage",
                      "allowEmptyValue": false,
                      "enum": [
                          "ContentPage",
                          "ProductPage",
                          "CategoryPage",
                          "CatalogPage"
                      ]
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/PageAdaptedData"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/cms/pages/{pageId}": {
          "get": {
              "tags": [
                  "Pages"
              ],
              "summary": "Get page data for specific page id with a list of cms content slots",
              "description": "Given a page identifier, return the page data with a list of cms content slots, each of which contains a list of cms component data.",
              "operationId": "getPageById",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration (list of fields, which should be returned in response)",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT",
                      "allowEmptyValue": false,
                      "enum": [
                          "BASIC",
                          "DEFAULT",
                          "FULL"
                      ]
                  },
                  {
                      "name": "pageId",
                      "in": "path",
                      "description": "Page Id",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/PageAdaptedData"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/cms/sitepages": {
          "get": {
              "tags": [
                  "Pages"
              ],
              "summary": "Get a list of page data.",
              "description": "Get a list page data with pagination support.",
              "operationId": "getAllPages",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "Pagination parameter. Default value 0.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration (list of fields, which should be returned in response)",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT",
                      "allowEmptyValue": false,
                      "enum": [
                          "BASIC",
                          "DEFAULT",
                          "FULL"
                      ]
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "Optional pagination parameter. Default value 10.",
                      "required": false,
                      "type": "integer",
                      "default": 10,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "pageType",
                      "in": "query",
                      "description": "Page type.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false,
                      "enum": [
                          "ContentPage",
                          "ProductPage",
                          "CategoryPage",
                          "CatalogPage"
                      ]
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Optional sort criterion. No default value.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ListAdaptedPages"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/costcenters": {
          "get": {
              "tags": [
                  "B2B Cost Centers"
              ],
              "summary": "Get active cost centers.",
              "description": "Returns the list of all active cost centers.",
              "operationId": "getActiveCostCenters",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BCostCenterList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "B2B Cost Centers"
              ],
              "summary": "Create a new cost center.",
              "description": "Creates a new cost center.",
              "operationId": "createCostCenter",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "costCenter",
                      "description": "Cost center object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/B2BCostCenter"
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/B2BCostCenter"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/costcenters/{costCenterCode}": {
          "get": {
              "tags": [
                  "B2B Cost Centers"
              ],
              "summary": "Get a cost center.",
              "description": "Returns a specific cost center based on specific code. The response contains detailed cost center information.",
              "operationId": "getCostCenter",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "costCenterCode",
                      "in": "path",
                      "description": "Cost center identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BCostCenter"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "patch": {
              "tags": [
                  "B2B Cost Centers"
              ],
              "summary": "Update a cost center.",
              "description": "Updates a cost center. Only attributes provided in the request body will be changed.",
              "operationId": "updateCostCenter",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "costCenter",
                      "description": "Cost center object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/B2BCostCenter"
                      }
                  },
                  {
                      "name": "costCenterCode",
                      "in": "path",
                      "description": "Cost center identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BCostCenter"
                      }
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/costcenters/{costCenterCode}/budgets": {
          "get": {
              "tags": [
                  "B2B Cost Centers"
              ],
              "summary": "Get all budgets and select budgets which belong to a specific cost center.",
              "description": "Returns the list of all budgets, where those budgets, which belong to a specific cost center, are selected.",
              "operationId": "getBudgetsForCostCenter",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "costCenterCode",
                      "in": "path",
                      "description": "Cost center identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the return results.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/BudgetList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "B2B Cost Centers"
              ],
              "summary": "Add a budget to a specific cost center.",
              "description": "Adds a budget to a specific cost center.",
              "operationId": "doAddBudgetToCostCenter",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "budgetCode",
                      "in": "query",
                      "description": "The budget which will be added to a specific cost center.",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "costCenterCode",
                      "in": "path",
                      "description": "Identifier of the cost center to which the budget will be added.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BSelectionData"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/costcenters/{costCenterCode}/budgets/{budgetCode}": {
          "delete": {
              "tags": [
                  "B2B Cost Centers"
              ],
              "summary": "Remove a budget from a specific cost center.",
              "description": "Removes a budget from a specific cost center.",
              "operationId": "removeBudgetFromCostCenter",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "budgetCode",
                      "in": "path",
                      "description": "The budget which will be removed from a specific cost center.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "costCenterCode",
                      "in": "path",
                      "description": "Identifier of the cost center from which the budget will be removed.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BSelectionData"
                      }
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/costcentersall": {
          "get": {
              "tags": [
                  "B2B Cost Centers"
              ],
              "summary": "Get cost centers.",
              "description": "Returns the list of all cost centers.",
              "operationId": "getCostCenters",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the return results.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BCostCenterList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/countries": {
          "get": {
              "tags": [
                  "Countries"
              ],
              "summary": "Get a list of countries.",
              "description": "If the value of type equals to shipping, then return shipping countries. If the value of type equals to billing, then return billing countries. If the value of type is not given, return all countries. The list is sorted alphabetically.",
              "operationId": "getCountries",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "type",
                      "in": "query",
                      "description": "The type of countries.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false,
                      "enum": [
                          "SHIPPING",
                          "BILLING"
                      ]
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CountryList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/countries/{countyIsoCode}/regions": {
          "get": {
              "tags": [
                  "Countries"
              ],
              "summary": "Fetch the list of regions for the provided country.",
              "description": "Lists all regions.",
              "operationId": "getCountryRegions",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "countyIsoCode",
                      "in": "path",
                      "description": "An ISO code for a country",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/RegionList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/currencies": {
          "get": {
              "tags": [
                  "Miscs"
              ],
              "summary": "Get a list of available currencies.",
              "description": "Lists all available currencies (all usable currencies for the current store). If the list of currencies for a base store is empty, a list of all currencies available in the system is returned.",
              "operationId": "getCurrencies",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CurrencyList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/customergroups": {
          "get": {
              "tags": [
                  "Customer Groups"
              ],
              "summary": "Get all subgroups of a customergroup.",
              "description": "Returns all customer groups that are direct subgroups of a customergroup.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
              "operationId": "getCustomerGroups",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "Current page number (starts with 0).",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "BASIC"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "Number of customer group returned in one page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/UserGroupList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Customer Groups"
              ],
              "summary": "Creates a new customer group.",
              "description": "Creates a new customer group that is a direct subgroup of a customergroup.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
              "operationId": "createCustomerGroup",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "userGroup",
                      "description": "User group object with id and name.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/UserGroup"
                      }
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/customergroups/{groupId}": {
          "get": {
              "tags": [
                  "Customer Groups"
              ],
              "summary": "Get a specific customer group.",
              "description": "Returns a customer group with a specific groupId.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
              "operationId": "getCustomerGroup",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "BASIC"
                  },
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier.",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/UserGroup"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/customergroups/{groupId}/members": {
          "put": {
              "tags": [
                  "Customer Groups"
              ],
              "summary": "Sets members for a user group.",
              "description": "Sets members for a user group. The list of existing members is overwritten with a new one.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
              "operationId": "replaceUsersForCustomerGroup",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "members",
                      "description": "List of users to set for customer group.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/MemberList"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "patch": {
              "tags": [
                  "Customer Groups"
              ],
              "summary": "Assigns user(s) to a customer group.",
              "description": "Assigns user(s) to a customer group.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
              "operationId": "updateCustomerGroupWithUsers",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "members",
                      "description": "List of users to assign to customer group.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/MemberList"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/customergroups/{groupId}/members/{userId}": {
          "delete": {
              "tags": [
                  "Customer Groups"
              ],
              "summary": "Deletes a user from a customer group.",
              "description": "Deletes user from a customer group.\n\nTo try out the methods of the Customer Groups controller, you must authorize a user who belongs to the “customermanagergroup”.",
              "operationId": "removeUsersFromCustomerGroup",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "groupId",
                      "in": "path",
                      "description": "Group identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier.",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/deliverycountries": {
          "get": {
              "tags": [
                  "Miscs"
              ],
              "summary": "Get a list of shipping countries.",
              "description": "Lists all supported delivery countries for the current store. The list is sorted alphabetically.",
              "operationId": "getDeliveryCountries",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CountryList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": true
          }
      },
      "/{baseSiteId}/export/products": {
          "get": {
              "tags": [
                  "Export"
              ],
              "summary": "Get a list of product exports.",
              "description": "Used for product export. Depending on the timestamp parameter, it can return all products or only products modified after the given time.",
              "operationId": "getExportedProducts",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "catalog",
                      "in": "query",
                      "description": "The catalog to retrieve products from. The catalog must be provided along with the version.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "timestamp",
                      "in": "query",
                      "description": "When this parameter is set, only products modified after the given time will be returned. This parameter should be in ISO-8601 format (for example, 2018-01-09T16:28:45+0000).",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "version",
                      "in": "query",
                      "description": "The catalog version. The catalog version must be provided along with the catalog.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ProductList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/feeds/orders/statusfeed": {
          "get": {
              "tags": [
                  "Feeds"
              ],
              "summary": "Get a list of orders with status updates.",
              "description": "Returns the orders that have changed status. Returns only the elements from the current baseSite that have been updated after the provided timestamp.",
              "operationId": "getOrderStatusFeed",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "timestamp",
                      "in": "query",
                      "description": "Only items newer than the given parameter are retrieved. This parameter should be in ISO-8601 format (for example, 2018-01-09T16:28:45+0000).",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrderStatusUpdateElementList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/forgottenpasswordtokens": {
          "post": {
              "tags": [
                  "Forgotten Passwords"
              ],
              "summary": "Generates a token to restore a customer's forgotten password.",
              "description": "Generates a token to restore a customer's forgotten password.",
              "operationId": "doRestorePassword",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "query",
                      "description": "Customer's user id. Customer user id is case insensitive.",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "202": {
                      "description": "Accepted"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/integration/merchant_callback": {
          "post": {
              "tags": [
                  "Merchant Callback"
              ],
              "summary": "Verify the decision of the Merchant",
              "description": "Verifies the decision of the merchant. \n\nNote, the “Try it out” button is not enabled for this method (always returns an error) because the Merchant Callback Controller handles parameters differently, depending on which payment provider is used. For more information about this controller, please refer to the “acceleratorocc AddOn” documentation on help.hybris.com.",
              "operationId": "doHandleMerchantCallback",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/integration/users/{userId}/carts/{cartId}/payment/sop/response": {
          "post": {
              "tags": [
                  "Merchant Callback"
              ],
              "summary": "Verify the decision of the Merchant for a cart",
              "description": "Verifies the decision of the merchant for a specified cart, and stores information of the PaymentSubscriptionResult for the cart. \n\nNote, the “Try it out” button is not enabled for this method (always returns an error) because the Merchant Callback Controller handles parameters differently, depending on which payment provider is used. For more information about this controller, please refer to the “acceleratorocc AddOn” documentation on help.hybris.com.",
              "operationId": "doHandleCartMerchantCallback",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/languages": {
          "get": {
              "tags": [
                  "Miscs"
              ],
              "summary": "Get a list of available languages.",
              "description": "Lists all available languages (all languages used for a particular store). If the list of languages for a base store is empty, a list of all languages available in the system will be returned.",
              "operationId": "getLanguages",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/LanguageList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/messagecenter/im/conversations": {
          "post": {
              "tags": [
                  "Message Center"
              ],
              "summary": "Sends messages",
              "description": "Sends messages in a conversation and returns the conversation data.",
              "operationId": "sendMessageUsingPOST",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "conversationMessageList",
                      "description": "the list of messages",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/conversationMessageList"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/conversation"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/messagecenter/im/conversations/agentconversations": {
          "get": {
              "tags": [
                  "Message Center"
              ],
              "summary": "Gets unassigned or open conversations for current CSA",
              "description": "Returns unassigned or open conversation list for current CSA.",
              "operationId": "getConversationsForAgentUsingGET",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "status",
                      "in": "query",
                      "description": "the conversation status",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false,
                      "enum": [
                          "open",
                          "unassigned"
                      ]
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/conversationList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/messagecenter/im/conversations/customerconversations": {
          "get": {
              "tags": [
                  "Message Center"
              ],
              "summary": "Gets conversations of current customer",
              "description": "Returns the conversation list of current customer.",
              "operationId": "getConversationsForCustomerUsingGET",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/conversationList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/messagecenter/im/conversations/{conversationId}/close": {
          "patch": {
              "tags": [
                  "Message Center"
              ],
              "summary": "Closes an open conversation",
              "description": "Closes an open conversation and returns the conversation data.",
              "operationId": "closeConversationUsingPATCH",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "conversationId",
                      "in": "path",
                      "description": "the uid of conversation",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/conversation"
                      }
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/messagecenter/im/conversations/{conversationId}/messages": {
          "get": {
              "tags": [
                  "Message Center"
              ],
              "summary": "Gets conversation messages for current customer or current CSA",
              "description": "Returns all messages of a specific conversation.",
              "operationId": "getMessagesForConversationUsingGET",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "conversationId",
                      "in": "path",
                      "description": "the uid of conversation",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/conversationMessageList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/messagecenter/im/conversations/{conversationId}/pick": {
          "patch": {
              "tags": [
                  "Message Center"
              ],
              "summary": "Picks an unassigned conversation",
              "description": "Picks an unassigned conversation and returns the conversation data.",
              "operationId": "pickConversationUsingPATCH",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "conversationId",
                      "in": "path",
                      "description": "the uid of conversation",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/conversation"
                      }
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/orderApprovalPermissionTypes": {
          "get": {
              "tags": [
                  "Order Approval Permission Types"
              ],
              "summary": "Get order approval permission types.",
              "description": "Returns the list of order approval permission types.",
              "operationId": "getOrderApprovalPermissionTypes",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrderApprovalPermissionTypeList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/orderforms": {
          "get": {
              "tags": [
                  "Order Forms"
              ],
              "summary": "getOrderFormsForCurrentUser",
              "operationId": "getOrderFormsForCurrentUserUsingGET",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "fields",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrderFormList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Order Forms"
              ],
              "summary": "createOrderForm",
              "operationId": "createOrderFormUsingPOST",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "orderFormWsDTO",
                      "description": "orderFormWsDTO",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/OrderForm"
                      }
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/orderforms/{orderFormCode}": {
          "get": {
              "tags": [
                  "Order Forms"
              ],
              "summary": "getOrderFormForCode",
              "operationId": "getOrderFormForCodeUsingGET",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "fields",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orderFormCode",
                      "in": "path",
                      "description": "orderFormCode",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrderForm"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "put": {
              "tags": [
                  "Order Forms"
              ],
              "summary": "updateOrderForm",
              "operationId": "updateOrderFormUsingPUT",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "fields",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orderFormCode",
                      "in": "path",
                      "description": "orderFormCode",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "orderFormWsDTO",
                      "description": "orderFormWsDTO",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/OrderForm"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrderForm"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Order Forms"
              ],
              "summary": "deleteOrderForm",
              "operationId": "deleteOrderFormUsingDELETE",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "orderFormCode",
                      "in": "path",
                      "description": "orderFormCode",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/orderforms/{orderFormCode}/cart": {
          "post": {
              "tags": [
                  "Order Forms"
              ],
              "summary": "orderForm",
              "operationId": "orderFormUsingPOST",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "fields",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orderFormCode",
                      "in": "path",
                      "description": "orderFormCode",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/orders/{code}": {
          "get": {
              "tags": [
                  "Orders"
              ],
              "summary": "Get a order.",
              "description": "Returns details of a specific order based on the order GUID (Globally Unique Identifier) or the order CODE. The response contains detailed order information.",
              "operationId": "getOrder",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "code",
                      "in": "path",
                      "description": "Order GUID (Globally Unique Identifier) or order CODE",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Order"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/orgProducts/{productCode}": {
          "get": {
              "tags": [
                  "B2B Products"
              ],
              "summary": "Returns a product.",
              "description": "Returns a product, based on the specified product code.",
              "operationId": "getOrgProduct",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "productCode",
                      "in": "path",
                      "description": "The product code",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Product"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/orgUsers/{userId}": {
          "get": {
              "tags": [
                  "B2B Users"
              ],
              "summary": "Get a B2B user profile",
              "description": "Returns a B2B user profile.",
              "operationId": "getOrgUser",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/User"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/orgUsers/{userId}/cartFromOrder": {
          "post": {
              "tags": [
                  "B2B Orders"
              ],
              "summary": "Create a cart based on a previous order",
              "description": "Returns a list of modification applied to the new cart compared to original. e.g lower quantity was added",
              "operationId": "createCartFromOrder",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body.",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT",
                      "allowEmptyValue": false,
                      "enum": [
                          "BASIC",
                          "DEFAULT",
                          "FULL"
                      ]
                  },
                  {
                      "name": "orderCode",
                      "in": "query",
                      "description": "The order code",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/CartModificationList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/orgUsers/{userId}/carts/{cartId}/addresses/delivery": {
          "put": {
              "tags": [
                  "B2B Carts"
              ],
              "summary": "Sets the delivery address for the checkout cart.",
              "description": "Sets the delivery address for the checkout cart.",
              "operationId": "replaceOrgCartDeliveryAddress",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "addressId",
                      "in": "query",
                      "description": "The id of the address.",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Cart"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/orgUsers/{userId}/carts/{cartId}/entries/": {
          "post": {
              "tags": [
                  "B2B Carts"
              ],
              "summary": "Adds more quantity to the cart of specific products",
              "description": "Updates the details of specified products in the cart, based either on the product code or the entryNumber.",
              "operationId": "doAddOrgCartEntries",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "entries",
                      "description": "List of entries containing the amount to add and the product code or the entryNumber.",
                      "required": false,
                      "schema": {
                          "$ref": "#/definitions/OrderEntryList"
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CartModificationList"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "put": {
              "tags": [
                  "B2B Carts"
              ],
              "summary": "Updates the quantity for specific products in the cart",
              "description": "Creates the specified products in the cart, or overwrites the details of existing products in the cart, based either on the product code or the entryNumber. For existing products, attributes not provided in the request body will be defined again (set to null or default).",
              "operationId": "replaceOrgCartEntries",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "entries",
                      "description": "List of entries containing the amount to add and the product code or the entryNumber.",
                      "required": false,
                      "schema": {
                          "$ref": "#/definitions/OrderEntryList"
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CartModificationList"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/orgUsers/{userId}/orders": {
          "post": {
              "tags": [
                  "B2B Orders"
              ],
              "summary": "Places a B2B Order.",
              "description": "Places a B2B Order. By default the payment type is ACCOUNT. Please set payment type to CARD if placing an order using credit card.",
              "operationId": "placeOrgOrder",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "query",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "termsChecked",
                      "in": "query",
                      "description": "Whether terms were accepted or not.",
                      "required": true,
                      "type": "boolean",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Order"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/orgUsers/{userId}/replenishmentOrders": {
          "post": {
              "tags": [
                  "B2B Orders"
              ],
              "summary": "Creates an Order and schedules Replenishment.",
              "description": "Creates an Order and schedules Replenishment. By default the payment type is ACCOUNT. Please set payment type to CARD if placing an order using credit card.",
              "operationId": "createReplenishmentOrder",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "query",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "in": "body",
                      "name": "scheduleReplenishmentForm",
                      "description": "Schedule replenishment form object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/ScheduleReplenishmentForm"
                      }
                  },
                  {
                      "name": "termsChecked",
                      "in": "query",
                      "description": "Whether terms were accepted or not.",
                      "required": true,
                      "type": "boolean",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/ReplenishmentOrder"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/paymentmodes": {
          "get": {
              "tags": [
                  "Payment Modes"
              ],
              "summary": "Gets all available payment modes.",
              "description": "Gets all payment modes defined for the base store.",
              "operationId": "getPaymentModes",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/PaymentModeList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/paymenttypes": {
          "get": {
              "tags": [
                  "B2B Miscs"
              ],
              "summary": "Returns a list of the available payment types.",
              "description": "Returns a list of the available payment types in the B2B checkout process.",
              "operationId": "getPaymentTypes",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BPaymentTypeList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/products/expressupdate": {
          "get": {
              "tags": [
                  "Products"
              ],
              "summary": "Get products added to the express update feed.",
              "description": "Returns products added to the express update feed. Returns only elements updated after the provided timestamp. The queue is cleared using a defined cronjob.",
              "operationId": "getExpressUpdateProducts",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "catalog",
                      "in": "query",
                      "description": "Only products from this catalog are returned. Format: catalogId:catalogVersion",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "timestamp",
                      "in": "query",
                      "description": "Only items newer than the given parameter are retrieved from the queue. This parameter should be in ISO-8601 format.",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ProductExpressUpdateElementList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/products/search": {
          "get": {
              "tags": [
                  "Products"
              ],
              "summary": "Get a list of products and additional data",
              "description": "Returns a list of products and additional data, such as available facets, available sorting, and pagination options. It can also include spelling suggestions. To make spelling suggestions work, you need to make sure that \"enableSpellCheck\" on the SearchQuery is set to \"true\" (by default, it should already be set to \"true\"). You also need to have indexed properties configured to be used for spellchecking.",
              "operationId": "getProducts",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "query",
                      "in": "query",
                      "description": "Serialized query, free text search, facets. The format of a serialized query: freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "searchQueryContext",
                      "in": "query",
                      "description": "The context to be used in the search query.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the return results.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ProductSearchPage"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "head": {
              "tags": [
                  "Products"
              ],
              "summary": "Get a header with total number of products.",
              "description": "In the response header, the \"x-total-count\" indicates the total number of products satisfying a query.",
              "operationId": "countProducts",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "query",
                      "in": "query",
                      "description": "Serialized query, free text search, facets. The format of a serialized query: freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/products/suggestions": {
          "get": {
              "tags": [
                  "Products"
              ],
              "summary": "Get a list of available suggestions",
              "description": "Returns a list of all available suggestions related to a given term and limits the results to a specific value of the max parameter.",
              "operationId": "getSuggestions",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "max",
                      "in": "query",
                      "description": "Specifies the limit of results.",
                      "required": false,
                      "type": "integer",
                      "default": 10,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "term",
                      "in": "query",
                      "description": "Specified term",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/SuggestionList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/products/{productCode}": {
          "get": {
              "tags": [
                  "Products"
              ],
              "summary": "Get product details.",
              "description": "Returns details of a single product according to a product code.",
              "operationId": "getProduct",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "productCode",
                      "in": "path",
                      "description": "Product identifier",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Product"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/products/{productCode}/configurator/textfield": {
          "get": {
              "tags": [
                  "Product Configurator Textfield Template"
              ],
              "summary": "Get textfield configuration",
              "description": "Returns list of textfield configuration elements.",
              "operationId": "getConfigurationByProductCodeUsingGET",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "productCode",
                      "in": "path",
                      "description": "Product identifier",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ConfigurationInfoList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/products/{productCode}/configurators/ccpconfigurator": {
          "get": {
              "tags": [
                  "Product Configurator CCP"
              ],
              "summary": "Gets the default product configuration for a complex product",
              "description": "Returns the default product configuration for a given complex product. This means that a new instance of the configuration runtime object is created that is equipped with the default values from the configuration model. This API always returns the _entire_ group hierarchy, whereas it's capable of both including all attributes or only those for the first group. This is controlled by query attribute provideAllAttributes",
              "operationId": "getDefaultProductConfiguration",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "productCode",
                      "in": "path",
                      "description": "Product code",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "provideAllAttributes",
                      "in": "query",
                      "description": "If this parameter is provided and its value is true, attributes for all groups are returned. Otherwise, attributes only for the first group are considered.",
                      "required": false,
                      "type": "boolean",
                      "default": false,
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CCPConfiguration"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/products/{productCode}/references": {
          "get": {
              "tags": [
                  "Products"
              ],
              "summary": "Get a product reference",
              "description": "Returns references for a product with a given product code. Reference type specifies which references to return.",
              "operationId": "getProductReferences",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "Maximum size of returned results.",
                      "required": false,
                      "type": "integer",
                      "default": 2147483647,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "productCode",
                      "in": "path",
                      "description": "Product identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "referenceType",
                      "in": "query",
                      "description": "Comma-separated list of reference types according to enum ProductReferenceTypeEnum. If not specified, all types of product references will be used.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ProductReferenceList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/products/{productCode}/reviews": {
          "get": {
              "tags": [
                  "Products"
              ],
              "summary": "Get reviews for a product",
              "description": "Returns the reviews for a product with a given product code.",
              "operationId": "getProductReviews",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "maxCount",
                      "in": "query",
                      "description": "Maximum count of reviews",
                      "required": false,
                      "type": "integer",
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "productCode",
                      "in": "path",
                      "description": "Product identifier",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ReviewList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Products"
              ],
              "summary": "Creates a new customer review as an anonymous user.",
              "description": "Creates a new customer review as an anonymous user.",
              "operationId": "createProductReview",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "productCode",
                      "in": "path",
                      "description": "Product identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "review",
                      "description": "Object contains review details like : rating, alias, headline, comment",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/Review"
                      }
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/Review"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/products/{productCode}/stock": {
          "get": {
              "tags": [
                  "Products"
              ],
              "summary": "Get a product's stock level.",
              "description": "Returns a product's stock levels sorted by distance from the specified location, which is provided using the free-text \"location\" parameter, or by using the longitude and latitude parameters. The following two sets of parameters are available: location (required), currentPage (optional), pageSize (optional); or longitude (required), latitude (required), currentPage (optional), pageSize(optional).",
              "operationId": "getLocationProductStock",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "latitude",
                      "in": "query",
                      "description": "Latitude location parameter.",
                      "required": false,
                      "type": "number",
                      "format": "double",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "location",
                      "in": "query",
                      "description": "Free-text location",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "longitude",
                      "in": "query",
                      "description": "Longitude location parameter.",
                      "required": false,
                      "type": "number",
                      "format": "double",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "productCode",
                      "in": "path",
                      "description": "Product identifier",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/StoreFinderStockSearchPage"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "head": {
              "tags": [
                  "Products"
              ],
              "summary": "Get header with a total number of product's stock levels.",
              "description": "In the response header, the \"x-total-count\" indicates the total number of a product's stock levels. The following two sets of parameters are available: location (required); or longitude (required), and latitude (required).",
              "operationId": "countProductStockByLocation",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "latitude",
                      "in": "query",
                      "description": "Latitude location parameter.",
                      "required": false,
                      "type": "number",
                      "format": "double",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "location",
                      "in": "query",
                      "description": "Free-text location",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "longitude",
                      "in": "query",
                      "description": "Longitude location parameter.",
                      "required": false,
                      "type": "number",
                      "format": "double",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "productCode",
                      "in": "path",
                      "description": "Product identifier",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/products/{productCode}/stock/{storeName}": {
          "get": {
              "tags": [
                  "Products"
              ],
              "summary": "Get a product's stock level for a store",
              "description": "Returns a product's stock level for a particular store (in other words, for a particular point of sale).",
              "operationId": "getStoreProductStock",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "productCode",
                      "in": "path",
                      "description": "Product identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "storeName",
                      "in": "path",
                      "description": "Store identifier",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Stock"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/promotions": {
          "get": {
              "tags": [
                  "Promotions"
              ],
              "summary": "Get a list of promotions.",
              "description": "Returns promotions defined for a current base site. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine.",
              "operationId": "getPromotions",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "BASIC"
                  },
                  {
                      "name": "promotionGroup",
                      "in": "query",
                      "description": "Only promotions from this group are returned",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "type",
                      "in": "query",
                      "description": "Defines what type of promotions should be returned. Values supported for that parameter are: <ul><li>all: All available promotions are returned</li><li>product: Only product promotions are returned</li><li>order: Only order promotions are returned</li></ul>",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false,
                      "enum": [
                          "all",
                          "product",
                          "order"
                      ]
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/PromotionList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/promotions/{code}": {
          "get": {
              "tags": [
                  "Promotions"
              ],
              "summary": "Get a promotion based on code",
              "description": "Returns details of a single promotion specified by a promotion code. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine.",
              "operationId": "getPromotion",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "code",
                      "in": "path",
                      "description": "Promotion identifier (code)",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "BASIC"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Promotion"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/resetpassword": {
          "post": {
              "tags": [
                  "Forgotten Passwords"
              ],
              "summary": "Reset password after customer's clicked forgotten password link.",
              "description": "Reset password after customer's clicked forgotten password link.",
              "operationId": "doResetPassword",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "resetPassword",
                      "description": "Request body parameter that contains details such as token and new password",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/ResetPassword"
                      }
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "202": {
                      "description": "Accepted"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/stores": {
          "get": {
              "tags": [
                  "Stores"
              ],
              "summary": "Get a list of store locations",
              "description": "Lists all store locations that are near the location specified in a query or based on latitude and longitude.",
              "operationId": "getStoreLocations",
              "parameters": [
                  {
                      "name": "accuracy",
                      "in": "query",
                      "description": "Accuracy in meters.",
                      "required": false,
                      "type": "number",
                      "default": 0.0,
                      "format": "double",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "latitude",
                      "in": "query",
                      "description": "Coordinate that specifies the north-south position of a point on the Earth's surface.",
                      "required": false,
                      "type": "number",
                      "format": "double",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "longitude",
                      "in": "query",
                      "description": "Coordinate that specifies the east-west position of a point on the Earth's surface.",
                      "required": false,
                      "type": "number",
                      "format": "double",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "query",
                      "in": "query",
                      "description": "Location in natural language i.e. city or country.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "radius",
                      "in": "query",
                      "description": "Radius in meters. Max value: 40075000.0 (Earth's perimeter).",
                      "required": false,
                      "type": "number",
                      "default": 100000.0,
                      "format": "double",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the return results.",
                      "required": false,
                      "type": "string",
                      "default": "asc",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/StoreFinderSearchPage"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "head": {
              "tags": [
                  "Stores"
              ],
              "summary": "Get a header with the number of store locations.",
              "description": "In the response header, the \"x-total-count\" indicates the number of all store locations that are near the location specified in a query, or based on latitude and longitude.",
              "operationId": "countStoreLocations",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "accuracy",
                      "in": "query",
                      "description": "Accuracy in meters.",
                      "required": false,
                      "type": "number",
                      "default": 0.0,
                      "format": "double",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "latitude",
                      "in": "query",
                      "description": "Coordinate that specifies the north-south position of a point on the Earth's surface.",
                      "required": false,
                      "type": "number",
                      "format": "double",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "longitude",
                      "in": "query",
                      "description": "Coordinate that specifies the east-west position of a point on the Earth's surface.",
                      "required": false,
                      "type": "number",
                      "format": "double",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "query",
                      "in": "query",
                      "description": "Location in natural language i.e. city or country.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "radius",
                      "in": "query",
                      "description": "Radius in meters. Max value: 40075000.0 (Earth's perimeter).",
                      "required": false,
                      "type": "number",
                      "default": 100000.0,
                      "format": "double",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/stores/country/{countryIso}": {
          "get": {
              "tags": [
                  "Stores"
              ],
              "summary": "Get a list of store locations for a given country",
              "description": "Lists all store locations that are in the specified country.",
              "operationId": "getStoresByCountry",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "countryIso",
                      "in": "path",
                      "description": "Country ISO code",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/PointOfServiceList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/stores/country/{countryIso}/region/{regionIso}": {
          "get": {
              "tags": [
                  "Stores"
              ],
              "summary": "Get a list of store locations for a given country and region",
              "description": "Lists all store locations that are in the specified country and region.",
              "operationId": "getStoresByCountryAndRegion",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "countryIso",
                      "in": "path",
                      "description": "Country ISO code",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "regionIso",
                      "in": "path",
                      "description": "Region ISO code",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/PointOfServiceList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/stores/storescounts": {
          "get": {
              "tags": [
                  "Stores"
              ],
              "summary": "Gets a store location count per country and regions",
              "description": "Returns store counts in countries and regions",
              "operationId": "getLocationCounts",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/StoreCountList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/stores/{storeId}": {
          "get": {
              "tags": [
                  "Stores"
              ],
              "summary": "Get a store location",
              "description": "Returns store location based on its unique name.",
              "operationId": "getStoreLocation",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "storeId",
                      "in": "path",
                      "description": "Store identifier (currently store name)",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/PointOfService"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/ticketCategories": {
          "get": {
              "tags": [
                  "Tickets"
              ],
              "summary": "Get all ticket categories.",
              "operationId": "getTicketCategories",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/TicketCategoryList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/titles": {
          "get": {
              "tags": [
                  "Miscs"
              ],
              "summary": "Get a list of all localized titles.",
              "description": "Lists all localized titles.",
              "operationId": "getTitles",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/TitleList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users": {
          "post": {
              "tags": [
                  "Users"
              ],
              "summary": " Registers a customer",
              "description": "Registers a customer. Requires the following parameters: login, password, firstName, lastName, titleCode.",
              "operationId": "createUser",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "in": "body",
                      "name": "user",
                      "description": "User's object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/UserSignUp"
                      }
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/User"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}": {
          "get": {
              "tags": [
                  "Users"
              ],
              "summary": "Get customer profile",
              "description": "Returns customer profile.",
              "operationId": "getUser",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/User"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "put": {
              "tags": [
                  "Users"
              ],
              "summary": "Updates customer profile",
              "description": "Updates customer profile. Attributes not provided in the request body will be defined again (set to null or default).",
              "operationId": "replaceUser",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "user",
                      "description": "User's object",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/User"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Users"
              ],
              "summary": "Delete customer profile.",
              "description": "Removes customer profile.",
              "operationId": "removeUser",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "patch": {
              "tags": [
                  "Users"
              ],
              "summary": "Updates customer profile",
              "description": "Updates customer profile. Only attributes provided in the request body will be changed.",
              "operationId": "updateUser",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "user",
                      "description": "User's object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/User"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/addresses": {
          "get": {
              "tags": [
                  "Address"
              ],
              "summary": "Get customer's addresses",
              "description": "Returns customer's addresses.",
              "operationId": "getAddresses",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/AddressList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Address"
              ],
              "summary": "Creates a new address.",
              "description": "Creates a new address.",
              "operationId": "createAddress",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "in": "body",
                      "name": "address",
                      "description": "Address object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/Address"
                      }
                  },
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/Address"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/addresses/verification": {
          "post": {
              "tags": [
                  "Address"
              ],
              "summary": "Verifies address.",
              "description": "Verifies address.",
              "operationId": "validateAddress",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "in": "body",
                      "name": "address",
                      "description": "Address object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/Address"
                      }
                  },
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/AddressValidation"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/addresses/{addressId}": {
          "get": {
              "tags": [
                  "Address"
              ],
              "summary": "Get info about address",
              "description": "Returns detailed information about address with a given id.",
              "operationId": "getAddress",
              "parameters": [
                  {
                      "name": "addressId",
                      "in": "path",
                      "description": "Address identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Address"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "put": {
              "tags": [
                  "Address"
              ],
              "summary": "Updates the address",
              "description": "Updates the address. Attributes not provided in the request will be defined again (set to null or default).",
              "operationId": "replaceAddress",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "in": "body",
                      "name": "address",
                      "description": "Address object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/Address"
                      }
                  },
                  {
                      "name": "addressId",
                      "in": "path",
                      "description": "Address identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Address"
              ],
              "summary": "Delete customer's address.",
              "description": "Removes customer's address.",
              "operationId": "removeAddress",
              "parameters": [
                  {
                      "name": "addressId",
                      "in": "path",
                      "description": "Address identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "patch": {
              "tags": [
                  "Address"
              ],
              "summary": "Updates the address",
              "description": "Updates the address. Only attributes provided in the request body will be changed.",
              "operationId": "updateAddress",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "in": "body",
                      "name": "address",
                      "description": "Address object",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/Address"
                      }
                  },
                  {
                      "name": "addressId",
                      "in": "path",
                      "description": "Address identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/availableOrgUnitNodes": {
          "get": {
              "tags": [
                  "Organizational Unit Management"
              ],
              "summary": "Get available organizational unit nodes.",
              "description": "Returns list of available organizational unit nodes.",
              "operationId": "getAvailableOrgUnitNodes",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BUnitNodeList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/budgets": {
          "get": {
              "tags": [
                  "Budget Management"
              ],
              "summary": "Gets the list of budgets for a specified base store",
              "description": "Returns the list of budgets accessible to a specified user for a specified base store. The response can display the results across multiple pages, if required.",
              "operationId": "getBudgets",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the returned results.",
                      "required": false,
                      "type": "string",
                      "default": "code",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/BudgetList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Budget Management"
              ],
              "summary": " Creates a new budget",
              "description": "Creates a new budget.",
              "operationId": "createBudget",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "budget",
                      "description": "Budget",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/Budget"
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/Budget"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/budgets/{budgetCode}": {
          "get": {
              "tags": [
                  "Budget Management"
              ],
              "summary": "Gets specific budget details accessible to a specified user for a specified base store based on budget code",
              "description": "Returns specific budget details accessible to a specified user for a specified base store based on budget code. The response contains detailed order information.",
              "operationId": "getBudget",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "budgetCode",
                      "in": "path",
                      "description": "Budget GUID (Globally Unique Identifier) or budget CODE.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Budget"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "patch": {
              "tags": [
                  "Budget Management"
              ],
              "summary": "Updates the budget",
              "description": "Updates the budget. Only attributes provided in the request body will be changed.",
              "operationId": "updateBudget",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "budget",
                      "description": "Budget.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/Budget"
                      }
                  },
                  {
                      "name": "budgetCode",
                      "in": "path",
                      "description": "Budget GUID (Globally Unique Identifier) or budget CODE.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Budget"
                      }
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts": {
          "get": {
              "tags": [
                  "Carts"
              ],
              "summary": "Get all customer carts.",
              "description": "Lists all customer carts.",
              "operationId": "getCarts",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "Optional pagination parameter in case of savedCartsOnly == true. Default value 0.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "Optional {@link PaginationData} parameter in case of savedCartsOnly == true. Default value 20.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "savedCartsOnly",
                      "in": "query",
                      "description": "Optional parameter. If the parameter is provided and its value is true, only saved carts are returned.",
                      "required": false,
                      "type": "boolean",
                      "default": false,
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Optional sort criterion in case of savedCartsOnly == true. No default value.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CartList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Carts"
              ],
              "summary": "Creates or restore a cart for a user.",
              "description": "Creates a new cart or restores an anonymous cart as a user's cart (if an old Cart Id is given in the request).",
              "operationId": "createCart",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "oldCartId",
                      "in": "query",
                      "description": "Anonymous cart GUID.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "toMergeCartGuid",
                      "in": "query",
                      "description": "The GUID of the user's cart that will be merged with the anonymous cart.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/Cart"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/current": {
          "get": {
              "tags": [
                  "B2B Carts"
              ],
              "summary": "Gets the current cart.",
              "description": "Gets the current cart.",
              "operationId": "getCurrentOrgCart",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Cart"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}": {
          "get": {
              "tags": [
                  "Carts"
              ],
              "summary": "Get a cart with a given identifier.",
              "description": "Returns the cart with a given identifier.",
              "operationId": "getCart",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Cart"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Carts"
              ],
              "summary": "Deletes a cart with a given cart id.",
              "description": "Deletes a cart with a given cart id.",
              "operationId": "removeCart",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/addresses/delivery": {
          "post": {
              "tags": [
                  "Cart Addresses"
              ],
              "summary": "Creates a delivery address for the cart.",
              "description": "Creates an address and assigns it to the cart as the delivery address.",
              "operationId": "createCartDeliveryAddress",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "in": "body",
                      "name": "address",
                      "description": "Request body parameter that contains details such as the customer's first name (firstName), the customer's last name (lastName), the customer's title (titleCode), the customer's phone (phone), the country (country.isocode), the first part of the address (line1), the second part of the address (line2), the town (town), the postal code (postalCode), and the region (region.isocode).\n\nThe DTO is in XML or .json format.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/Address"
                      }
                  },
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/Address"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "put": {
              "tags": [
                  "Cart Addresses"
              ],
              "summary": "Sets a delivery address for the cart.",
              "description": "Sets a delivery address for the cart. The address country must be placed among the delivery countries of the current base store.",
              "operationId": "replaceCartDeliveryAddress",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "addressId",
                      "in": "query",
                      "description": "Address identifier",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Cart Addresses"
              ],
              "summary": "Deletes the delivery address from the cart.",
              "description": "Deletes the delivery address from the cart.",
              "operationId": "removeCartDeliveryAddress",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/bundles": {
          "post": {
              "tags": [
                  "Bundles"
              ],
              "summary": "Start a bundle.",
              "description": "Starts a bundle once the productCode, its quantity, and a bundle templateId is provided. A successful result returns a CartModification response.",
              "operationId": "createBundle",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "bundleStarter",
                      "description": "Mandatory data required to start a bundle. This includes the templateId of the bundle, the productCode, and the quantity of the product itself.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/BundleStarter"
                      }
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/CartModification"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/clonesavedcart": {
          "post": {
              "tags": [
                  "Save Cart"
              ],
              "summary": "Explicitly clones a cart.",
              "description": "Explicitly clones a cart.",
              "operationId": "doCartClone",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "description",
                      "in": "query",
                      "description": "The description that should be applied to the cloned cart.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "name",
                      "in": "query",
                      "description": "The name that should be applied to the cloned cart.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/SaveCartResult"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/consolidate": {
          "get": {
              "tags": [
                  "Extended Carts"
              ],
              "summary": "Get consolidated pickup options.",
              "description": "Returns a list of stores that have all the pick-up items in stock.\n\nNote, if there are no stores that have all the pick up items in stock, or all items are already set to the same pick up location, the response returns an empty list.",
              "operationId": "getConsolidatedPickupLocations",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/PointOfServiceList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Extended Carts"
              ],
              "summary": "Handles the consolidating pickup locations.",
              "description": "Specifies one store location where all items will be picked up.\n\nNote, if any of the items are not available at the specified location, these items are removed from the cart.",
              "operationId": "createConsolidatedPickupLocation",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "storeName",
                      "in": "query",
                      "description": "The name of the store where items will be picked up",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CartModificationList"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/costcenter": {
          "put": {
              "tags": [
                  "B2B Carts"
              ],
              "summary": "Sets the cost center for the checkout cart.",
              "description": "Sets the cost center for the checkout cart.",
              "operationId": "replaceOrgCartCostCenter",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "costCenterId",
                      "in": "query",
                      "description": "The id of the cost center.",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Cart"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymode": {
          "get": {
              "tags": [
                  "Cart Delivery Modes"
              ],
              "summary": "Get the delivery mode selected for the cart.",
              "description": "Returns the delivery mode selected for the cart.",
              "operationId": "getCartDeliveryMode",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/DeliveryMode"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "put": {
              "tags": [
                  "Cart Delivery Modes"
              ],
              "summary": "Sets the delivery mode for a cart.",
              "description": "Sets the delivery mode with a given identifier for the cart.",
              "operationId": "replaceCartDeliveryMode",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "deliveryModeId",
                      "in": "query",
                      "description": "Delivery mode identifier (code)",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Cart Delivery Modes"
              ],
              "summary": "Deletes the delivery mode from the cart.",
              "description": "Deletes the delivery mode from the cart.",
              "operationId": "removeCartDeliveryMode",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/deliverymodes": {
          "get": {
              "tags": [
                  "Cart Delivery Modes"
              ],
              "summary": "Get all delivery modes for the current store and delivery address.",
              "description": "Returns all delivery modes supported for the current base store and cart delivery address. A delivery address must be set for the cart, otherwise an empty list will be returned.",
              "operationId": "getCartDeliveryModes",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/DeliveryModeList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/email": {
          "put": {
              "tags": [
                  "Carts"
              ],
              "summary": "Assigns an email to the cart.",
              "description": "Assigns an email to the cart. This step is required to make a guest checkout.",
              "operationId": "replaceCartGuestUser",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "email",
                      "in": "query",
                      "description": "Email of the guest user. It will be used during the checkout process.",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/entries": {
          "get": {
              "tags": [
                  "Cart Entries"
              ],
              "summary": "Get cart entries.",
              "description": "Returns cart entries.",
              "operationId": "getCartEntries",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrderEntryList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Cart Entries"
              ],
              "summary": "Adds a product to the cart.",
              "description": "Adds a product to the cart.",
              "operationId": "createCartEntry",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "entry",
                      "description": "Request body parameter that contains details such as the product code (product.code), the quantity of product (quantity), and the pickup store name (deliveryPointOfService.name).\n\nThe DTO is in XML or .json format.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/OrderEntry"
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CartModification"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/ccpconfigurator": {
          "post": {
              "tags": [
                  "Product Configurator CCP Cart Integration"
              ],
              "summary": "Adds a product configuration to the cart",
              "description": "Adds a product configuration to the cart. The root product of the configuration is added as a cart entry, in addition the configuration is attached to the new entry",
              "operationId": "createCartEntryConfiguration",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "entry",
                      "description": "Request body parameter that contains attributes for creating the order entry, like quantity, product code and configuration identifier",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/CCPOrderEntry"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/CartModification"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/configurator/textfield": {
          "post": {
              "tags": [
                  "Product Configurator Textfield Template"
              ],
              "summary": "Adds a product to the cart.",
              "description": "Adds a textfield configurator product to the cart.",
              "operationId": "addCartEntryUsingPOST",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "entry",
                      "description": "Request body parameter (DTO in xml or json format) which contains details like : product code (product.code), quantity of product (quantity), pickup store name (deliveryPointOfService.name)",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/OrderEntry"
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration (list of fields, which should be returned in response)",
                      "required": false,
                      "type": "string",
                      "default": "FULL",
                      "allowEmptyValue": false,
                      "enum": [
                          "BASIC",
                          "DEFAULT",
                          "FULL"
                      ]
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CartModification"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}": {
          "get": {
              "tags": [
                  "Cart Entries"
              ],
              "summary": "Get the details of the cart entries.",
              "description": "Returns the details of the cart entries.",
              "operationId": "getCartEntry",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "entryNumber",
                      "in": "path",
                      "description": "The entry number. Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero (0).",
                      "required": true,
                      "type": "integer",
                      "format": "int64"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrderEntry"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "put": {
              "tags": [
                  "Cart Entries"
              ],
              "summary": "Set quantity and store details of a cart entry.",
              "description": "Updates the quantity of a single cart entry and the details of the store where the cart entry will be picked up. Attributes not provided in request will be defined again (set to null or default)",
              "operationId": "replaceCartEntry",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "entry",
                      "description": "Request body parameter that contains details such as the quantity of product (quantity), and the pickup store name (deliveryPointOfService.name)\n\nThe DTO is in XML or .json format.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/OrderEntry"
                      }
                  },
                  {
                      "name": "entryNumber",
                      "in": "path",
                      "description": "The entry number. Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero (0).",
                      "required": true,
                      "type": "integer",
                      "format": "int64"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CartModification"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Cart Entries"
              ],
              "summary": "Deletes cart entry.",
              "description": "Deletes cart entry.",
              "operationId": "removeCartEntry",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "entryNumber",
                      "in": "path",
                      "description": "The entry number. Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero (0).",
                      "required": true,
                      "type": "integer",
                      "format": "int64"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "patch": {
              "tags": [
                  "Cart Entries"
              ],
              "summary": "Update quantity and store details of a cart entry.",
              "description": "Updates the quantity of a single cart entry and the details of the store where the cart entry will be picked up.",
              "operationId": "updateCartEntry",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "entry",
                      "description": "Request body parameter that contains details such as the quantity of product (quantity), and the pickup store name (deliveryPointOfService.name)\n\nThe DTO is in XML or .json format.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/OrderEntry"
                      }
                  },
                  {
                      "name": "entryNumber",
                      "in": "path",
                      "description": "The entry number. Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero (0).",
                      "required": true,
                      "type": "integer",
                      "format": "int64"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CartModification"
                      }
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}/ccpconfigurator": {
          "get": {
              "tags": [
                  "Product Configurator CCP Cart Integration"
              ],
              "summary": "Gets the configuration of a cart entry",
              "description": "Returns the configuration of a cart entry and ensures that the entry can later be updated with the configuration and its changes",
              "operationId": "getCartEntryConfiguration",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "entryNumber",
                      "in": "path",
                      "description": "The entry number. Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero (0).",
                      "required": true,
                      "type": "integer",
                      "format": "int32"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CCPConfiguration"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "put": {
              "tags": [
                  "Product Configurator CCP Cart Integration"
              ],
              "summary": "Updates the configuration of a cart entry",
              "description": "Updates the configuration. The entire configuration attached to the cart entry is replaced by the configuration specified in the request body. Possible only if the configuration change has been initiated by the corresponding GET method before",
              "operationId": "replaceCartEntryConfiguration",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "entry",
                      "description": "Product configuration order entry with config id and order entry attributes",
                      "required": false,
                      "schema": {
                          "$ref": "#/definitions/CCPOrderEntry"
                      }
                  },
                  {
                      "name": "entryNumber",
                      "in": "path",
                      "description": "The entry number. Each entry in a cart has an entry number. Cart entries are numbered in ascending order, starting with zero (0).",
                      "required": true,
                      "type": "integer",
                      "format": "int32"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CartModification"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/entries/{entryNumber}/configurator/textfield": {
          "get": {
              "tags": [
                  "Product Configurator Textfield Template"
              ],
              "summary": "Get configuration of cart entry.",
              "description": "Get the textfield configurtion for a cart entry.",
              "operationId": "getConfigurationInEntryUsingGET",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "entryNumber",
                      "in": "path",
                      "description": "Cart entry number.",
                      "required": true,
                      "type": "integer",
                      "format": "int32"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ConfigurationInfoList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Product Configurator Textfield Template"
              ],
              "summary": "Update configuration of cart entry.",
              "description": "Update the textfield configurtion for a cart entry.",
              "operationId": "getConfigurationInEntryUsingPOST",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "configInfoList",
                      "description": "Request body parameter (DTO in xml or json format) which contains details like : product code (product.code), quantity of product (quantity), pickup store name (deliveryPointOfService.name)",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/ConfigurationInfoList"
                      }
                  },
                  {
                      "name": "entryNumber",
                      "in": "path",
                      "description": "Cart entry number.",
                      "required": true,
                      "type": "integer",
                      "format": "int32"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CartModification"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/entrygroups/{entryGroupNumber}": {
          "post": {
              "tags": [
                  "Cart Entry Groups"
              ],
              "summary": "Add a product to a cart entry group.",
              "description": "Adds a product to a cart entry group.",
              "operationId": "addToCartEntryGroup",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "entry",
                      "description": "Request body parameter that contains details such as the product code (product.code) and the quantity of product (quantity).",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/OrderEntry"
                      }
                  },
                  {
                      "name": "entryGroupNumber",
                      "in": "path",
                      "description": "Each entry group in a cart has a specific entry group number. Entry group numbers are integers starting at one. They are defined in ascending order.",
                      "required": true,
                      "type": "integer",
                      "format": "int32"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CartModification"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Cart Entry Groups"
              ],
              "summary": "Delete an entry group.",
              "description": "Removes an entry group from an associated cart. The entry group is identified by an entryGroupNumber. The cart is identified by the cartId.",
              "operationId": "removeCartEntryGroup",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "entryGroupNumber",
                      "in": "path",
                      "description": "Each entry group in a cart has a specific entry group number. Entry group numbers are integers starting at one. They are defined in ascending order.",
                      "required": true,
                      "type": "integer",
                      "format": "int32"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/entrygroups/{entryGroupNumber}/allowedProductsSearch": {
          "get": {
              "tags": [
                  "Bundles"
              ],
              "summary": "Retrieve products and additional data available for a given entry group and search query.",
              "description": "Returns products and additional data based on the entry group and search query provided. Examples include available facets, available sorting, and pagination options. It can also include spelling suggestions. To disable spelling suggestions \"enableSpellCheck\" must be set to \"FALSE\" on the SearchQuery. Default is set to \"TRUE\". The configuration of indexed properties is required for spellchecking. Any of the products returned can be added to the specific entry group (bundle).",
              "operationId": "getAvailableProducts",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "entryGroupNumber",
                      "in": "path",
                      "description": "Each entry group in a cart has a specific entry group number. Entry group numbers are integers starting at one. They are defined in ascending order.",
                      "required": true,
                      "type": "integer",
                      "format": "int32"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of products returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "query",
                      "in": "query",
                      "description": "Serialized query, free text search, facets. The format of a serialized query: freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "The sorting method applied to the results that are returned.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ProductSearchPage"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/flagForDeletion": {
          "patch": {
              "tags": [
                  "Save Cart"
              ],
              "summary": "Flag a cart for deletion.",
              "description": "Flags a cart for deletion (the cart doesn't have corresponding save cart attributes anymore). The cart is not actually deleted from the database. But with the removal of the saved cart attributes, this cart will be taken care of by the cart removal job just like any other cart.",
              "operationId": "doUpdateFlagForDeletion",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/SaveCartResult"
                      }
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/request": {
          "get": {
              "tags": [
                  "Extended Carts"
              ],
              "summary": "Get information needed for create subscription",
              "description": "Returns the necessary information for creating a subscription that contacts the payment provider directly. This information contains the payment provider URL and a list of parameters that are needed to create the subscription.",
              "operationId": "getSopPaymentRequestDetails",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "extendedMerchantCallback",
                      "in": "query",
                      "description": "Define which url should be returned",
                      "required": false,
                      "type": "boolean",
                      "default": false,
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "responseUrl",
                      "in": "query",
                      "description": "The URL that the payment provider uses to return payment information. Possible values for responseUrl include the following: “orderPage_cancelResponseURL”, “orderPage_declineResponseURL”, and “orderPage_receiptResponseURL”.",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/PaymentRequest"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/payment/sop/response": {
          "get": {
              "tags": [
                  "Extended Carts"
              ],
              "summary": "Get information about create subscription request results",
              "description": "Returns information related to creating subscription request results. If there is no response from the payment provider, a \"202 Accepted\" status is returned. If the subscription is created successfully, the payment details are returned. Otherwise, an error response is returned.\n\nNote, the “Try it out” button is not enabled for this method (always returns an error) because the Extended Carts Controller handles parameters differently, depending on which payment provider is used. For more information about this controller, please refer to the “acceleratorocc AddOn” documentation on help.hybris.com.",
              "operationId": "getSopPaymentResponse",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/PaymentDetails"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Extended Carts"
              ],
              "summary": "Handles response from payment provider and create payment details",
              "description": "Handles the response from the payment provider and creates payment details.\n\nNote, the “Try it out” button is not enabled for this method (always returns an error) because the Extended Carts Controller handles parameters differently, depending on which payment provider is used. For more information about this controller, please refer to the “acceleratorocc AddOn” documentation on help.hybris.com.",
              "operationId": "doHandleSopPaymentResponse",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/PaymentDetails"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Extended Carts"
              ],
              "summary": "Deletes payment provider response related to cart.",
              "description": "Deletes the payment provider response related to the specified cart.",
              "operationId": "removeSopPaymentResponse",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/paymentdetails": {
          "post": {
              "tags": [
                  "Cart Payments"
              ],
              "summary": "Defines and assigns details of a new credit card payment to the cart.",
              "description": "Defines the details of a new credit card, and assigns this payment option to the cart.",
              "operationId": "createCartPaymentDetails",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "in": "body",
                      "name": "paymentDetails",
                      "description": "Request body parameter that contains details such as the name on the card (accountHolderName), the card number (cardNumber), the card type (cardType.code), the month of the expiry date (expiryMonth), the year of the expiry date (expiryYear), whether the payment details should be saved (saved), whether the payment details should be set as default (defaultPaymentInfo), and the billing address (billingAddress.firstName, billingAddress.lastName, billingAddress.titleCode, billingAddress.country.isocode, billingAddress.line1, billingAddress.line2, billingAddress.town, billingAddress.postalCode, billingAddress.region.isocode)\n\nThe DTO is in XML or .json format.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/PaymentDetails"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/PaymentDetails"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "put": {
              "tags": [
                  "Cart Payments"
              ],
              "summary": "Sets credit card payment details for the cart.",
              "description": "Sets credit card payment details for the cart.",
              "operationId": "replaceCartPaymentDetails",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "paymentDetailsId",
                      "in": "query",
                      "description": "Payment details identifier.",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/paymenttype": {
          "put": {
              "tags": [
                  "B2B Carts"
              ],
              "summary": "Set the payment type for the checkout cart",
              "description": "Sets the payment type for the checkout cart. If the purchaseOrderNumber is not null, the purchaseOrderNumber is also assigned to the cart.",
              "operationId": "replaceOrgCartPaymentType",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "paymentType",
                      "in": "query",
                      "description": "Payment type choice (between card and account).",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "purchaseOrderNumber",
                      "in": "query",
                      "description": "Purchase order number to assign to the checkout cart.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Cart"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/promotions": {
          "get": {
              "tags": [
                  "Cart Promotions"
              ],
              "summary": "Get information about promotions applied on cart.",
              "description": "Returns information about the promotions applied on the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine.",
              "operationId": "getCartPromotions",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/PromotionResultList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Cart Promotions"
              ],
              "summary": "Enables promotions based on the promotionsId of the cart.",
              "description": "Enables a promotion for the order based on the promotionId defined for the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine.",
              "operationId": "doApplyCartPromotion",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "promotionId",
                      "in": "query",
                      "description": "Promotion identifier (code)",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/promotions/{promotionId}": {
          "get": {
              "tags": [
                  "Cart Promotions"
              ],
              "summary": "Get information about promotion applied on cart.",
              "description": "Returns information about a promotion (with a specific promotionId), that has been applied on the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine.",
              "operationId": "getCartPromotion",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "promotionId",
                      "in": "path",
                      "description": "Promotion identifier (code)",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/PromotionResultList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Cart Promotions"
              ],
              "summary": "Disables the promotion based on the promotionsId of the cart.",
              "description": "Disables the promotion for the order based on the promotionId defined for the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers, and as a result, some of them are currently not compatible with the new promotions engine.",
              "operationId": "removeCartPromotion",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "promotionId",
                      "in": "path",
                      "description": "Promotion identifier (code)",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/restoresavedcart": {
          "patch": {
              "tags": [
                  "Save Cart"
              ],
              "summary": "Restore a saved cart.",
              "description": "Restore a saved cart.",
              "operationId": "doUpdateSavedCart",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/SaveCartResult"
                      }
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/save": {
          "patch": {
              "tags": [
                  "Save Cart"
              ],
              "summary": "Explicitly saves a cart.",
              "description": "Explicitly saves a cart.",
              "operationId": "doSaveCart",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "saveCartDescription",
                      "in": "query",
                      "description": "The description that should be applied to the saved cart.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "saveCartName",
                      "in": "query",
                      "description": "The name that should be applied to the saved cart.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/SaveCartResult"
                      }
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/savedcart": {
          "get": {
              "tags": [
                  "Save Cart"
              ],
              "summary": "Get a saved cart.",
              "description": "Returns a saved cart for an authenticated user. The cart is identified using the \"cartId\" parameter.",
              "operationId": "getSavedCart",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/SaveCartResult"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/validate": {
          "post": {
              "tags": [
                  "Carts"
              ],
              "summary": "Validates the cart",
              "description": "Runs a cart validation and returns the result.",
              "operationId": "validateCart",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CartModificationList"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers": {
          "get": {
              "tags": [
                  "Cart Promotions"
              ],
              "summary": "Get a list of vouchers applied to the cart.",
              "description": "Returns a list of vouchers applied to the cart.",
              "operationId": "getCartVouchers",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/VoucherList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Cart Promotions"
              ],
              "summary": "Applies a voucher based on the voucherId defined for the cart.",
              "description": "Applies a voucher based on the voucherId defined for the cart.",
              "operationId": "doApplyCartVoucher",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "voucherId",
                      "in": "query",
                      "description": "Voucher identifier (code)",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/carts/{cartId}/vouchers/{voucherId}": {
          "delete": {
              "tags": [
                  "Cart Promotions"
              ],
              "summary": "Deletes a voucher defined for the current cart.",
              "description": "Deletes a voucher based on the voucherId defined for the current cart.",
              "operationId": "removeCartVoucher",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "path",
                      "description": "Cart identifier: cart code for logged in user, cart guid for anonymous user, 'current' for the last modified cart",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "voucherId",
                      "in": "path",
                      "description": "Voucher identifier (code)",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/consents": {
          "post": {
              "tags": [
                  "Consents"
              ],
              "summary": "A user can give consent.",
              "operationId": "doGiveConsent",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "consentTemplateId",
                      "in": "query",
                      "description": "Consent template ID.",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "consentTemplateVersion",
                      "in": "query",
                      "description": "Consent template version.",
                      "required": true,
                      "type": "integer",
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ConsentTemplate"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/consents/{consentCode}": {
          "delete": {
              "tags": [
                  "Consents"
              ],
              "summary": "Withdraw the user consent for a given consent code.",
              "description": "If the user consent was given, the consent is withdrawn. If consent was already withdrawn then returns consent already withdrawn error. If there is no such consent then returns not found. If the current user is an anonymous user then returns access denied error.",
              "operationId": "removeConsent",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "consentCode",
                      "in": "path",
                      "description": "Consent code.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/consenttemplates": {
          "get": {
              "tags": [
                  "Consents"
              ],
              "summary": "Fetch the list of consents",
              "description": "If user has not given or withdrawn consent to any of the template, no given or withdraw date is returned.",
              "operationId": "getConsentTemplates",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ConsentTemplateList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/consenttemplates/{consentTemplateId}": {
          "get": {
              "tags": [
                  "Consents"
              ],
              "summary": "Fetch the consent.",
              "description": "If user has not given or withdrawn consent to the template, no given or withdraw date is returned.",
              "operationId": "getConsentTemplate",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "consentTemplateId",
                      "in": "path",
                      "description": "Consent template id.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ConsentTemplate"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/customercoupons": {
          "get": {
              "tags": [
                  "Customer Coupons"
              ],
              "summary": "Gets all customer coupons of the current customer.",
              "description": "Gets the customer coupon list of the current customer.",
              "operationId": "getCustomerCouponsUsingGET",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "needsTotal",
                      "in": "query",
                      "description": "The flag for indicating if total number of results is needed or not.",
                      "required": false,
                      "type": "boolean",
                      "default": true,
                      "allowEmptyValue": false
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 10,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "The sorting method applied to the return results.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CustomerCouponSearchResult"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/customercoupons/{couponCode}/claim": {
          "post": {
              "tags": [
                  "Customer Coupons"
              ],
              "summary": "Claims a customer coupon.",
              "description": "Claims a customer coupon by coupon code.",
              "operationId": "doClaimCustomerCouponUsingPOST",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "couponCode",
                      "in": "path",
                      "description": "Coupon code",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/CustomerCoupon2Customer"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/customercoupons/{couponCode}/notification": {
          "post": {
              "tags": [
                  "Customer Coupons"
              ],
              "summary": "Subscribes to a coupon notification.",
              "description": "Make a subscription to a customer coupon to receive notifications when it will be in effect soon, or will expire soon.",
              "operationId": "doSubscribeToCustomerCouponUsingPOST",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "couponCode",
                      "in": "path",
                      "description": "Coupon code",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/CustomerCouponNotification"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Customer Coupons"
              ],
              "summary": "Unsubscribes from the coupon notification.",
              "description": "Removes notification subscription from the specific customer coupon.",
              "operationId": "doUnsubscribeFromCustomerCouponUsingDELETE",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "couponCode",
                      "in": "path",
                      "description": "Coupon code",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/customergroups": {
          "get": {
              "tags": [
                  "Users"
              ],
              "summary": "Get all customer groups of a customer.",
              "description": "Returns all customer groups of a customer.",
              "operationId": "getUserCustomerGroups",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/UserGroupList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/login": {
          "put": {
              "tags": [
                  "Users"
              ],
              "summary": "Changes customer's login name.",
              "description": "Changes a customer's login name. Requires the customer's current password.",
              "operationId": "replaceUserLogin",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "newLogin",
                      "in": "query",
                      "description": "Customer's new login name. Customer login is case insensitive.",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "password",
                      "in": "query",
                      "description": "Customer's current password.",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/loginnotification": {
          "post": {
              "tags": [
                  "Login Notification"
              ],
              "summary": "Notify about successful login.",
              "description": "Publish notification event about successful login.",
              "operationId": "doPublishSuccessfulLoginEvent",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "202": {
                      "description": "Accepted"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/notificationpreferences": {
          "get": {
              "tags": [
                  "Notification Preference"
              ],
              "summary": "Gets all notification preferences of the current customer",
              "description": "Returns the notification preferences of the current customer.",
              "operationId": "getNotificationPreferencesUsingGET",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/notificationPreferenceList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "patch": {
              "tags": [
                  "Notification Preference"
              ],
              "summary": "Updates the notification preferences of the current customer",
              "description": "Updates the notification preference of the current customer.",
              "operationId": "updateNotificationPreferencesUsingPATCH",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "notificationPreferences",
                      "description": "Notification preference list",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/BasicnotificationPreferenceList"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/notifications/sitemessages": {
          "get": {
              "tags": [
                  "Site Messages"
              ],
              "summary": "Gets all site messages of current customer.",
              "description": "Returns the site messages of current customer.",
              "operationId": "siteMessagesUsingGET",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "string",
                      "default": "0"
                  },
                  {
                      "name": "needsTotal",
                      "in": "query",
                      "description": "The flag for indicating if total number of results is needed or not.",
                      "required": false,
                      "type": "string",
                      "default": true
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "string",
                      "default": "10"
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "The sorting method applied to the return results.",
                      "required": false,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user.",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/siteMessageSearchResult"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orderApprovalPermissions": {
          "get": {
              "tags": [
                  "Order Approval Permissions"
              ],
              "summary": "Get order approval permissions.",
              "description": "Returns the list of order approval permissions for the company of the identified user. The response can display the results across multiple pages, if required.",
              "operationId": "getOrderApprovalPermissions",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the return results.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrderApprovalPermissionList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Order Approval Permissions"
              ],
              "summary": "Create a new order approval permission.",
              "description": "Creates a new order approval permission.",
              "operationId": "createOrderApprovalPermission",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "in": "body",
                      "name": "orderApprovalPermission",
                      "description": "Order Approval Permission object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/OrderApprovalPermission"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/OrderApprovalPermission"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orderApprovalPermissions/{orderApprovalPermissionCode}": {
          "get": {
              "tags": [
                  "Order Approval Permissions"
              ],
              "summary": "Get an order approval permission.",
              "description": "Returns a specific order approval permission based on specific code. The response contains detailed order approval permission information.",
              "operationId": "getOrderApprovalPermission",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orderApprovalPermissionCode",
                      "in": "path",
                      "description": "Order Approval Permission identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrderApprovalPermission"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "patch": {
              "tags": [
                  "Order Approval Permissions"
              ],
              "summary": "Update the order approval permission",
              "description": "Updates the order approval permission. Only attributes provided in the request body will be changed.",
              "operationId": "updateOrderApprovalPermission",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "in": "body",
                      "name": "orderApprovalPermission",
                      "description": "Order Approval Permission object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/OrderApprovalPermission"
                      }
                  },
                  {
                      "name": "orderApprovalPermissionCode",
                      "in": "path",
                      "description": "Order Approval Permission identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrderApprovalPermission"
                      }
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orderReturns": {
          "get": {
              "tags": [
                  "Return Requests"
              ],
              "summary": "Gets the user's return requests history",
              "description": "Returns order return request data associated with a specified user for a specified base store.",
              "operationId": "getReturnRequests",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the return results.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ReturnRequestList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Return Requests"
              ],
              "summary": "Create an order return request.",
              "description": "Creates an order return request.",
              "operationId": "createReturnRequest",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "in": "body",
                      "name": "returnRequestEntryInputList",
                      "description": "Return request input list for the current order.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/ReturnRequestEntryInputList"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/ReturnRequest"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orderReturns/{returnRequestCode}": {
          "get": {
              "tags": [
                  "Return Requests"
              ],
              "summary": "Get the details of a return request.",
              "description": "Returns specific order return request details based on a specific return request code. The response contains detailed order return request information.",
              "operationId": "getReturnRequest",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "returnRequestCode",
                      "in": "path",
                      "description": "Order return request code",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ReturnRequest"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "patch": {
              "tags": [
                  "Return Requests"
              ],
              "summary": "Updates the order return request.",
              "description": "Updates the order return request. Only cancellation of the request is supported by setting the attribute status to CANCELLING. Cancellation of the return request cannot be reverted",
              "operationId": "updateReturnRequest",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "returnRequestCode",
                      "in": "path",
                      "description": "Order return request code",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "returnRequestModification",
                      "description": "Return request modification object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/ReturnRequestModification"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orderapprovals": {
          "get": {
              "tags": [
                  "Order Approvals"
              ],
              "summary": "Get orders to approve.",
              "description": "Returns the list of orders the specified user is allowed to approve.",
              "operationId": "getOrderApprovals",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the return results.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrderApprovalList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orderapprovals/{orderApprovalCode}": {
          "get": {
              "tags": [
                  "Order Approvals"
              ],
              "summary": "Get an order to approve.",
              "description": "Returns specific order details based on a specific order code. The response contains detailed order information.",
              "operationId": "getOrderApproval",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orderApprovalCode",
                      "in": "path",
                      "description": "Code that identifies the order approval.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrderApproval"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orderapprovals/{orderApprovalCode}/decision": {
          "post": {
              "tags": [
                  "Order Approvals"
              ],
              "summary": "Makes an approval decision for an order.",
              "description": "Makes a decision on the order approval that will trigger the next step in the approval workflow.",
              "operationId": "doMakeOrderApprovalDecision",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orderApprovalCode",
                      "in": "path",
                      "description": "Code that identifies the order approval.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "orderApprovalDecision",
                      "description": "The order approval decision. The approval decision field is mandatory, and the approval comment field is mandatory if the decision is 'rejected'.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/OrderApprovalDecision"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrderApprovalDecision"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orders": {
          "get": {
              "tags": [
                  "Orders"
              ],
              "summary": "Get order history for user.",
              "description": "Returns order history data for all orders placed by a specified user for a specified base store. The response can display the results across multiple pages, if required.",
              "operationId": "getUserOrderHistory",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the return results.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "statuses",
                      "in": "query",
                      "description": "Filters only certain order statuses. For example, statuses=CANCELLED,CHECKED_VALID would only return orders with status CANCELLED or CHECKED_VALID.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrderHistoryList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "head": {
              "tags": [
                  "Orders"
              ],
              "summary": "Get total number of orders.",
              "description": "In the response header, the \"x-total-count\" indicates the total number of orders placed by a specified user for a specified base store.",
              "operationId": "countUserOrders",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "statuses",
                      "in": "query",
                      "description": "Filters only certain order statuses. For example, statuses=CANCELLED,CHECKED_VALID would only return orders with status CANCELLED or CHECKED_VALID.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Orders"
              ],
              "summary": "Place a order.",
              "description": "Authorizes the cart and places the order. The response contains the new order data.",
              "operationId": "placeOrder",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "cartId",
                      "in": "query",
                      "description": "Cart code for logged in user, cart GUID for guest checkout",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/Order"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orders/{code}": {
          "get": {
              "tags": [
                  "Orders"
              ],
              "summary": "Get a order.",
              "description": "Returns specific order details based on a specific order code. The response contains detailed order information.",
              "operationId": "getUserOrders",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "code",
                      "in": "path",
                      "description": "Order GUID (Globally Unique Identifier) or order CODE",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Order"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orders/{code}/cancellation": {
          "post": {
              "tags": [
                  "Orders"
              ],
              "summary": "Cancel an order.",
              "description": "Cancels an order partially or completely",
              "operationId": "doCancelOrder",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "cancellationRequestEntryInputList",
                      "description": "Cancellation request input list for the current order.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/CancellationRequestEntryInputList"
                      }
                  },
                  {
                      "name": "code",
                      "in": "path",
                      "description": "Order code",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orders/{orderCode}/consignments/{consignmentCode}/tracking": {
          "get": {
              "tags": [
                  "Consignment Tracking"
              ],
              "summary": "Gets consignment tracking information",
              "description": "Returns details of consignment tracking information based on the order code and the consignment code.",
              "operationId": "getConsignmentTrackingDataUsingGET",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "consignmentCode",
                      "in": "path",
                      "description": "consignment identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "orderCode",
                      "in": "path",
                      "description": "order identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/consignmentTracking"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orders/{orderId}/entries/{entryNumber}/ccpconfigurator/configurationOverview": {
          "get": {
              "tags": [
                  "Product Configurator CCP Order Integration"
              ],
              "summary": "Gets a product configuration overview of an order entry",
              "description": "Gets a configuration overview, a simplified, condensed read-only view on the product configuration of an order entry. Only the selected attribute values are present here",
              "operationId": "getConfigurationOverviewForOrderEntry",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "entryNumber",
                      "in": "path",
                      "description": "The entry number. Each entry in an order has an entry number. Order entries are numbered in ascending order, starting with zero (0).",
                      "required": true,
                      "type": "integer",
                      "format": "int32"
                  },
                  {
                      "name": "orderId",
                      "in": "path",
                      "description": "The order id. Each order has a unique identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/CCPConfigurationOverview"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgCustomers": {
          "get": {
              "tags": [
                  "Organizational Unit Customer Management"
              ],
              "summary": "Gets the list of org customers for a specified base store",
              "description": "Returns the list of org customers for a specified base store. The response can display the results across multiple pages, if required.",
              "operationId": "getOrgCustomers",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the returned results.",
                      "required": false,
                      "type": "string",
                      "default": "name",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrgUnitUserList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Organizational Unit Customer Management"
              ],
              "summary": " Registers a org customer",
              "description": "Creates a new organizational customer.",
              "operationId": "createOrgCustomer",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "in": "body",
                      "name": "orgCustomerCreation",
                      "description": "Data object that contains information necessary for user creation",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/OrgCustomerCreation"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/User"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}": {
          "get": {
              "tags": [
                  "Organizational Unit Customer Management"
              ],
              "summary": "Get a org customer profile",
              "description": "Returns a org customer profile.",
              "operationId": "getOrgCustomer",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body.",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT",
                      "allowEmptyValue": false,
                      "enum": [
                          "BASIC",
                          "DEFAULT",
                          "FULL"
                      ]
                  },
                  {
                      "name": "orgCustomerId",
                      "in": "path",
                      "description": "Org Customer GUID (Globally Unique Identifier).",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/User"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "patch": {
              "tags": [
                  "Organizational Unit Customer Management"
              ],
              "summary": "Updates org customer profile",
              "description": "Updates org customer profile. Only attributes provided in the request body will be changed.",
              "operationId": "updateOrgCustomer",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "orgCustomerId",
                      "in": "path",
                      "description": "Org Customer GUID (Globally Unique Identifier).",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "orgCustomerModification",
                      "description": "Data object which contains information necessary for user modification",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/OrgCustomerModification"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}/approvers": {
          "get": {
              "tags": [
                  "Organizational Unit Customer Management"
              ],
              "summary": "Gets the list of approvers for an specified org customer",
              "description": "Returns the list of approvers for an specified org customer. The response can display the results across multiple pages, if required.",
              "operationId": "getOrgCustomerApprovers",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgCustomerId",
                      "in": "path",
                      "description": "Org Customer GUID (Globally Unique Identifier).",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the returned results.",
                      "required": false,
                      "type": "string",
                      "default": "name",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrgUnitUserList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}/approvers/{approverId}": {
          "post": {
              "tags": [
                  "Organizational Unit Customer Management"
              ],
              "summary": "Add an approver to an specific org customer",
              "description": "Add an approver to an specific org customer",
              "operationId": "doAddApproverToOrgCustomer",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "approverId",
                      "in": "path",
                      "description": "Approver GUID (Globally Unique Identifier).",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgCustomerId",
                      "in": "path",
                      "description": "Org Customer GUID (Globally Unique Identifier).",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BSelectionData"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Organizational Unit Customer Management"
              ],
              "summary": "Deletes an approver from an specific org customer with the provided approverId",
              "description": "Deletes an approver from an specific org customer with the provided approverId",
              "operationId": "removeApproverFromOrgCustomer",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "approverId",
                      "in": "path",
                      "description": "Approver GUID (Globally Unique Identifier).",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgCustomerId",
                      "in": "path",
                      "description": "Org Customer GUID (Globally Unique Identifier).",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BSelectionData"
                      }
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}/orgUserGroups": {
          "get": {
              "tags": [
                  "Organizational Unit Customer Management"
              ],
              "summary": "Gets the list of org user groups for a specified org customer",
              "description": "Returns the list of org user gruops for a specified org customer. The response can display the results across multiple pages, if required.",
              "operationId": "getOrgCustomerOrgUserGroups",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgCustomerId",
                      "in": "path",
                      "description": "Org Customer GUID (Globally Unique Identifier).",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the returned results.",
                      "required": false,
                      "type": "string",
                      "default": "name",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrgUnitUserGroupList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}/orgUserGroups/{userGroupId}": {
          "post": {
              "tags": [
                  "Organizational Unit Customer Management"
              ],
              "summary": "Add an org user group to an specific org customer",
              "description": "Add an org user group to an specific org customer",
              "operationId": "doAddOrgUserGroupToOrgCustomer",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgCustomerId",
                      "in": "path",
                      "description": "Org Customer GUID (Globally Unique Identifier).",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userGroupId",
                      "in": "path",
                      "description": "Org User Group GUID (Globally Unique Identifier).",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BSelectionData"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Organizational Unit Customer Management"
              ],
              "summary": "Deletes an org user group from an specific org customer with the provided orgUserGroupId",
              "description": "Deletes an org user group from an specific org customer with the provided orgUserGroupId",
              "operationId": "removeOrgUserGroupFromOrgCustomer",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "orgCustomerId",
                      "in": "path",
                      "description": "Org Customer GUID (Globally Unique Identifier).",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userGroupId",
                      "in": "path",
                      "description": "Org User Group GUID (Globally Unique Identifier).",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}/permissions": {
          "get": {
              "tags": [
                  "Organizational Unit Customer Management"
              ],
              "summary": "Gets the list of permissions for an org customer",
              "description": "Returns the list of permissions for a user. The response can display the results across multiple pages, if required.",
              "operationId": "getOrgCustomerPermissions",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgCustomerId",
                      "in": "path",
                      "description": "Org Customer GUID (Globally Unique Identifier).",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the returned results.",
                      "required": false,
                      "type": "string",
                      "default": "name",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrderApprovalPermissionList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}/permissions/{permissionId}": {
          "post": {
              "tags": [
                  "Organizational Unit Customer Management"
              ],
              "summary": "Add a permission to an specific org customer",
              "description": "Add a permission to an specific org customer",
              "operationId": "doAddPermissionToOrgCustomer",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgCustomerId",
                      "in": "path",
                      "description": "Org Customer GUID (Globally Unique Identifier).",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "permissionId",
                      "in": "path",
                      "description": "Permission GUID (Globally Unique Identifier).",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BSelectionData"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Organizational Unit Customer Management"
              ],
              "summary": "Deletes a permission from an specific org customer with the provided permissionId",
              "description": "Deletes a permission from an specific org customer with the provided permissionId",
              "operationId": "removePermissionFromOrgCustomer",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgCustomerId",
                      "in": "path",
                      "description": "Org Customer GUID (Globally Unique Identifier).",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "permissionId",
                      "in": "path",
                      "description": "Permission GUID (Globally Unique Identifier).",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BSelectionData"
                      }
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}/roles": {
          "post": {
              "tags": [
                  "Organizational Unit Management"
              ],
              "summary": "Add a role to a specific organizational customer",
              "description": "Adds a role to a specific organizational customer",
              "operationId": "doAddRoleToOrgCustomer",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgCustomerId",
                      "in": "path",
                      "description": "Identifier of the organizational customer which the role will be added.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "roleId",
                      "in": "query",
                      "description": "The role which is added to the organizational customer. Example roles are: b2badmingroup, b2bmanagergroup, b2bcustomergroup",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/B2BSelectionData"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgCustomers/{orgCustomerId}/roles/{roleId}": {
          "delete": {
              "tags": [
                  "Organizational Unit Management"
              ],
              "summary": "Remove a role from a specific organizational customer",
              "description": "Removes a role from a specific organizational customer",
              "operationId": "removeRoleFromOrgCustomer",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgCustomerId",
                      "in": "path",
                      "description": "Identifier of the organizational customer which the role will be removed.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "roleId",
                      "in": "path",
                      "description": "The role which is removed from the user. Example roles are: b2badmingroup, b2bmanagergroup, b2bcustomergroup",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BSelectionData"
                      }
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnitUserGroups": {
          "get": {
              "tags": [
                  "Organizational Unit User Groups"
              ],
              "summary": "Gets the list of organizational unit user groups for a specified base store",
              "description": "Returns the list of organizational unit user groups accessible for a specified base store.",
              "operationId": "getOrgUnitUserGroups",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the returned results.",
                      "required": false,
                      "type": "string",
                      "default": "uid",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrgUnitUserGroupList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Organizational Unit User Groups"
              ],
              "summary": " Creates a new organizational unit user group",
              "description": "Creates a new organizational unit user group.",
              "operationId": "createOrgUnitUserGroup",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "in": "body",
                      "name": "orgUnitUserGroup",
                      "description": "Organizational unit user group object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/OrgUnitUserGroup"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/OrgUnitUserGroup"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnitUserGroups/{orgUnitUserGroupId}": {
          "get": {
              "tags": [
                  "Organizational Unit User Groups"
              ],
              "summary": "Gets specific organizational unit user group details accessible for a specified base store based on user group code",
              "description": "Returns specific UserGroup details accessible for a specified base store based on UserGroup code. The response contains detailed order information.",
              "operationId": "getOrgUnitUserGroup",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgUnitUserGroupId",
                      "in": "path",
                      "description": "Organizational unit user group identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrgUnitUserGroup"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Organizational Unit User Groups"
              ],
              "summary": "Removes the organizational unit user group",
              "description": "Removes the organizational unit user group.",
              "operationId": "removeOrgUnitUserGroup",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "orgUnitUserGroupId",
                      "in": "path",
                      "description": "Organizational unit user group identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "patch": {
              "tags": [
                  "Organizational Unit User Groups"
              ],
              "summary": "Updates the organizational unit user group",
              "description": "Updates the organizational unit user group. Only attributes provided in the request body will be changed.",
              "operationId": "updateOrgUnitUserGroup",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "orgUnitUserGroup",
                      "description": "Organizational unit user group object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/OrgUnitUserGroup"
                      }
                  },
                  {
                      "name": "orgUnitUserGroupId",
                      "in": "path",
                      "description": "Organizational unit user group identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnitUserGroups/{orgUnitUserGroupId}/availableOrderApprovalPermissions": {
          "get": {
              "tags": [
                  "Organizational Unit User Groups"
              ],
              "summary": "Gets the list of order approval permissions for a specified organizational unit user group",
              "description": "Returns the list of order approval permissions  who can belong to a specific organizational unit user group. Order approval permissions  who already belong to the user group are flagged by 'selected' attribute.",
              "operationId": "getOrderApprovalPermissionsForOrgUnitUserGroup",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgUnitUserGroupId",
                      "in": "path",
                      "description": "Organizational unit user group identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the returned results.",
                      "required": false,
                      "type": "string",
                      "default": "name",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrderApprovalPermissionList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnitUserGroups/{orgUnitUserGroupId}/availableOrgCustomers": {
          "get": {
              "tags": [
                  "Organizational Unit User Groups"
              ],
              "summary": "Gets the list of organizational customers for a specified organizational unit user group",
              "description": "Returns the list of organizational customers who can belong to a specific organizational unit user group. Users who already belong to the user group are flagged by 'selected' attribute.",
              "operationId": "getAvailableOrgCustomersForUserGroup",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgUnitUserGroupId",
                      "in": "path",
                      "description": "Organizational unit user group identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the returned results.",
                      "required": false,
                      "type": "string",
                      "default": "name",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrgUnitUserList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnitUserGroups/{orgUnitUserGroupId}/members": {
          "post": {
              "tags": [
                  "Organizational Unit User Groups"
              ],
              "summary": "Add an organizational customer to a specific unit user group members",
              "description": "Adds an organizational customer to a specific unit user group members",
              "operationId": "doAddOrgCustomerToOrgUnitUserGroupMembers",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "orgCustomerId",
                      "in": "query",
                      "description": "Identifier of the organizational customer which will be added to the organizational unit user group members",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "orgUnitUserGroupId",
                      "in": "path",
                      "description": "Organizational unit user group identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Organizational Unit User Groups"
              ],
              "summary": "Removes all organizational customers in the organizational unit user group members",
              "description": "Removes all organizational customers in the organizational unit user group members which marks the user group disabled until a new member is added",
              "operationId": "removeOrgUnitUserGroupMembers",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "orgUnitUserGroupId",
                      "in": "path",
                      "description": "Organizational unit user group identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnitUserGroups/{orgUnitUserGroupId}/members/{orgCustomerId}": {
          "delete": {
              "tags": [
                  "Organizational Unit User Groups"
              ],
              "summary": "Remove an organizational customer from the organizational unit user group members",
              "description": "Removes an organizational customer from the organizational unit user group members",
              "operationId": "removeOrgCustomerFromOrgUnitUserGroupMembers",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "orgCustomerId",
                      "in": "path",
                      "description": "Identifier of the organizational customer which will be removed from the organizational unit user group members",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "orgUnitUserGroupId",
                      "in": "path",
                      "description": "Organizational unit user group identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnitUserGroups/{orgUnitUserGroupId}/orderApprovalPermissions": {
          "post": {
              "tags": [
                  "Organizational Unit User Groups"
              ],
              "summary": "Add an order approval permission to a specific organizational unit user group",
              "description": "Adds an order approval permission to a specific organizational unit user group",
              "operationId": "doAddOrderApprovalPermissionToOrgUnitUserGroup",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orderApprovalPermissionCode",
                      "in": "query",
                      "description": "Order approval permission identifier which is added to the organizational unit user group.",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "orgUnitUserGroupId",
                      "in": "path",
                      "description": "Identifier of the organizational unit user group which the order approval permission will be added.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/B2BSelectionData"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnitUserGroups/{orgUnitUserGroupId}/orderApprovalPermissions/{orderApprovalPermissionCode}": {
          "delete": {
              "tags": [
                  "Organizational Unit User Groups"
              ],
              "summary": "Remove an order approval permission from a specific organizational unit user group",
              "description": "Removes an order approval permission from a specific organizational unit user group",
              "operationId": "removeOrderApprovalPermissionFromOrgUnitUserGroup",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orderApprovalPermissionCode",
                      "in": "path",
                      "description": "Order approval permission identifier which is removed from the organizational unit user group.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "orgUnitUserGroupId",
                      "in": "path",
                      "description": "Organizational unit user group identifier which is added to the organizational customer.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BSelectionData"
                      }
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnits": {
          "post": {
              "tags": [
                  "Organizational Unit Management"
              ],
              "summary": "Create a new organizational unit.",
              "description": "Creates a new organizational unit.",
              "operationId": "createOrgUnit",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "in": "body",
                      "name": "orgUnit",
                      "description": "Organizational Unit object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/B2BUnit"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/B2BUnit"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnits/{orgUnitId}": {
          "get": {
              "tags": [
                  "Organizational Unit Management"
              ],
              "summary": "Get an organizational unit.",
              "description": "Returns a specific organizational unit based on specific id. The response contains detailed organizational unit information.",
              "operationId": "getOrgUnit",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgUnitId",
                      "in": "path",
                      "description": "Organizational Unit identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BUnit"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "patch": {
              "tags": [
                  "Organizational Unit Management"
              ],
              "summary": "Update the organizational unit",
              "description": "Updates the organizational unit. Only attributes provided in the request body will be changed.",
              "operationId": "updateOrgUnit",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "orgUnit",
                      "description": "Organizational Unit object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/B2BUnit"
                      }
                  },
                  {
                      "name": "orgUnitId",
                      "in": "path",
                      "description": "Organizational Unit identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnits/{orgUnitId}/addresses": {
          "get": {
              "tags": [
                  "Organizational Unit Management"
              ],
              "summary": "Get organizational unit addresses",
              "description": "Retrieves organizational unit addresses",
              "operationId": "getOrgUnitAddresses",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgUnitId",
                      "in": "path",
                      "description": "Organizational unit id.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/AddressList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Organizational Unit Management"
              ],
              "summary": "Create a new organizational unit address",
              "description": "Creates a new organizational unit address",
              "operationId": "createOrgUnitAddress",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "in": "body",
                      "name": "address",
                      "description": "Address object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/Address"
                      }
                  },
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgUnitId",
                      "in": "path",
                      "description": "Organizational unit id.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/Address"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnits/{orgUnitId}/addresses/{addressId}": {
          "delete": {
              "tags": [
                  "Organizational Unit Management"
              ],
              "summary": "Remove the organizational unit address.",
              "description": "Removes the organizational unit address.",
              "operationId": "removeOrgUnitAddress",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "addressId",
                      "in": "path",
                      "description": "Address id.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "orgUnitId",
                      "in": "path",
                      "description": "Organizational unit id.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "patch": {
              "tags": [
                  "Organizational Unit Management"
              ],
              "summary": "Update the organizational unit address.",
              "description": "Updates the organizational unit address. Only attributes provided in the request body will be changed.",
              "operationId": "updateOrgUnitAddress",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "in": "body",
                      "name": "address",
                      "description": "Address object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/Address"
                      }
                  },
                  {
                      "name": "addressId",
                      "in": "path",
                      "description": "Address id.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "orgUnitId",
                      "in": "path",
                      "description": "Organizational unit id.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnits/{orgUnitId}/availableParents": {
          "get": {
              "tags": [
                  "Organizational Unit Management"
              ],
              "summary": "Get available parent units.",
              "description": "Returns a list of parent units for which the unit with id can be assigned as a child.",
              "operationId": "getAvailableParentUnits",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgUnitId",
                      "in": "path",
                      "description": "Organizational Unit identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BUnitNodeList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnits/{orgUnitId}/availableUsers/{roleId}": {
          "get": {
              "tags": [
                  "Organizational Unit Management"
              ],
              "summary": "Get users who belongs to the organization unit.",
              "description": "Returns list of users which belongs to the organizational unit and can be assigned to a specific role. Users who are already assigned to the role are flagged by 'selected' attribute. ",
              "operationId": "getOrgUnitUsers",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "orgUnitId",
                      "in": "path",
                      "description": "Organizational unit id.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "roleId",
                      "in": "path",
                      "description": "Filtering parameter which is used to return a specific role. Example roles are: b2bapprovergroup, b2badmingroup, b2bmanagergroup, b2bcustomergroup",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the display search results.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrgUnitUserList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnits/{orgUnitId}/orgCustomers/{orgCustomerId}/roles": {
          "post": {
              "tags": [
                  "Organizational Unit Management"
              ],
              "summary": "Add an organizational unit dependent role to a specific organizational customer",
              "description": "Adds an organizational unit dependent role to a specific organizational customer",
              "operationId": "doAddOrgUnitRoleToOrgCustomer",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "orgCustomerId",
                      "in": "path",
                      "description": "Identifier of the organizational customer which the role will be added.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "orgUnitId",
                      "in": "path",
                      "description": "Organizational unit id.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "roleId",
                      "in": "query",
                      "description": "The role which is added to the user. Example roles are: b2bapprovergroup",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnits/{orgUnitId}/orgCustomers/{orgCustomerId}/roles/{roleId}": {
          "delete": {
              "tags": [
                  "Organizational Unit Management"
              ],
              "summary": "Remove an organizational unit dependent role from a specific organizational customer.",
              "description": "Removes an organizational unit dependent role from a specific organizational customer.",
              "operationId": "removeOrgUnitRoleFromOrgCustomer",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "orgCustomerId",
                      "in": "path",
                      "description": "Identifier of the organizational customer which the role will be removed.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "orgUnitId",
                      "in": "path",
                      "description": "Organizational unit id.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "roleId",
                      "in": "path",
                      "description": "The role which is removed from the user. Example roles are: b2bapprovergroup, b2badmingroup, b2bmanagergroup, b2bcustomergroup",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnitsAvailableApprovalProcesses": {
          "get": {
              "tags": [
                  "Organizational Unit Management"
              ],
              "summary": "Get available approval business processes.",
              "description": "Returns list of available approval business processes.",
              "operationId": "getOrgUnitsAvailableApprovalProcesses",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BApprovalProcessList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/orgUnitsRootNodeTree": {
          "get": {
              "tags": [
                  "Organizational Unit Management"
              ],
              "summary": "Get the root organizational unit node.",
              "description": "Returns the root organizational unit node. The response contains detailed organizational unit node information and the child nodes associated to it.",
              "operationId": "getOrgUnitsRootNodeTree",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/B2BUnitNode"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/password": {
          "put": {
              "tags": [
                  "Users"
              ],
              "summary": "Changes customer's password",
              "description": "Changes customer's password.",
              "operationId": "replaceUserPassword",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "new",
                      "in": "query",
                      "description": "New password.",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "old",
                      "in": "query",
                      "description": "Old password. Required only for ROLE_CUSTOMERGROUP",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "202": {
                      "description": "Accepted"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/paymentdetails": {
          "get": {
              "tags": [
                  "Payment Details"
              ],
              "summary": "Get customer's credit card payment details list.",
              "description": "Return customer's credit card payment details list.",
              "operationId": "getPaymentDetailsList",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "saved",
                      "in": "query",
                      "description": "Type of payment details.",
                      "required": false,
                      "type": "boolean",
                      "default": false,
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/PaymentDetailsList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/paymentdetails/{paymentDetailsId}": {
          "get": {
              "tags": [
                  "Payment Details"
              ],
              "summary": "Get customer's credit card payment details.",
              "description": "Returns a customer's credit card payment details for the specified paymentDetailsId.",
              "operationId": "getPaymentDetails",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "paymentDetailsId",
                      "in": "path",
                      "description": "Payment details identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/PaymentDetails"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "put": {
              "tags": [
                  "Payment Details"
              ],
              "summary": "Updates existing customer's credit card payment info.",
              "description": "Updates existing customer's credit card payment info based on the payment info ID. Attributes not given in request will be defined again (set to null or default).",
              "operationId": "replacePaymentDetails",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "paymentDetails",
                      "description": "Payment details object.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/PaymentDetails"
                      }
                  },
                  {
                      "name": "paymentDetailsId",
                      "in": "path",
                      "description": "Payment details identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Payment Details"
              ],
              "summary": "Deletes customer's credit card payment details.",
              "description": "Deletes a customer's credit card payment details based on a specified paymentDetailsId.",
              "operationId": "removePaymentDetails",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "paymentDetailsId",
                      "in": "path",
                      "description": "Payment details identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "patch": {
              "tags": [
                  "Payment Details"
              ],
              "summary": "Updates existing customer's credit card payment details.",
              "description": "Updates an existing customer's credit card payment details based on the specified paymentDetailsId. Only those attributes provided in the request will be updated.",
              "operationId": "updatePaymentDetails",
              "consumes": [
                  "application/xml",
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "paymentDetails",
                      "description": "Payment details object",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/PaymentDetails"
                      }
                  },
                  {
                      "name": "paymentDetailsId",
                      "in": "path",
                      "description": "Payment details identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/productinterests": {
          "get": {
              "tags": [
                  "Product Interests"
              ],
              "summary": "Gets product interests for a user.",
              "description": "Gets product interests for a user.",
              "operationId": "getProductInterestsUsingGET",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "string",
                      "default": "0"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "needsTotal",
                      "in": "query",
                      "description": "the flag for indicating if total number of results is needed or not",
                      "required": false,
                      "type": "string",
                      "default": true
                  },
                  {
                      "name": "notificationType",
                      "in": "query",
                      "description": "Notification type",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "string",
                      "default": "20"
                  },
                  {
                      "name": "productCode",
                      "in": "query",
                      "description": "Product identifier",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the return results.",
                      "required": false,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/customerInterestsSearchPage"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Product Interests"
              ],
              "summary": "Sets product interests for a user.",
              "description": "Sets product interests for a user.",
              "operationId": "createProductInterestUsingPOST",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "notificationType",
                      "in": "query",
                      "description": "Notification type",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "productCode",
                      "in": "query",
                      "description": "Product identifier",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/productInterestRelation"
                      }
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "delete": {
              "tags": [
                  "Product Interests"
              ],
              "summary": "Removes product interests by product code and notification type",
              "description": "Removes product interests by product code and notification type.",
              "operationId": "removeProductInterestUsingDELETE",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "notificationType",
                      "in": "query",
                      "description": "Notification type",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "productCode",
                      "in": "query",
                      "description": "Product identifier",
                      "required": true,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/quotes": {
          "get": {
              "tags": [
                  "Quotes"
              ],
              "summary": "Get all quotes for user.",
              "description": "Returns history data for all quotes requested by a specified user for a specified base store. The response can display the results across multiple pages, if required.",
              "operationId": "getQuotes",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "BASIC"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the return results.",
                      "required": false,
                      "type": "string",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/QuoteList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Quotes"
              ],
              "summary": "Request a quote.",
              "description": "In the edit state the quote can be requested via cartId, the current content of a cart will be then linked with the quote. The requote action can be triggered by providing the quoteCode parameter, instead of cartId inside the body. The response will contain the new quote's data.",
              "operationId": "createQuote",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "in": "body",
                      "name": "quoteStarter",
                      "description": "Object representing ways of creating new quote - by cartId for creating a new quote from the cart, by quoteCode for the requote action ",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/QuoteStarter"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/Quote"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/quotes/{quoteCode}": {
          "get": {
              "tags": [
                  "Quotes"
              ],
              "summary": "Get a specific quote.",
              "description": "Returns quote details based on a specific quote code. The response contains detailed quote information",
              "operationId": "getQuote",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "quoteCode",
                      "in": "path",
                      "description": "Identifying code of the quote",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Quote"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "put": {
              "tags": [
                  "Quotes"
              ],
              "summary": "Edit the quote.",
              "description": "Updates name, description or expiry date of the quote.",
              "operationId": "replaceQuote",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "metadata",
                      "description": "Updated name, description or expiry date of the quote",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/QuoteMetadata"
                      }
                  },
                  {
                      "name": "quoteCode",
                      "in": "path",
                      "description": "Identifying code of the quote",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "patch": {
              "tags": [
                  "Quotes"
              ],
              "summary": "Edit the quote.",
              "description": "Updates name, description or expiry date of the quote.",
              "operationId": "updateQuote",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "metadata",
                      "description": "Updated name, description or expiry date of the quote",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/QuoteMetadata"
                      }
                  },
                  {
                      "name": "quoteCode",
                      "in": "path",
                      "description": "Identifying code of the quote",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/quotes/{quoteCode}/action": {
          "post": {
              "tags": [
                  "Quotes"
              ],
              "summary": "Perform workflow actions with the quote.",
              "description": "Perform cancel, submit, edit, checkout, approve, reject actions with the quote.",
              "operationId": "performQuoteAction",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "quoteAction",
                      "description": "The action with the quote. The quote action field is mandatory.",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/QuoteAction"
                      }
                  },
                  {
                      "name": "quoteCode",
                      "in": "path",
                      "description": "Identifying code of the quote",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/quotes/{quoteCode}/comments": {
          "post": {
              "tags": [
                  "Quotes"
              ],
              "summary": "Add a comment to a quote.",
              "description": "Adds a comment to the quote",
              "operationId": "createCommentForQuote",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "comment",
                      "description": "Text of the comment",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/CreateComment"
                      }
                  },
                  {
                      "name": "quoteCode",
                      "in": "path",
                      "description": "Identifying code of the quote",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/quotes/{quoteCode}/discounts": {
          "post": {
              "tags": [
                  "Quotes"
              ],
              "summary": "Apply a discount to an existing quote.",
              "description": "In the edit state, a seller can apply a discount to a quote. Type of the discount - PERCENT for discount by percentage, ABSOLUTE for discount by amount, TARGET for discount by adjustment of the total value",
              "operationId": "createQuoteDiscount",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "quoteCode",
                      "in": "path",
                      "description": "Identifying code of the quote",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "quoteDiscount",
                      "description": "Discount applied to the quote - discountType for type of the discount, discountRate for value of the discount ",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/QuoteDiscount"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/quotes/{quoteCode}/entries/{entryNumber}/comments": {
          "post": {
              "tags": [
                  "Quotes"
              ],
              "summary": "Add a comment to a line item of a quote.",
              "description": "Add a comment to a line item of a quote.",
              "operationId": "createQuoteEntryComment",
              "consumes": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "comment",
                      "description": "Text of the comment",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/CreateComment"
                      }
                  },
                  {
                      "name": "entryNumber",
                      "in": "path",
                      "description": "The entry number. Each entry in a quote has an entry number. Quote entries are numbered in ascending order, starting with zero (0).",
                      "required": true,
                      "type": "integer",
                      "format": "int64"
                  },
                  {
                      "name": "quoteCode",
                      "in": "path",
                      "description": "Identifying code of the quote",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/replenishmentOrders": {
          "get": {
              "tags": [
                  "Replenishment Order"
              ],
              "summary": "Gets the list of replenishment orders for a specified user.",
              "description": "Returns the list of replenishment orders accessible to a specified user.",
              "operationId": "getReplenishmentOrders",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the returned results.",
                      "required": false,
                      "type": "string",
                      "default": "code",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ReplenishmentOrderList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/replenishmentOrders/{replenishmentOrderCode}": {
          "get": {
              "tags": [
                  "Replenishment Order"
              ],
              "summary": "Gets replenishment order for a specified user and replenishment order code.",
              "description": "Returns specific replenishment order details accessible for a specified user. The response contains detailed orders information from the replenishment order.",
              "operationId": "getReplenishmentOrder",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "replenishmentOrderCode",
                      "in": "path",
                      "description": "Unique code for the replenishment order.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ReplenishmentOrder"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "patch": {
              "tags": [
                  "Replenishment Order"
              ],
              "summary": "Updates the replenishment order for a specified user and replenishment order code.",
              "description": "Updates the replenishment order. Only cancellation of the replenishment order is supported by setting the attribute 'active' to FALSE. Cancellation of the replenishment order cannot be reverted.",
              "operationId": "updateReplenishmentOrder",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "replenishmentOrderCode",
                      "in": "path",
                      "description": "Unique code for the replenishment order.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ReplenishmentOrder"
                      }
                  },
                  "204": {
                      "description": "No Content"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/replenishmentOrders/{replenishmentOrderCode}/orders": {
          "get": {
              "tags": [
                  "Replenishment Order"
              ],
              "summary": "Gets replenishment order history.",
              "description": "Returns order history data from a replenishment order placed by a specified user.",
              "operationId": "getReplenishmentOrderHistory",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "replenishmentOrderCode",
                      "in": "path",
                      "description": "Unique code for the replenishment order.",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the returned results.",
                      "required": false,
                      "type": "string",
                      "default": "code",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/OrderHistoryList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/ticketAssociatedObjects": {
          "get": {
              "tags": [
                  "Tickets"
              ],
              "summary": "Get order and cart objects that can be associated with a ticket for the current user.",
              "operationId": "getTicketAssociatedObjects",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/TicketAssociatedObjectList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/tickets": {
          "get": {
              "tags": [
                  "Tickets"
              ],
              "summary": "Get all tickets for user",
              "description": "Returns history data for all tickets requested by a specified user for a specified base store. The response can display the results across multiple pages, if required.",
              "operationId": "getTickets",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "currentPage",
                      "in": "query",
                      "description": "The current result page requested.",
                      "required": false,
                      "type": "integer",
                      "default": 0,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "BASIC"
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of results returned per page.",
                      "required": false,
                      "type": "integer",
                      "default": 20,
                      "format": "int32",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "sort",
                      "in": "query",
                      "description": "Sorting method applied to the returned results. Currently, byDate and byTicketId are supported.",
                      "required": false,
                      "type": "string",
                      "default": "byDate",
                      "allowEmptyValue": false
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/TicketList"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          },
          "post": {
              "tags": [
                  "Tickets"
              ],
              "summary": "Create a ticket",
              "operationId": "createTicket",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "in": "body",
                      "name": "ticketStarter",
                      "description": "ticketStarter",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/TicketStarter"
                      }
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created",
                      "schema": {
                          "$ref": "#/definitions/Ticket"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/tickets/{ticketId}": {
          "get": {
              "tags": [
                  "Tickets"
              ],
              "summary": "Get a ticket by ticket id.",
              "operationId": "getTicket",
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "DEFAULT"
                  },
                  {
                      "name": "ticketId",
                      "in": "path",
                      "description": "Ticket Identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Ticket"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/users/{userId}/tickets/{ticketId}/events": {
          "post": {
              "tags": [
                  "Tickets"
              ],
              "summary": "Create a new ticket event.",
              "description": "Create new ticket event with property message(required) and toStatus(optional).",
              "operationId": "createTicketEvent",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "ticketEvent",
                      "description": "ticketEvent",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/TicketEvent"
                      }
                  },
                  {
                      "name": "ticketId",
                      "in": "path",
                      "description": "Ticket Identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "userId",
                      "in": "path",
                      "description": "User identifier or one of the literals : 'current' for currently authenticated user, 'anonymous' for anonymous user",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      },
      "/{baseSiteId}/vouchers/{code}": {
          "get": {
              "tags": [
                  "Vouchers"
              ],
              "summary": "Get a voucher based on code.",
              "description": "Returns details of a single voucher that is specified by its voucher identification code.",
              "operationId": "getVoucher",
              "parameters": [
                  {
                      "name": "baseSiteId",
                      "in": "path",
                      "description": "Base site identifier",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "code",
                      "in": "path",
                      "description": "Voucher identifier (code)",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Response configuration. This is the list of fields that should be returned in the response body. Examples: BASIC, DEFAULT, FULL",
                      "required": false,
                      "type": "string",
                      "default": "BASIC"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/Voucher"
                      }
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "403": {
                      "description": "Forbidden"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "oauth2_Password": []
                  },
                  {
                      "oauth2_client_credentials": []
                  }
              ],
              "deprecated": false
          }
      }
  },
  "securityDefinitions": {
      "oauth2_Password": {
          "type": "oauth2",
          "tokenUrl": "/authorizationserver/oauth/token",
          "flow": "password",
          "scopes": {
              "basic": ""
          }
      },
      "oauth2_client_credentials": {
          "type": "oauth2",
          "tokenUrl": "/authorizationserver/oauth/token",
          "flow": "application",
          "scopes": {
              "extended": ""
          }
      }
  },
  "definitions": {
      "Address": {
          "type": "object",
          "required": [
              "firstName",
              "lastName",
              "line1",
              "postalCode",
              "titleCode",
              "town"
          ],
          "properties": {
              "cellphone": {
                  "type": "string",
                  "description": "Cellphone number"
              },
              "city": {
                  "description": "city",
                  "$ref": "#/definitions/City"
              },
              "cityDistrict": {
                  "description": "city district",
                  "$ref": "#/definitions/District"
              },
              "companyName": {
                  "type": "string",
                  "description": "Company Name"
              },
              "country": {
                  "description": "Country where address is located",
                  "$ref": "#/definitions/Country"
              },
              "defaultAddress": {
                  "type": "boolean",
                  "description": "Boolean flag if address is default"
              },
              "district": {
                  "type": "string",
                  "description": "District name"
              },
              "email": {
                  "type": "string",
                  "description": "Email address"
              },
              "firstName": {
                  "type": "string",
                  "description": "First name of the address person"
              },
              "formattedAddress": {
                  "type": "string",
                  "description": "Boolean flag if address is formatted"
              },
              "id": {
                  "type": "string",
                  "description": "Unique id value of the address which is optional while creating new address. While performing other address operations this value is the key"
              },
              "lastName": {
                  "type": "string",
                  "description": "Last name of the address person"
              },
              "line1": {
                  "type": "string",
                  "description": "First line of the address"
              },
              "line2": {
                  "type": "string",
                  "description": "Second line of the address"
              },
              "phone": {
                  "type": "string",
                  "description": "Phone number"
              },
              "postalCode": {
                  "type": "string",
                  "description": "Postal code of the address"
              },
              "region": {
                  "description": "Region where address belongs to",
                  "$ref": "#/definitions/Region"
              },
              "shippingAddress": {
                  "type": "boolean",
                  "description": "Boolean flag if address is for shipping"
              },
              "title": {
                  "type": "string",
                  "description": "Title of the address person"
              },
              "titleCode": {
                  "type": "string",
                  "description": "Code of the title"
              },
              "town": {
                  "type": "string",
                  "description": "Town, field required"
              },
              "visibleInAddressBook": {
                  "type": "boolean",
                  "description": "Boolean flag if address is visible in the Address Book"
              }
          },
          "title": "Address",
          "description": "Request body fields required and optional to operate on address data. The DTO is in XML or .json format"
      },
      "AddressList": {
          "type": "object",
          "properties": {
              "addresses": {
                  "type": "array",
                  "description": "List of addresses",
                  "items": {
                      "$ref": "#/definitions/Address"
                  }
              }
          },
          "title": "AddressList",
          "description": "Representation of an Address list"
      },
      "AddressValidation": {
          "type": "object",
          "properties": {
              "decision": {
                  "type": "string",
                  "description": "Decision"
              },
              "errors": {
                  "description": "List of errors",
                  "$ref": "#/definitions/errorList"
              },
              "suggestedAddresses": {
                  "type": "array",
                  "description": "List of suggested addresses",
                  "items": {
                      "$ref": "#/definitions/Address"
                  }
              }
          },
          "title": "AddressValidation",
          "description": "Representation of an Address Validation"
      },
      "B2BApprovalProcess": {
          "type": "object",
          "required": [
              "code"
          ],
          "properties": {
              "code": {
                  "type": "string",
                  "example": "accApproval",
                  "description": "Code of the Organizational Approval Process"
              },
              "name": {
                  "type": "string",
                  "example": "Escalation Approval with Merchant Check",
                  "description": "Name of the Organizational Approval Process"
              }
          },
          "title": "B2BApprovalProcess",
          "description": "Representation of an organizational approval process"
      },
      "B2BApprovalProcessList": {
          "type": "object",
          "required": [
              "approvalProcesses"
          ],
          "properties": {
              "approvalProcesses": {
                  "type": "array",
                  "description": "List of Organizational Approval Process",
                  "items": {
                      "$ref": "#/definitions/B2BApprovalProcess"
                  }
              }
          },
          "title": "B2BApprovalProcessList",
          "description": "Representation of an organizational approval process list"
      },
      "B2BCostCenter": {
          "type": "object",
          "properties": {
              "active": {
                  "type": "string",
                  "example": true,
                  "description": "Indication of whether the cost center is active. Deprecated since 2005. Read-only, used for display purposes."
              },
              "activeFlag": {
                  "type": "boolean",
                  "example": true,
                  "description": "Boolean flag of whether the cost center is active."
              },
              "assignedBudgets": {
                  "type": "array",
                  "description": "Budgets assigned to this cost center",
                  "items": {
                      "$ref": "#/definitions/BudgetShallow"
                  }
              },
              "code": {
                  "type": "string",
                  "example": "Custom_Retail",
                  "description": "The code of the cost center"
              },
              "currency": {
                  "description": "The currency of the cost center",
                  "$ref": "#/definitions/Currency"
              },
              "name": {
                  "type": "string",
                  "example": "Custom Retail",
                  "description": "The name of the cost center"
              },
              "originalCode": {
                  "type": "string",
                  "example": "Custom_Retail",
                  "description": "The original code of the cost center. Deprecated since 2005."
              },
              "unit": {
                  "description": "The parent unit of the cost center",
                  "$ref": "#/definitions/B2BUnit"
              }
          },
          "title": "B2BCostCenter",
          "description": "Representation of a cost center. This bean may have relationships to other Org Unit WsDTO, whose type are WsDTO beans as well."
      },
      "B2BCostCenterList": {
          "type": "object",
          "properties": {
              "costCenters": {
                  "type": "array",
                  "description": "List of cost centers",
                  "items": {
                      "$ref": "#/definitions/B2BCostCenter"
                  }
              },
              "pagination": {
                  "description": "Pagination items",
                  "$ref": "#/definitions/deprecatedPagination"
              },
              "sorts": {
                  "type": "array",
                  "description": "List of sorts",
                  "items": {
                      "$ref": "#/definitions/Sort"
                  }
              }
          },
          "title": "B2BCostCenterList",
          "description": "Representation of a cost center list"
      },
      "B2BCostCenterShallow": {
          "type": "object",
          "properties": {
              "active": {
                  "type": "string",
                  "example": true,
                  "description": "Indication of whether the cost center is active. Deprecated since 2005. Read-only, used for display purposes."
              },
              "activeFlag": {
                  "type": "boolean",
                  "example": true,
                  "description": "Boolean flag of whether the cost center is active."
              },
              "code": {
                  "type": "string",
                  "example": "Custom_Retail",
                  "description": "The code of the cost center"
              },
              "currency": {
                  "description": "The currency of the cost center",
                  "$ref": "#/definitions/Currency"
              },
              "name": {
                  "type": "string",
                  "example": "Custom Retail",
                  "description": "The name of the cost center"
              },
              "originalCode": {
                  "type": "string",
                  "example": "Custom_Retail",
                  "description": "The original code of the cost center. Deprecated since 2005."
              }
          },
          "title": "B2BCostCenterShallow",
          "description": "Representation of a cost center. This bean is shallow, which means its potential relationship fields to other Org Unit fields are simple ids. No Org Unit WsDTO fields should be declared in this bean to avoid circular references."
      },
      "B2BPaymentType": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string"
              },
              "displayName": {
                  "type": "string"
              }
          },
          "title": "B2BPaymentType"
      },
      "B2BPaymentTypeData": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string"
              },
              "displayName": {
                  "type": "string"
              }
          },
          "title": "B2BPaymentTypeData"
      },
      "B2BPaymentTypeList": {
          "type": "object",
          "properties": {
              "paymentTypes": {
                  "type": "array",
                  "items": {
                      "$ref": "#/definitions/B2BPaymentType"
                  }
              }
          },
          "title": "B2BPaymentTypeList"
      },
      "B2BSelectionData": {
          "type": "object",
          "properties": {
              "active": {
                  "type": "boolean",
                  "example": false,
                  "description": "If this object is active"
              },
              "displayRoles": {
                  "type": "array",
                  "description": "display roles",
                  "items": {
                      "type": "string"
                  }
              },
              "id": {
                  "type": "string",
                  "example": "Retail_2K",
                  "description": "The ID of the selected object"
              },
              "normalizedCode": {
                  "type": "string",
                  "description": "The normalized code"
              },
              "roles": {
                  "type": "array",
                  "description": "roles",
                  "items": {
                      "type": "string"
                  }
              },
              "selected": {
                  "type": "boolean",
                  "example": true,
                  "description": "If the this object was selected"
              }
          },
          "title": "B2BSelectionData",
          "description": "Representation of object selection data"
      },
      "B2BUnit": {
          "type": "object",
          "required": [
              "uid"
          ],
          "properties": {
              "active": {
                  "type": "boolean",
                  "example": true,
                  "description": "Boolean flag of whether Organizational Unit is active"
              },
              "addresses": {
                  "type": "array",
                  "description": "Addresses of the organizational unit node",
                  "items": {
                      "$ref": "#/definitions/Address"
                  }
              },
              "administrators": {
                  "type": "array",
                  "description": "Administrators of the organizational unit node",
                  "items": {
                      "$ref": "#/definitions/User"
                  }
              },
              "approvalProcess": {
                  "description": "Approval Process of the organizational unit node",
                  "$ref": "#/definitions/B2BApprovalProcess"
              },
              "approvers": {
                  "type": "array",
                  "description": "Approvers of the organizational unit node",
                  "items": {
                      "$ref": "#/definitions/User"
                  }
              },
              "costCenters": {
                  "type": "array",
                  "description": "The cost centers of the organizational unit node",
                  "items": {
                      "$ref": "#/definitions/B2BCostCenterShallow"
                  }
              },
              "customers": {
                  "type": "array",
                  "description": "Customers of the organizational unit node",
                  "items": {
                      "$ref": "#/definitions/User"
                  }
              },
              "managers": {
                  "type": "array",
                  "description": "Managers of the organizational unit node",
                  "items": {
                      "$ref": "#/definitions/User"
                  }
              },
              "name": {
                  "type": "string",
                  "example": "Pronto",
                  "description": "Name of the organizational unit"
              },
              "parentOrgUnit": {
                  "description": "Parent unit of the organizational unit",
                  "$ref": "#/definitions/B2BUnit"
              },
              "uid": {
                  "type": "string",
                  "example": "Pronto",
                  "description": "Identifier of the organizational unit"
              }
          },
          "title": "B2BUnit",
          "description": "Representation of an organizational unit"
      },
      "B2BUnitNode": {
          "type": "object",
          "required": [
              "id"
          ],
          "properties": {
              "active": {
                  "type": "boolean",
                  "example": true,
                  "description": "Boolean flag of whether organizational unit represented by the node is active"
              },
              "children": {
                  "type": "array",
                  "description": "Child nodes of the organizational unit node",
                  "items": {
                      "$ref": "#/definitions/B2BUnitNode"
                  }
              },
              "id": {
                  "type": "string",
                  "example": "Pronto_Retail",
                  "description": "Identifier of the organizational unit represented by the node"
              },
              "name": {
                  "type": "string",
                  "example": "Pronto Retail",
                  "description": "Name of the organizational unit represented by the node"
              },
              "parent": {
                  "type": "string",
                  "example": "Pronto",
                  "description": "Unique identifier of organizational unit node's parent unit"
              }
          },
          "title": "B2BUnitNode",
          "description": "Representation of an organizational unit node"
      },
      "B2BUnitNodeList": {
          "type": "object",
          "required": [
              "unitNodes"
          ],
          "properties": {
              "unitNodes": {
                  "type": "array",
                  "description": "List of Unit Nodes",
                  "items": {
                      "$ref": "#/definitions/B2BUnitNode"
                  }
              }
          },
          "title": "B2BUnitNodeList",
          "description": "Representation of an organizational unit node list"
      },
      "BaseOption": {
          "type": "object",
          "properties": {
              "options": {
                  "type": "array",
                  "description": "List of all variant options",
                  "items": {
                      "$ref": "#/definitions/VariantOption"
                  }
              },
              "selected": {
                  "description": "Variant option selected",
                  "$ref": "#/definitions/VariantOption"
              },
              "variantType": {
                  "type": "string",
                  "description": "Variant type of base option"
              }
          },
          "title": "BaseOption",
          "description": "Representation of a Base Ooption"
      },
      "BaseSite": {
          "type": "object",
          "properties": {
              "channel": {
                  "type": "string",
                  "description": "Channel"
              },
              "defaultLanguage": {
                  "description": "Default language for Basesite",
                  "$ref": "#/definitions/Language"
              },
              "defaultPreviewCatalogId": {
                  "type": "string",
                  "description": "Default preview catalog id"
              },
              "defaultPreviewCategoryCode": {
                  "type": "string",
                  "description": "Default preview category code"
              },
              "defaultPreviewProductCode": {
                  "type": "string",
                  "description": "Default preview product code"
              },
              "locale": {
                  "type": "string",
                  "description": "Locale data for Basesite"
              },
              "name": {
                  "type": "string",
                  "description": "Name of Basesite"
              },
              "stores": {
                  "type": "array",
                  "description": "List of Basestores",
                  "items": {
                      "$ref": "#/definitions/BaseStore"
                  }
              },
              "theme": {
                  "type": "string",
                  "description": "Theme of Basesite"
              },
              "uid": {
                  "type": "string",
                  "description": "Unique identifier of Basesite"
              },
              "urlEncodingAttributes": {
                  "type": "array",
                  "description": "List of url encoding attributes",
                  "items": {
                      "type": "string"
                  }
              },
              "urlPatterns": {
                  "type": "array",
                  "description": "List of url patterns",
                  "items": {
                      "type": "string"
                  }
              }
          },
          "title": "BaseSite",
          "description": "Representation of a Base Site"
      },
      "BaseSiteList": {
          "type": "object",
          "properties": {
              "baseSites": {
                  "type": "array",
                  "description": "List of basesites",
                  "items": {
                      "$ref": "#/definitions/BaseSite"
                  }
              }
          },
          "title": "BaseSiteList",
          "description": "Representation of a Base Site List"
      },
      "BaseStore": {
          "type": "object",
          "properties": {
              "createReturnProcessCode": {
                  "type": "string",
                  "description": "Create return process code"
              },
              "currencies": {
                  "type": "array",
                  "description": "List of currencies",
                  "items": {
                      "$ref": "#/definitions/Currency"
                  }
              },
              "defaultCurrency": {
                  "description": "Default currency",
                  "$ref": "#/definitions/Currency"
              },
              "defaultDeliveryOrigin": {
                  "description": "Point of service being default delivery origin",
                  "$ref": "#/definitions/PointOfService"
              },
              "defaultLanguage": {
                  "description": "Default language",
                  "$ref": "#/definitions/Language"
              },
              "deliveryCountries": {
                  "type": "array",
                  "description": "List of delivery countries",
                  "items": {
                      "$ref": "#/definitions/Country"
                  }
              },
              "deliveryModes": {
                  "description": "List of delivery modes",
                  "$ref": "#/definitions/DeliveryModeList"
              },
              "expressCheckoutEnabled": {
                  "type": "boolean",
                  "description": "Flag specifying whether the express checkout option is enabled"
              },
              "externalTaxEnabled": {
                  "type": "boolean",
                  "description": "Flag defining is external tax is enabled"
              },
              "languages": {
                  "type": "array",
                  "description": "List of languages",
                  "items": {
                      "$ref": "#/definitions/Language"
                  }
              },
              "maxRadiusForPosSearch": {
                  "type": "number",
                  "format": "double",
                  "description": "Maximum radius for searching point of service"
              },
              "name": {
                  "type": "string",
                  "description": "Base store name"
              },
              "paymentProvider": {
                  "type": "string",
                  "description": "Payment provider"
              },
              "pointsOfService": {
                  "type": "array",
                  "description": "List of points of service",
                  "items": {
                      "$ref": "#/definitions/PointOfService"
                  }
              },
              "submitOrderProcessCode": {
                  "type": "string",
                  "description": "Submit order process code"
              }
          },
          "title": "BaseStore",
          "description": "Representation of a Base Store"
      },
      "BasicnotificationPreference": {
          "type": "object",
          "properties": {
              "channel": {
                  "type": "string",
                  "example": "email, sms, site_message",
                  "description": "preference channel"
              },
              "enabled": {
                  "type": "boolean",
                  "description": "if true, the channel is on; if false, the channel is off"
              }
          },
          "title": "BasicnotificationPreference",
          "description": "Basic notification preference"
      },
      "BasicnotificationPreferenceList": {
          "type": "object",
          "properties": {
              "preferences": {
                  "type": "array",
                  "description": "Basic notification preferences",
                  "items": {
                      "$ref": "#/definitions/BasicnotificationPreference"
                  }
              }
          },
          "title": "BasicnotificationPreferenceList",
          "description": "Basic notification preference list"
      },
      "Breadcrumb": {
          "type": "object",
          "properties": {
              "facetCode": {
                  "type": "string",
                  "description": "Code of the facet"
              },
              "facetName": {
                  "type": "string",
                  "description": "Name of the facet"
              },
              "facetValueCode": {
                  "type": "string",
                  "description": "Value code of the facet"
              },
              "facetValueName": {
                  "type": "string",
                  "description": "Value name of the facet"
              },
              "removeQuery": {
                  "description": "Remove query",
                  "$ref": "#/definitions/SearchState"
              },
              "truncateQuery": {
                  "description": "Truncate query",
                  "$ref": "#/definitions/SearchState"
              }
          },
          "title": "Breadcrumb",
          "description": "Representation of a Breadcrumb"
      },
      "Budget": {
          "type": "object",
          "properties": {
              "active": {
                  "type": "boolean",
                  "description": "Boolean flag of whether the Budget is active"
              },
              "budget": {
                  "type": "number",
                  "example": 50000.0,
                  "description": "Value of Budget"
              },
              "code": {
                  "type": "string",
                  "example": "Monthly_50K_USD",
                  "description": "Code of the Budget"
              },
              "costCenters": {
                  "type": "array",
                  "description": "List of Cost Centers",
                  "items": {
                      "$ref": "#/definitions/B2BCostCenter"
                  }
              },
              "currency": {
                  "example": "USD",
                  "description": "Currency of the Budget",
                  "$ref": "#/definitions/Currency"
              },
              "endDate": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2020-12-31T09:00:00+0000",
                  "description": "The end date of the Budget"
              },
              "name": {
                  "type": "string",
                  "example": "Monthly 50K USD",
                  "description": "The name of the Budget"
              },
              "orgUnit": {
                  "example": "Rustic",
                  "description": "The unit of the Budget",
                  "$ref": "#/definitions/B2BUnit"
              },
              "selected": {
                  "type": "boolean",
                  "example": true,
                  "description": "Boolean flag whether the budget is selected for a cost center"
              },
              "startDate": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2020-11-31T09:00:00+0000",
                  "description": "The start date of the Budget"
              }
          },
          "title": "Budget",
          "description": "Request body fields required and optional to operate on Budget data. This bean may have relationships to other Org Unit WsDTO, whose type are WsDTO beans as well."
      },
      "BudgetList": {
          "type": "object",
          "properties": {
              "budgets": {
                  "type": "array",
                  "description": "List of Budgets",
                  "items": {
                      "$ref": "#/definitions/Budget"
                  }
              },
              "pagination": {
                  "description": "Pagination items",
                  "$ref": "#/definitions/deprecatedPagination"
              },
              "sorts": {
                  "type": "array",
                  "description": "List of sorts",
                  "items": {
                      "$ref": "#/definitions/Sort"
                  }
              }
          },
          "title": "BudgetList",
          "description": "Representation of a Budget List"
      },
      "BudgetShallow": {
          "type": "object",
          "properties": {
              "active": {
                  "type": "boolean",
                  "description": "Boolean flag of whether the Budget is active"
              },
              "budget": {
                  "type": "number",
                  "example": 50000.0,
                  "description": "Value of Budget"
              },
              "code": {
                  "type": "string",
                  "example": "Monthly_50K_USD",
                  "description": "Code of the Budget"
              },
              "currency": {
                  "example": "USD",
                  "description": "Currency of the Budget",
                  "$ref": "#/definitions/Currency"
              },
              "endDate": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2020-12-31T09:00:00+0000",
                  "description": "The end date of the Budget"
              },
              "name": {
                  "type": "string",
                  "example": "Monthly 50K USD",
                  "description": "The name of the Budget"
              },
              "selected": {
                  "type": "boolean",
                  "example": true,
                  "description": "Boolean flag whether the budget is selected for a cost center"
              },
              "startDate": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2020-11-31T09:00:00+0000",
                  "description": "The start date of the Budget"
              }
          },
          "title": "BudgetShallow",
          "description": "Request body fields required and optional to operate on Budget data. This bean is shallow, which means its potential relationship fields to other Org Unit fields are simple ids. No Org Unit WsDTO should be declared in this bean to avoid circular references."
      },
      "BundleStarter": {
          "type": "object",
          "required": [
              "productCode",
              "quantity",
              "templateId"
          ],
          "properties": {
              "productCode": {
                  "type": "string",
                  "example": 29925,
                  "description": "Product code."
              },
              "quantity": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1,
                  "description": "Quantity of the product added to cart"
              },
              "templateId": {
                  "type": "string",
                  "example": "PhotoStarterPackage",
                  "description": "Id of a template to create a bundle"
              }
          },
          "title": "BundleStarter",
          "description": "Mandatory data required to start a bundle. This includes the templateId of the bundle, the productCode, and the quantity of the product itself."
      },
      "BundleTemplate": {
          "type": "object",
          "required": [
              "id"
          ],
          "properties": {
              "id": {
                  "type": "string",
                  "example": "PhotoOTGCameraComponent",
                  "description": "Id of this bundle template"
              },
              "name": {
                  "type": "string",
                  "example": "Camera Component",
                  "description": "Name of this bundle template"
              },
              "rootBundleTemplateName": {
                  "type": "string",
                  "example": "Photo On The Go Package",
                  "description": "Name of the root bundle template within the bundle tree structure"
              }
          },
          "title": "BundleTemplate",
          "description": "Description of a bundle component related to a product"
      },
      "CCPAttribute": {
          "type": "object",
          "properties": {
              "conflicts": {
                  "type": "array",
                  "description": "List of conflicts",
                  "items": {
                      "$ref": "#/definitions/CCPConflict"
                  }
              },
              "domainValues": {
                  "type": "array",
                  "description": "List of domain values",
                  "items": {
                      "$ref": "#/definitions/CCPAttributeValue"
                  }
              },
              "formattedValue": {
                  "type": "string",
                  "example": "24,87",
                  "description": "Formatted attribute value, relevant for numeric attributes. This formatting takes the session locale into account"
              },
              "images": {
                  "type": "array",
                  "description": "Image list",
                  "items": {
                      "$ref": "#/definitions/Image"
                  }
              },
              "intervalInDomain": {
                  "type": "boolean",
                  "example": false,
                  "description": "The list of attribute domain values contain an interval. Only relevant if the attribute is of numeric type"
              },
              "key": {
                  "type": "string",
                  "example": "1-CONF_LAPTOP.HARDWARE-SCREEN_SIZE",
                  "description": "Language independent attribute key"
              },
              "langDepName": {
                  "type": "string",
                  "example": "Screen Size",
                  "description": "Language dependent attribute description"
              },
              "longText": {
                  "type": "string",
                  "example": "Screen size in inches",
                  "description": "Language dependent attribute long description"
              },
              "maxlength": {
                  "type": "integer",
                  "format": "int32",
                  "example": 5,
                  "description": "Maximum length of attribute value names for all domain values"
              },
              "name": {
                  "type": "string",
                  "example": "SCREEN_SIZE",
                  "description": "Language independent attribute name as assigned in the modeling environment"
              },
              "negativeAllowed": {
                  "type": "boolean",
                  "example": false,
                  "description": "Are negative values allowed? Only relevant if the attribute is of numeric type"
              },
              "numberScale": {
                  "type": "integer",
                  "format": "int32",
                  "example": 2,
                  "description": "Number of decimal places. Only relevant if the attribute is of numeric type"
              },
              "required": {
                  "type": "boolean",
                  "example": false,
                  "description": "It is required to specify this attribute in order to complete the configuration"
              },
              "retractTriggered": {
                  "type": "boolean",
                  "example": true,
                  "description": "Has a retract been triggered for all values of this attribute?"
              },
              "type": {
                  "type": "string",
                  "example": "CHECK_BOX_LIST",
                  "description": "Attribute type. Specifies how the attribute should be rendered ideally",
                  "enum": [
                      "STRING",
                      "NUMERIC",
                      "CHECK_BOX",
                      "CHECK_BOX_LIST",
                      "RADIO_BUTTON",
                      "RADIO_BUTTON_ADDITIONAL_INPUT",
                      "DROPDOWN",
                      "DROPDOWN_ADDITIONAL_INPUT",
                      "READ_ONLY",
                      "NOT_IMPLEMENTED",
                      "SINGLE_SELECTION_IMAGE",
                      "MULTI_SELECTION_IMAGE",
                      "READ_ONLY_SINGLE_SELECTION_IMAGE",
                      "READ_ONLY_MULTI_SELECTION_IMAGE"
                  ]
              },
              "typeLength": {
                  "type": "integer",
                  "format": "int32",
                  "example": 10,
                  "description": "Maximum number of decimal places. Only relevant if the attribute is of numeric type"
              },
              "validationType": {
                  "type": "string",
                  "example": "NUMERIC",
                  "description": "Attribute validation type. Specifies how an attribute should be validated in case it's free input",
                  "enum": [
                      "NUMERIC",
                      "NONE"
                  ]
              },
              "value": {
                  "type": "string",
                  "example": "17'",
                  "description": "Attribute value, in case the attribute is single valued"
              },
              "visible": {
                  "type": "boolean",
                  "example": true,
                  "description": "Attribute is visible"
              }
          },
          "title": "CCPAttribute",
          "description": "An attribute of a complex product"
      },
      "CCPAttributePricing": {
          "type": "object",
          "properties": {
              "csticUiKey": {
                  "type": "string",
                  "example": "1-CONF_LAPTOP.AUDIO-ACCESSORY",
                  "description": "Attribute key"
              },
              "priceSupplements": {
                  "type": "array",
                  "description": "List of value price supplements",
                  "items": {
                      "$ref": "#/definitions/CCPAttributeValuePricing"
                  }
              },
              "selectedValues": {
                  "type": "array",
                  "description": "List of currently selected domain values",
                  "items": {
                      "type": "string"
                  }
              }
          },
          "title": "CCPAttributePricing",
          "description": "Enriches an attribute with supplementary pricing data"
      },
      "CCPAttributeValue": {
          "type": "object",
          "properties": {
              "images": {
                  "type": "array",
                  "description": "List of images",
                  "items": {
                      "$ref": "#/definitions/Image"
                  }
              },
              "key": {
                  "type": "string",
                  "example": "MET_BLUE",
                  "description": "Value key"
              },
              "langDepName": {
                  "type": "string",
                  "example": "Metallic Blue",
                  "description": "Language dependent value description"
              },
              "name": {
                  "type": "string",
                  "example": "MET_BLUE",
                  "description": "Language independent value name"
              },
              "readonly": {
                  "type": "boolean",
                  "example": false,
                  "description": "Indicates if value is read-only"
              },
              "selected": {
                  "type": "boolean",
                  "example": false,
                  "description": "Indicates if value is selected"
              }
          },
          "title": "CCPAttributeValue",
          "description": "Representation of an attribute value"
      },
      "CCPAttributeValueOverview": {
          "type": "object",
          "properties": {
              "characteristic": {
                  "type": "string",
                  "example": "Accessories",
                  "description": "Language dependent attribute name"
              },
              "value": {
                  "type": "string",
                  "example": "Extra Audio Package",
                  "description": "Language dependent value name"
              }
          },
          "title": "CCPAttributeValueOverview",
          "description": "Representation of an attribute value in the context of the configuration overview"
      },
      "CCPAttributeValuePricing": {
          "type": "object",
          "properties": {
              "attributeValueKey": {
                  "type": "string",
                  "example": "MET_BLUE",
                  "description": "Value key"
              },
              "obsoletePriceValue": {
                  "description": "Obsolete price that has been reduced as discounts have been applied",
                  "$ref": "#/definitions/Price"
              },
              "priceValue": {
                  "description": "Price of attribute value",
                  "$ref": "#/definitions/Price"
              }
          },
          "title": "CCPAttributeValuePricing",
          "description": "Enriches an attribute value with supplementary pricing data"
      },
      "CCPConfiguration": {
          "type": "object",
          "properties": {
              "complete": {
                  "type": "boolean",
                  "example": true,
                  "description": "Configuration is complete, meaning each mandatory attribute has been specified"
              },
              "configId": {
                  "type": "string",
                  "example": "ee520001-3e9a-4321-acc8-b92783c8ca4e",
                  "description": "Configuration Identifier. A randomly generated UUID owned by the product configurator"
              },
              "consistent": {
                  "type": "boolean",
                  "example": true,
                  "description": "Configuration is consistent, meaning it contains no conflicts"
              },
              "groups": {
                  "type": "array",
                  "description": "Attribute groups",
                  "items": {
                      "$ref": "#/definitions/CCPGroup"
                  }
              },
              "quantity": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1,
                  "description": "Configuration quantity"
              },
              "rootProduct": {
                  "type": "string",
                  "example": "CONF_LAPTOP",
                  "description": "Code of the configuration root product"
              },
              "totalNumberOfIssues": {
                  "type": "integer",
                  "format": "int32",
                  "example": 1,
                  "description": "Total number of issues: sum of number of conflicts and number of incomplete mandatory field"
              }
          },
          "title": "CCPConfiguration",
          "description": "Representation of a product configuration. Contains the entities that describe a complex product: attributes of different types, groups of attributes, hierarchies of groups, statuses and messages. The attributes are typically connected through dependencies"
      },
      "CCPConfigurationOverallPricing": {
          "type": "object",
          "properties": {
              "basePrice": {
                  "description": "Base price",
                  "$ref": "#/definitions/Price"
              },
              "currentTotal": {
                  "description": "Total price",
                  "$ref": "#/definitions/Price"
              },
              "currentTotalSavings": {
                  "description": "Savings that occur because discounts have been applied to one or more attribute values of the configuration",
                  "$ref": "#/definitions/Price"
              },
              "selectedOptions": {
                  "description": "Summarized price of the selected options",
                  "$ref": "#/definitions/Price"
              }
          },
          "title": "CCPConfigurationOverallPricing",
          "description": "Prices on overall product configuration level"
      },
      "CCPConfigurationOverview": {
          "type": "object",
          "properties": {
              "groups": {
                  "type": "array",
                  "description": "Configuration overview groups",
                  "items": {
                      "$ref": "#/definitions/CCPGroupOverview"
                  }
              },
              "id": {
                  "type": "string",
                  "example": "ee520001-3e9a-4321-acc8-b92783c8ca4e",
                  "description": "Configuration Identifier. A randomly generated UUID owned by the product configurator"
              },
              "pricing": {
                  "description": "Price summary",
                  "$ref": "#/definitions/CCPConfigurationOverallPricing"
              },
              "productCode": {
                  "type": "string",
                  "example": "CONF_LAPTOP",
                  "description": "Product code of configuration's root product"
              },
              "sourceDocumentId": {
                  "type": "string",
                  "example": "0001012345",
                  "description": "Identifier of document that owns this configuration. Can be the ID of a saved cart, a quote or an order"
              },
              "totalNumberOfIssues": {
                  "type": "integer",
                  "format": "int32",
                  "example": 1,
                  "description": "Total number of issues: sum of number of conflicts and number of incomplete mandatory field"
              }
          },
          "title": "CCPConfigurationOverview",
          "description": "Representation of a product configuration overview, a condensed read-only view of a product configuration. Contains only the selected values"
      },
      "CCPConfigurationPricing": {
          "type": "object",
          "properties": {
              "attributes": {
                  "type": "array",
                  "description": "List of supplementary data on attribute level",
                  "items": {
                      "$ref": "#/definitions/CCPAttributePricing"
                  }
              },
              "configId": {
                  "type": "string",
                  "example": "ee520001-3e9a-4321-acc8-b92783c8ca4e",
                  "description": "Configuration Identifier. A randomly generated UUID owned by the product configurator"
              },
              "priceSummary": {
                  "description": "Price summary",
                  "$ref": "#/definitions/CCPConfigurationOverallPricing"
              },
              "pricingError": {
                  "type": "boolean",
                  "example": false,
                  "description": "Indicates that pricing is currently not available"
              },
              "showDeltaPrices": {
                  "type": "boolean",
                  "example": true,
                  "description": "Indicates that attribute surcharges are displayed relatively to the current attribute price"
              }
          },
          "title": "CCPConfigurationPricing",
          "description": "Enriches a product configuration with supplementary pricing data"
      },
      "CCPConflict": {
          "type": "object",
          "properties": {
              "text": {
                  "type": "string",
                  "example": "It is not possible to select the extra audio package and the docking station T20 in parallel. Review your selections",
                  "description": "Language dependent conflict text"
              }
          },
          "title": "CCPConflict",
          "description": "Textual representation of a conflict"
      },
      "CCPGroup": {
          "type": "object",
          "properties": {
              "attributes": {
                  "type": "array",
                  "description": "List of attributes",
                  "items": {
                      "$ref": "#/definitions/CCPAttribute"
                  }
              },
              "complete": {
                  "type": "boolean",
                  "example": true,
                  "description": "Group is complete, meaning each mandatory attribute has been specified"
              },
              "configurable": {
                  "type": "boolean",
                  "example": true,
                  "description": "Group contains attributes. False if the group represents a non-configurable leaf in the configuration hierarchy"
              },
              "consistent": {
                  "type": "boolean",
                  "example": true,
                  "description": "Group is consistent, meaning it contains no conflicts"
              },
              "description": {
                  "type": "string",
                  "example": "Audio Options",
                  "description": "Language dependent group description"
              },
              "groupType": {
                  "type": "string",
                  "description": "INSTANCE"
              },
              "id": {
                  "type": "string",
                  "example": "1-CONF_LAPTOP.AUDIO",
                  "description": "Group Identifier"
              },
              "name": {
                  "type": "string",
                  "example": "AUDIO",
                  "description": "Language independent group name"
              },
              "subGroups": {
                  "type": "array",
                  "description": "List of subordinate groups",
                  "items": {
                      "$ref": "#/definitions/CCPGroup"
                  }
              }
          },
          "title": "CCPGroup",
          "description": "Representation of a group in the context of the product configuration"
      },
      "CCPGroupOverview": {
          "type": "object",
          "properties": {
              "characteristicValues": {
                  "type": "array",
                  "description": "Attribute values",
                  "items": {
                      "$ref": "#/definitions/CCPAttributeValueOverview"
                  }
              },
              "groupDescription": {
                  "type": "string",
                  "example": "Audio Options",
                  "description": "Language dependent group description"
              },
              "groupType": {
                  "type": "string",
                  "example": "CONFLICT",
                  "description": "Type of group"
              },
              "id": {
                  "type": "string",
                  "example": "1-CONF_LAPTOP.GROUP1",
                  "description": "Group Identifier"
              },
              "subGroups": {
                  "type": "array",
                  "description": "List of subordinate groups",
                  "items": {
                      "$ref": "#/definitions/CCPGroupOverview"
                  }
              }
          },
          "title": "CCPGroupOverview",
          "description": "Representation of a group in the context of the product configuration overview"
      },
      "CCPOrderEntry": {
          "type": "object",
          "properties": {
              "basePrice": {
                  "description": "Base price of order entry item",
                  "$ref": "#/definitions/Price"
              },
              "cancellableQuantity": {
                  "type": "integer",
                  "format": "int64",
                  "example": 5,
                  "description": "Quantity number of cancellable items in order entry"
              },
              "cancelledItemsPrice": {
                  "description": "Total price of cancelled items which belong to the order entry item",
                  "$ref": "#/definitions/Price"
              },
              "comments": {
                  "type": "array",
                  "description": "List of order entry comments.",
                  "items": {
                      "$ref": "#/definitions/Comment"
                  }
              },
              "configId": {
                  "type": "string",
                  "example": "ee520001-3e9a-4321-acc8-b92783c8ca4e",
                  "description": "Configuration Identifier. A randomly generated UUID owned by the product configurator"
              },
              "configurationInfos": {
                  "type": "array",
                  "description": "Configuration info of order entry",
                  "items": {
                      "$ref": "#/definitions/ConfigurationInfo"
                  }
              },
              "deliveryMode": {
                  "description": "Delivery mode",
                  "$ref": "#/definitions/DeliveryMode"
              },
              "deliveryPointOfService": {
                  "description": "Point of service associated with order entry",
                  "$ref": "#/definitions/PointOfService"
              },
              "entryNumber": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Entry number of the order entry"
              },
              "product": {
                  "description": "Product details of order entry",
                  "$ref": "#/definitions/Product"
              },
              "quantity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Quantity number of items in order entry"
              },
              "quantityAllocated": {
                  "type": "integer",
                  "format": "int64"
              },
              "quantityCancelled": {
                  "type": "integer",
                  "format": "int64"
              },
              "quantityPending": {
                  "type": "integer",
                  "format": "int64"
              },
              "quantityReturned": {
                  "type": "integer",
                  "format": "int64"
              },
              "quantityShipped": {
                  "type": "integer",
                  "format": "int64"
              },
              "quantityUnallocated": {
                  "type": "integer",
                  "format": "int64"
              },
              "returnableQuantity": {
                  "type": "integer",
                  "format": "int64",
                  "example": 5,
                  "description": "Quantity number of returnable items in order entry"
              },
              "returnedItemsPrice": {
                  "description": "Total price of returned items which belong to the order entry item",
                  "$ref": "#/definitions/Price"
              },
              "statusSummaryList": {
                  "type": "array",
                  "description": "List of aggregated status information per entry, relevant if the entry is configurable and its configuration contains one or many issues in different severities. Note that configurators typically raise such issues only in case the parent document is changeable. In this case the issues (depending on their severity) need to be fixed before a checkout can be done. This means this segment can be present for a cart entry, for order entries it will always be empty",
                  "items": {
                      "$ref": "#/definitions/StatusSummary"
                  }
              },
              "totalPrice": {
                  "description": "Total price of order entry item",
                  "$ref": "#/definitions/Price"
              },
              "updateable": {
                  "type": "boolean",
                  "description": "Flag defining if order entry item is updateable"
              },
              "url": {
                  "type": "string"
              }
          },
          "title": "CCPOrderEntry",
          "description": "Representation of an order entry with product configuration attached"
      },
      "CancellationRequestEntryInput": {
          "type": "object",
          "required": [
              "orderEntryNumber",
              "quantity"
          ],
          "properties": {
              "orderEntryNumber": {
                  "type": "integer",
                  "format": "int32",
                  "example": 1,
                  "description": "Order entry number of the cancelled product"
              },
              "quantity": {
                  "type": "integer",
                  "format": "int64",
                  "example": 5,
                  "description": "Quantity of the product which belongs to the order entry and is requested to be cancelled"
              }
          },
          "title": "CancellationRequestEntryInput",
          "description": "Representation of a cancellation request entry input for an order"
      },
      "CancellationRequestEntryInputList": {
          "type": "object",
          "required": [
              "cancellationRequestEntryInputs"
          ],
          "properties": {
              "cancellationRequestEntryInputs": {
                  "type": "array",
                  "description": "Cancellation request entry inputs which contain information about the order entries which are requested to be cancelled",
                  "items": {
                      "$ref": "#/definitions/CancellationRequestEntryInput"
                  }
              }
          },
          "title": "CancellationRequestEntryInputList",
          "description": "Representation of a cancellation request entry input list for an order"
      },
      "CardType": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string",
                  "description": "Card type code"
              },
              "name": {
                  "type": "string",
                  "description": "Card type name"
              }
          },
          "title": "CardType",
          "description": "Representation of a Card Type"
      },
      "CardTypeList": {
          "type": "object",
          "properties": {
              "cardTypes": {
                  "type": "array",
                  "description": "List of card types",
                  "items": {
                      "$ref": "#/definitions/CardType"
                  }
              }
          },
          "title": "CardTypeList",
          "description": "Representation of a Card Type List"
      },
      "Cart": {
          "type": "object",
          "properties": {
              "appliedOrderPromotions": {
                  "type": "array",
                  "description": "List of applied order promotions",
                  "items": {
                      "$ref": "#/definitions/PromotionResult"
                  }
              },
              "appliedProductPromotions": {
                  "type": "array",
                  "description": "List of applied product promotions",
                  "items": {
                      "$ref": "#/definitions/PromotionResult"
                  }
              },
              "appliedVouchers": {
                  "type": "array",
                  "description": "List of applied vouchers",
                  "items": {
                      "$ref": "#/definitions/Voucher"
                  }
              },
              "calculated": {
                  "type": "boolean",
                  "description": "Flag showing if order is calculated"
              },
              "chinesePaymentInfo": {
                  "description": "Chinese payment info",
                  "$ref": "#/definitions/ChinesePaymentInfo"
              },
              "code": {
                  "type": "string",
                  "description": "Code number of order"
              },
              "costCenter": {
                  "$ref": "#/definitions/B2BCostCenter"
              },
              "deliveryAddress": {
                  "description": "Delivery address",
                  "$ref": "#/definitions/Address"
              },
              "deliveryCost": {
                  "description": "Delivery cost",
                  "$ref": "#/definitions/Price"
              },
              "deliveryItemsQuantity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Quantity of delivery items"
              },
              "deliveryMode": {
                  "description": "Delivery mode information",
                  "$ref": "#/definitions/DeliveryMode"
              },
              "deliveryOrderGroups": {
                  "type": "array",
                  "description": "List of delivery order entries group",
                  "items": {
                      "$ref": "#/definitions/DeliveryOrderEntryGroup"
                  }
              },
              "deliveryTimeSlot": {
                  "$ref": "#/definitions/DeliveryTimeSlot"
              },
              "description": {
                  "type": "string",
                  "description": "Description of the cart"
              },
              "entries": {
                  "type": "array",
                  "description": "List of order entries",
                  "items": {
                      "$ref": "#/definitions/OrderEntry"
                  }
              },
              "entryGroups": {
                  "type": "array",
                  "description": "List of entry groups",
                  "items": {
                      "$ref": "#/definitions/EntryGroup"
                  }
              },
              "expirationTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date of cart expiration time"
              },
              "guid": {
                  "type": "string",
                  "description": "Guest user id identifier"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the cart"
              },
              "net": {
                  "type": "boolean",
                  "description": "Flag stating iv value is net-value"
              },
              "orderDiscounts": {
                  "description": "Order discounts",
                  "$ref": "#/definitions/Price"
              },
              "paymentInfo": {
                  "description": "Payment information",
                  "$ref": "#/definitions/PaymentDetails"
              },
              "paymentStatus": {
                  "type": "string",
                  "example": "PAID",
                  "description": "Payment status"
              },
              "paymentType": {
                  "$ref": "#/definitions/B2BPaymentTypeData"
              },
              "pickupItemsQuantity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Quantity of pickup items"
              },
              "pickupOrderGroups": {
                  "type": "array",
                  "description": "List of pickup order entry group",
                  "items": {
                      "$ref": "#/definitions/PickupOrderEntryGroup"
                  }
              },
              "potentialOrderPromotions": {
                  "type": "array",
                  "description": "List of potential order promotions for cart",
                  "items": {
                      "$ref": "#/definitions/PromotionResult"
                  }
              },
              "potentialProductPromotions": {
                  "type": "array",
                  "description": "List of potential product promotions for cart",
                  "items": {
                      "$ref": "#/definitions/PromotionResult"
                  }
              },
              "productDiscounts": {
                  "description": "Product discounts",
                  "$ref": "#/definitions/Price"
              },
              "purchaseOrderNumber": {
                  "type": "string"
              },
              "saveTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date of saving cart"
              },
              "savedBy": {
                  "description": "Information about person who saved cart",
                  "$ref": "#/definitions/Principal"
              },
              "site": {
                  "type": "string",
                  "description": "Site"
              },
              "store": {
                  "type": "string",
                  "description": "Store"
              },
              "subTotal": {
                  "description": "Subtotal price",
                  "$ref": "#/definitions/Price"
              },
              "taxInvoice": {
                  "$ref": "#/definitions/TaxInvoice"
              },
              "totalDiscounts": {
                  "description": "Total discounts",
                  "$ref": "#/definitions/Price"
              },
              "totalItems": {
                  "type": "integer",
                  "format": "int32"
              },
              "totalPrice": {
                  "description": "Total price value",
                  "$ref": "#/definitions/Price"
              },
              "totalPriceWithTax": {
                  "description": "Total price with tax",
                  "$ref": "#/definitions/Price"
              },
              "totalTax": {
                  "description": "Total tax price",
                  "$ref": "#/definitions/Price"
              },
              "totalUnitCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Total unit count"
              },
              "user": {
                  "description": "User information",
                  "$ref": "#/definitions/Principal"
              }
          },
          "title": "Cart",
          "description": "Representation of a Cart"
      },
      "CartList": {
          "type": "object",
          "properties": {
              "carts": {
                  "type": "array",
                  "description": "List of carts",
                  "items": {
                      "$ref": "#/definitions/Cart"
                  }
              }
          },
          "title": "CartList",
          "description": "Representation of a Cart list"
      },
      "CartModification": {
          "type": "object",
          "properties": {
              "deliveryModeChanged": {
                  "type": "boolean",
                  "description": "Delivery mode changed"
              },
              "entry": {
                  "description": "Order entry",
                  "$ref": "#/definitions/OrderEntry"
              },
              "quantity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Final quantity after cart modification"
              },
              "quantityAdded": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Quantity added with cart modification"
              },
              "statusCode": {
                  "type": "string",
                  "description": "Status code of cart modification"
              },
              "statusMessage": {
                  "type": "string",
                  "description": "Status message"
              }
          },
          "title": "CartModification",
          "description": "Representation of a Cart modification"
      },
      "CartModificationList": {
          "type": "object",
          "properties": {
              "cartModifications": {
                  "type": "array",
                  "description": "List of cart modifications",
                  "items": {
                      "$ref": "#/definitions/CartModification"
                  }
              }
          },
          "title": "CartModificationList",
          "description": "Representation of a Cart modification list"
      },
      "Catalog": {
          "type": "object",
          "properties": {
              "catalogVersions": {
                  "type": "array",
                  "description": "List of versions of catalog",
                  "items": {
                      "$ref": "#/definitions/CatalogVersion"
                  }
              },
              "id": {
                  "type": "string",
                  "description": "Identifier of abstract catalog item"
              },
              "lastModified": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date of last modification"
              },
              "name": {
                  "type": "string",
                  "description": "Name of abstract catalog item"
              },
              "url": {
                  "type": "string",
                  "description": "Url address of abstract catalog item"
              }
          },
          "title": "Catalog",
          "description": "Representation of an Catalog"
      },
      "CatalogList": {
          "type": "object",
          "properties": {
              "catalogs": {
                  "type": "array",
                  "description": "List of catalog items",
                  "items": {
                      "$ref": "#/definitions/Catalog"
                  }
              }
          },
          "title": "CatalogList",
          "description": "Representation of a Catalog List"
      },
      "CatalogVersion": {
          "type": "object",
          "properties": {
              "categories": {
                  "type": "array",
                  "description": "List of category hierarchies",
                  "items": {
                      "$ref": "#/definitions/CategoryHierarchy"
                  }
              },
              "id": {
                  "type": "string",
                  "description": "Identifier of abstract catalog item"
              },
              "lastModified": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date of last modification"
              },
              "name": {
                  "type": "string",
                  "description": "Name of abstract catalog item"
              },
              "url": {
                  "type": "string",
                  "description": "Url address of abstract catalog item"
              }
          },
          "title": "CatalogVersion",
          "description": "Representation of a Catalog Version"
      },
      "Category": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string",
                  "description": "Code of the category"
              },
              "image": {
                  "description": "Category image",
                  "$ref": "#/definitions/Image"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the category"
              },
              "url": {
                  "type": "string",
                  "description": "URL of the category"
              }
          },
          "title": "Category",
          "description": "Representation of a Category"
      },
      "CategoryHierarchy": {
          "type": "object",
          "properties": {
              "id": {
                  "type": "string",
                  "description": "Identifier of abstract catalog item"
              },
              "lastModified": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date of last modification"
              },
              "name": {
                  "type": "string",
                  "description": "Name of abstract catalog item"
              },
              "products": {
                  "type": "array",
                  "items": {
                      "$ref": "#/definitions/Product"
                  }
              },
              "subcategories": {
                  "type": "array",
                  "description": "List of subcategory hierarchies",
                  "items": {
                      "$ref": "#/definitions/CategoryHierarchy"
                  }
              },
              "url": {
                  "type": "string",
                  "description": "Url address of abstract catalog item"
              }
          },
          "title": "CategoryHierarchy",
          "description": "Representation of a Category Hierarchy"
      },
      "ChinesePaymentInfo": {
          "type": "object",
          "properties": {
              "id": {
                  "type": "string",
                  "description": "Chinese payment info identifier"
              },
              "paymentProvider": {
                  "type": "string",
                  "description": "Payment provider of Chinese payment info"
              },
              "paymentProviderLogo": {
                  "type": "string",
                  "example": "/medias/wechatpay.png?context=CONTEXT",
                  "description": "Logo url of payment provider"
              },
              "paymentProviderName": {
                  "type": "string",
                  "description": "Name of payment provider"
              },
              "serviceType": {
                  "type": "string",
                  "example": "DirectPay",
                  "description": "The serviceType which is used for payment and defined in different payment providers"
              }
          },
          "title": "ChinesePaymentInfo",
          "description": "Chinese payment info"
      },
      "City": {
          "type": "object",
          "properties": {
              "isocode": {
                  "type": "string",
                  "example": "CN-11-1, CN-11-2, CN-11-3",
                  "description": "ISO 3166-1 alpha-2 standard, e.g.[countryIso]-[regionNumber]-[cityNumber]"
              },
              "name": {
                  "type": "string",
                  "example": "Beijing, Tianjin, Baoding",
                  "description": "name of city"
              }
          },
          "title": "City",
          "description": "data object of city"
      },
      "Classification": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string",
                  "description": "Code of the classification"
              },
              "features": {
                  "type": "array",
                  "description": "List of features for given classification",
                  "items": {
                      "$ref": "#/definitions/Feature"
                  }
              },
              "name": {
                  "type": "string",
                  "description": "Name of the classification"
              }
          },
          "title": "Classification",
          "description": "Representation of a Classification"
      },
      "Comment": {
          "type": "object",
          "required": [
              "creationDate",
              "fromCustomer",
              "text"
          ],
          "properties": {
              "author": {
                  "description": "Author of the comment.",
                  "$ref": "#/definitions/Principal"
              },
              "creationDate": {
                  "type": "string",
                  "format": "date-time",
                  "example": "yyyy-MM-dd HH:mm:ss+0000",
                  "description": "Date when the comment was created."
              },
              "fromCustomer": {
                  "type": "boolean",
                  "example": true,
                  "description": "Flag showing if the current customer was the author of the comment."
              },
              "text": {
                  "type": "string",
                  "example": "Text of the comment",
                  "description": "Text of the comment."
              }
          },
          "title": "Comment",
          "description": "Object of the comment, which can be added to any Item in the commerce suite."
      },
      "ComponentAdaptedData": {
          "type": "object",
          "title": "ComponentAdaptedData",
          "properties": {
            "idList": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        }
      },
      "ComponentIDList": {
          "type": "object",
          "properties": {
              "idList": {
                  "type": "array",
                  "items": {
                      "type": "string"
                  }
              }
          },
          "title": "ComponentIDList"
      },
      "ConfigurationInfo": {
          "type": "object",
          "properties": {
              "configurationLabel": {
                  "type": "string",
                  "description": "Label of configuration info"
              },
              "configurationValue": {
                  "type": "string",
                  "description": "Value of configuration info"
              },
              "configuratorType": {
                  "type": "string",
                  "description": "Type of configuration info"
              },
              "status": {
                  "type": "string",
                  "description": "Status of configuration info"
              }
          },
          "title": "ConfigurationInfo",
          "description": "Representation of a Configuration Info"
      },
      "ConfigurationInfoList": {
          "type": "object",
          "properties": {
              "configurationInfos": {
                  "type": "array",
                  "description": "List of configuration info",
                  "items": {
                      "$ref": "#/definitions/ConfigurationInfo"
                  }
              }
          },
          "title": "ConfigurationInfoList",
          "description": "Representation of a Configuration Info List"
      },
      "Consent": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string",
                  "description": "Code of consent"
              },
              "consentGivenDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date of consenting"
              },
              "consentWithdrawnDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Consent withdrawn date"
              }
          },
          "title": "Consent",
          "description": "Representation of a Consent"
      },
      "ConsentTemplate": {
          "type": "object",
          "properties": {
              "currentConsent": {
                  "description": "Current consent",
                  "$ref": "#/definitions/Consent"
              },
              "description": {
                  "type": "string",
                  "description": "Consent template description"
              },
              "id": {
                  "type": "string",
                  "description": "Consent template identifier"
              },
              "name": {
                  "type": "string",
                  "description": "Consent template name"
              },
              "version": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Consent template version"
              }
          },
          "title": "ConsentTemplate",
          "description": "Representation of a Consent Template"
      },
      "ConsentTemplateList": {
          "type": "object",
          "properties": {
              "consentTemplates": {
                  "type": "array",
                  "description": "List of consent templates",
                  "items": {
                      "$ref": "#/definitions/ConsentTemplate"
                  }
              }
          },
          "title": "ConsentTemplateList",
          "description": "Representation of a Consent Template List"
      },
      "Consignment": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string",
                  "description": "Consignment code"
              },
              "deliveryMode": {
                  "$ref": "#/definitions/DeliveryMode"
              },
              "deliveryPointOfService": {
                  "description": "Delivery point of service",
                  "$ref": "#/definitions/PointOfService"
              },
              "entries": {
                  "type": "array",
                  "description": "List of consignment entries",
                  "items": {
                      "$ref": "#/definitions/ConsignmentEntry"
                  }
              },
              "orderCode": {
                  "type": "string"
              },
              "packagingInfo": {
                  "$ref": "#/definitions/PackagingInfo"
              },
              "shippingAddress": {
                  "description": "Shipping address",
                  "$ref": "#/definitions/Address"
              },
              "shippingDate": {
                  "type": "string",
                  "format": "date-time"
              },
              "status": {
                  "type": "string",
                  "description": "Consignment status"
              },
              "statusDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Consignment status date"
              },
              "statusDisplay": {
                  "type": "string",
                  "description": "Consignment status display"
              },
              "trackingID": {
                  "type": "string",
                  "description": "Consignment tracking identifier"
              },
              "warehouseCode": {
                  "type": "string"
              }
          },
          "title": "Consignment",
          "description": "Representation of a Consignment"
      },
      "ConsignmentEntry": {
          "type": "object",
          "properties": {
              "orderEntry": {
                  "description": "Order entry of Consignment entry",
                  "$ref": "#/definitions/OrderEntry"
              },
              "quantity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Quantity value of Consignment entry"
              },
              "quantityDeclined": {
                  "type": "integer",
                  "format": "int64"
              },
              "quantityPending": {
                  "type": "integer",
                  "format": "int64"
              },
              "quantityShipped": {
                  "type": "integer",
                  "format": "int64"
              },
              "shippedQuantity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Shipped quantity"
              }
          },
          "title": "ConsignmentEntry",
          "description": "Representation of a Consignment Entry"
      },
      "Country": {
          "type": "object",
          "properties": {
              "isocode": {
                  "type": "string",
                  "description": "Country code in iso format"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the country"
              }
          },
          "title": "Country",
          "description": "Response body fields which will be returned while fetching the list of countries. The DTO is in XML or .json format"
      },
      "CountryList": {
          "type": "object",
          "properties": {
              "countries": {
                  "type": "array",
                  "description": "This is the list of Country fields that should be returned in the response body",
                  "items": {
                      "$ref": "#/definitions/Country"
                  }
              }
          },
          "title": "CountryList",
          "description": "List of countries"
      },
      "CreateComment": {
          "type": "object",
          "required": [
              "text"
          ],
          "properties": {
              "text": {
                  "type": "string",
                  "example": "Text of the comment",
                  "description": "Text of the comment."
              }
          },
          "title": "CreateComment",
          "description": "Object of the comment, which can be used to add a comment."
      },
      "Currency": {
          "type": "object",
          "properties": {
              "active": {
                  "type": "boolean",
                  "description": "Boolean flag whether currency is active"
              },
              "isocode": {
                  "type": "string",
                  "description": "Code of the currency in iso format"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the currency"
              },
              "symbol": {
                  "type": "string",
                  "description": "Symbol of the currency"
              }
          },
          "title": "Currency",
          "description": "Representation of a Currency"
      },
      "CurrencyList": {
          "type": "object",
          "properties": {
              "currencies": {
                  "type": "array",
                  "description": "List of currencies",
                  "items": {
                      "$ref": "#/definitions/Currency"
                  }
              }
          },
          "title": "CurrencyList",
          "description": "Representation of a Currency List"
      },
      "CustomerCoupon": {
          "type": "object",
          "properties": {
              "allProductsApplicable": {
                  "type": "boolean",
                  "description": "Indicates whether the coupon is applicable for all products"
              },
              "couponId": {
                  "type": "string",
                  "description": "Coupon identifier"
              },
              "description": {
                  "type": "string",
                  "description": "Description of the coupon"
              },
              "endDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "End date of the coupon"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the coupon"
              },
              "notificationOn": {
                  "type": "boolean",
                  "description": "Indicates if notification is enabled or disabled"
              },
              "startDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Start date of the coupon"
              },
              "status": {
                  "type": "string",
                  "example": "Effective",
                  "description": "Status of the coupon"
              }
          },
          "title": "CustomerCoupon",
          "description": "Customer coupon"
      },
      "CustomerCoupon2Customer": {
          "type": "object",
          "properties": {
              "coupon": {
                  "description": "Customer coupon",
                  "$ref": "#/definitions/CustomerCoupon"
              },
              "customer": {
                  "description": "Customer",
                  "$ref": "#/definitions/User"
              }
          },
          "title": "CustomerCoupon2Customer",
          "description": "Customer coupon for customer"
      },
      "CustomerCouponNotification": {
          "type": "object",
          "properties": {
              "coupon": {
                  "description": "Customer coupon",
                  "$ref": "#/definitions/CustomerCoupon"
              },
              "customer": {
                  "description": "Customer",
                  "$ref": "#/definitions/User"
              },
              "status": {
                  "type": "string",
                  "example": "EFFECTIVESENT",
                  "description": "Notification status"
              }
          },
          "title": "CustomerCouponNotification",
          "description": "Customer coupon notification"
      },
      "CustomerCouponSearchResult": {
          "type": "object",
          "properties": {
              "coupons": {
                  "type": "array",
                  "description": "List of coupon",
                  "items": {
                      "$ref": "#/definitions/CustomerCoupon"
                  }
              },
              "pagination": {
                  "description": "Pagination information",
                  "$ref": "#/definitions/pagination"
              },
              "sorts": {
                  "type": "array",
                  "description": "Sorting information",
                  "items": {
                      "$ref": "#/definitions/sort"
                  }
              }
          },
          "title": "CustomerCouponSearchResult",
          "description": "Customer coupon search result"
      },
      "DeliveryMode": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string",
                  "description": "Code of the delivery mode"
              },
              "deliveryCost": {
                  "description": "Cost of the delivery",
                  "$ref": "#/definitions/Price"
              },
              "description": {
                  "type": "string",
                  "description": "Description of the delivery mode"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the delivery mode"
              }
          },
          "title": "DeliveryMode",
          "description": "Representation of a Delivery mode"
      },
      "DeliveryModeList": {
          "type": "object",
          "properties": {
              "deliveryModes": {
                  "type": "array",
                  "description": "List of delivery modes",
                  "items": {
                      "$ref": "#/definitions/DeliveryMode"
                  }
              }
          },
          "title": "DeliveryModeList",
          "description": "Representation of a Delivery mode list"
      },
      "DeliveryOrderEntryGroup": {
          "type": "object",
          "properties": {
              "deliveryAddress": {
                  "description": "Delivery address for order entry group",
                  "$ref": "#/definitions/Address"
              },
              "entries": {
                  "type": "array",
                  "description": "List of order entries",
                  "items": {
                      "$ref": "#/definitions/OrderEntry"
                  }
              },
              "quantity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Quantity of order entries in a group"
              },
              "totalPriceWithTax": {
                  "description": "Total price with tax",
                  "$ref": "#/definitions/Price"
              }
          },
          "title": "DeliveryOrderEntryGroup",
          "description": "Representation of a Delivery Order Entry Group"
      },
      "DeliveryTimeSlot": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string",
                  "description": "delivery timeslot code"
              },
              "name": {
                  "type": "string",
                  "description": "delivery timeslot name"
              }
          },
          "title": "DeliveryTimeSlot",
          "description": "data type of delivery timeslot"
      },
      "District": {
          "type": "object",
          "properties": {
              "isocode": {
                  "type": "string",
                  "description": "ISO 3166-1 alpha-2 standard, e.g.[countryIso]-[regionNumber]-[cityNumber]-[districtNumber]"
              },
              "name": {
                  "type": "string",
                  "example": "Dongcheng District, Fengtai District, Daxing District",
                  "description": "name of district"
              }
          },
          "title": "District",
          "description": "data object of district"
      },
      "EntryGroup": {
          "type": "object",
          "properties": {
              "entries": {
                  "type": "array",
                  "description": "List of order entries",
                  "items": {
                      "$ref": "#/definitions/OrderEntry"
                  }
              },
              "entryGroupNumber": {
                  "type": "integer",
                  "format": "int32",
                  "example": 1,
                  "description": "Identifier of the entry group"
              },
              "entryGroups": {
                  "type": "array",
                  "description": "List of child entry groups",
                  "items": {
                      "$ref": "#/definitions/EntryGroup"
                  }
              },
              "erroneous": {
                  "type": "boolean",
                  "example": true,
                  "description": "Indicates if the entry group is in an error state"
              },
              "label": {
                  "type": "string",
                  "example": "Photo On The Go Package",
                  "description": "Label for the entry group"
              },
              "type": {
                  "type": "string",
                  "example": "STANDALONE",
                  "description": "Indicates type of the group, possible values are STANDALONE, CONFIGURABLEBUNDLE or any customer implemented type for any new provider"
              }
          },
          "title": "EntryGroup",
          "description": "Representation of an Entry Group"
      },
      "Facet": {
          "type": "object",
          "properties": {
              "category": {
                  "type": "boolean",
                  "description": "Flag stating if facet is category facet"
              },
              "multiSelect": {
                  "type": "boolean",
                  "description": "Flag stating if facet is multiSelect"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the facet"
              },
              "priority": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Priority value of the facet"
              },
              "topValues": {
                  "type": "array",
                  "description": "List of top facet values",
                  "items": {
                      "$ref": "#/definitions/FacetValue"
                  }
              },
              "values": {
                  "type": "array",
                  "description": "List of all facet values",
                  "items": {
                      "$ref": "#/definitions/FacetValue"
                  }
              },
              "visible": {
                  "type": "boolean",
                  "description": "Flag stating if facet is visible"
              }
          },
          "title": "Facet",
          "description": "Representation of a Facet"
      },
      "FacetValue": {
          "type": "object",
          "properties": {
              "count": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Count of the facet value"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the facet value"
              },
              "query": {
                  "description": "Query of the facet value",
                  "$ref": "#/definitions/SearchState"
              },
              "selected": {
                  "type": "boolean",
                  "description": "Flag stating if facet value is selected"
              }
          },
          "title": "FacetValue",
          "description": "Representation of a Facet Value"
      },
      "Feature": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string",
                  "description": "Code of the feature"
              },
              "comparable": {
                  "type": "boolean",
                  "description": "Flag defining it feature is comparable"
              },
              "description": {
                  "type": "string",
                  "description": "Description of the feature"
              },
              "featureUnit": {
                  "description": "Feature unit",
                  "$ref": "#/definitions/FeatureUnit"
              },
              "featureValues": {
                  "type": "array",
                  "description": "List of feature values",
                  "items": {
                      "$ref": "#/definitions/FeatureValue"
                  }
              },
              "name": {
                  "type": "string",
                  "description": "Name of the feature"
              },
              "range": {
                  "type": "boolean",
                  "description": "Range number of the reature"
              },
              "type": {
                  "type": "string",
                  "description": "Type of the feature"
              }
          },
          "title": "Feature",
          "description": "Representation of a Feature"
      },
      "FeatureUnit": {
          "type": "object",
          "properties": {
              "name": {
                  "type": "string",
                  "description": "Name of the feature unit"
              },
              "symbol": {
                  "type": "string",
                  "description": "Symbol of the feature unit"
              },
              "unitType": {
                  "type": "string",
                  "description": "Type of the feature unit"
              }
          },
          "title": "FeatureUnit",
          "description": "Representation of a Feature Unit"
      },
      "FeatureValue": {
          "type": "object",
          "properties": {
              "value": {
                  "type": "string",
                  "description": "Value of the feature"
              }
          },
          "title": "FeatureValue",
          "description": "Representation of a Feature Value"
      },
      "FutureStock": {
          "type": "object",
          "properties": {
              "date": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date of future stock"
              },
              "formattedDate": {
                  "type": "string",
                  "description": "Date of future stock expressed in text value"
              },
              "stock": {
                  "description": "Stock information of future stock",
                  "$ref": "#/definitions/Stock"
              }
          },
          "title": "FutureStock",
          "description": "Representation of a Future Stock"
      },
      "GeoPoint": {
          "type": "object",
          "properties": {
              "latitude": {
                  "type": "number",
                  "format": "double",
                  "description": "Geopoint latitude"
              },
              "longitude": {
                  "type": "number",
                  "format": "double",
                  "description": "Geopoint longitude"
              }
          },
          "title": "GeoPoint",
          "description": "Representation of a GeoPoint"
      },
      "Image": {
          "type": "object",
          "properties": {
              "altText": {
                  "type": "string",
                  "description": "Tooltip content which is visible while image mouse hovering"
              },
              "format": {
                  "type": "string",
                  "description": "Format of the image, can be zoom, product, thumbnail, store, cartIcon, etc."
              },
              "galleryIndex": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Index of the image while displayed in gallery"
              },
              "imageType": {
                  "type": "string",
                  "description": "Type of the image, can be PRIMARY or GALLERY",
                  "enum": [
                      "PRIMARY",
                      "GALLERY"
                  ]
              },
              "url": {
                  "type": "string",
                  "description": "URL address of the image"
              }
          },
          "title": "Image",
          "description": "Representation of an Image"
      },
      "Language": {
          "type": "object",
          "properties": {
              "active": {
                  "type": "boolean",
                  "description": "true/false indicator when the language is active"
              },
              "isocode": {
                  "type": "string",
                  "description": "iso code of the language"
              },
              "name": {
                  "type": "string",
                  "description": "name of the language"
              },
              "nativeName": {
                  "type": "string",
                  "description": "name the language in native form"
              }
          },
          "title": "Language",
          "description": "Representation of a Language"
      },
      "LanguageList": {
          "type": "object",
          "properties": {
              "languages": {
                  "type": "array",
                  "description": "This is the list of Language fields that should be returned in the response body",
                  "items": {
                      "$ref": "#/definitions/Language"
                  }
              }
          },
          "title": "LanguageList",
          "description": "Lists all available languages (all languages used for a particular store). If the list of languages for a base store is empty, a list of all languages available in the system will be returned"
      },
      "ListAdaptedComponents": {
          "type": "object",
          "properties": {
              "component": {
                  "type": "array",
                  "items": {
                      "$ref": "#/definitions/ComponentAdaptedData"
                  }
              },
              "pagination": {
                  "$ref": "#/definitions/pagination"
              },
              "sorts": {
                  "type": "array",
                  "items": {
                      "$ref": "#/definitions/sort"
                  }
              }
          },
          "title": "ListAdaptedComponents"
      },
      "ListAdaptedPages": {
          "type": "object",
          "properties": {
              "page": {
                  "type": "array",
                  "items": {
                      "$ref": "#/definitions/PageAdaptedData"
                  }
              },
              "pagination": {
                  "$ref": "#/definitions/pagination"
              },
              "sorts": {
                  "type": "array",
                  "items": {
                      "$ref": "#/definitions/sort"
                  }
              }
          },
          "title": "ListAdaptedPages",
          "xml": {
              "name": "pages",
              "attribute": false,
              "wrapped": false
          }
      },
      "MemberList": {
          "type": "object",
          "properties": {
              "members": {
                  "type": "array",
                  "description": "List of member",
                  "items": {
                      "$ref": "#/definitions/Principal"
                  }
              }
          },
          "title": "MemberList",
          "description": "Representation of a Member List"
      },
      "OpeningSchedule": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string",
                  "description": "Code of the opening schedule"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the opening schedule"
              },
              "specialDayOpeningList": {
                  "type": "array",
                  "description": "List of special opening days",
                  "items": {
                      "$ref": "#/definitions/SpecialOpeningDay"
                  }
              },
              "weekDayOpeningList": {
                  "type": "array",
                  "description": "List of weekday opening days",
                  "items": {
                      "$ref": "#/definitions/WeekdayOpeningDay"
                  }
              }
          },
          "title": "OpeningSchedule",
          "description": "Representation of an Opening schedule"
      },
      "Order": {
          "type": "object",
          "properties": {
              "appliedOrderPromotions": {
                  "type": "array",
                  "description": "List of applied order promotions",
                  "items": {
                      "$ref": "#/definitions/PromotionResult"
                  }
              },
              "appliedProductPromotions": {
                  "type": "array",
                  "description": "List of applied product promotions",
                  "items": {
                      "$ref": "#/definitions/PromotionResult"
                  }
              },
              "appliedVouchers": {
                  "type": "array",
                  "description": "List of applied vouchers",
                  "items": {
                      "$ref": "#/definitions/Voucher"
                  }
              },
              "calculated": {
                  "type": "boolean",
                  "description": "Flag showing if order is calculated"
              },
              "cancellable": {
                  "type": "boolean",
                  "example": true,
                  "description": "Boolean flag showing if order is cancellable"
              },
              "chinesePaymentInfo": {
                  "description": "Chinese payment info",
                  "$ref": "#/definitions/ChinesePaymentInfo"
              },
              "code": {
                  "type": "string",
                  "description": "Code number of order"
              },
              "consignments": {
                  "type": "array",
                  "description": "List of consignment",
                  "items": {
                      "$ref": "#/definitions/Consignment"
                  }
              },
              "costCenter": {
                  "description": "Cost Center associated with the order",
                  "$ref": "#/definitions/B2BCostCenter"
              },
              "created": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date of order creation"
              },
              "deliveryAddress": {
                  "description": "Delivery address",
                  "$ref": "#/definitions/Address"
              },
              "deliveryCost": {
                  "description": "Delivery cost",
                  "$ref": "#/definitions/Price"
              },
              "deliveryItemsQuantity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Quantity of delivery items"
              },
              "deliveryMode": {
                  "description": "Delivery mode information",
                  "$ref": "#/definitions/DeliveryMode"
              },
              "deliveryOrderGroups": {
                  "type": "array",
                  "description": "List of delivery order entries group",
                  "items": {
                      "$ref": "#/definitions/DeliveryOrderEntryGroup"
                  }
              },
              "deliveryStatus": {
                  "type": "string",
                  "description": "Order delivery status"
              },
              "deliveryStatusDisplay": {
                  "type": "string",
                  "description": "Order delivery status display"
              },
              "deliveryTimeSlot": {
                  "$ref": "#/definitions/DeliveryTimeSlot"
              },
              "entries": {
                  "type": "array",
                  "description": "List of order entries",
                  "items": {
                      "$ref": "#/definitions/OrderEntry"
                  }
              },
              "entryGroups": {
                  "type": "array",
                  "description": "List of entry groups",
                  "items": {
                      "$ref": "#/definitions/EntryGroup"
                  }
              },
              "guestCustomer": {
                  "type": "boolean",
                  "description": "Flag showing if customer is Guest customer"
              },
              "guid": {
                  "type": "string",
                  "description": "Guest user id identifier"
              },
              "net": {
                  "type": "boolean",
                  "description": "Flag stating iv value is net-value"
              },
              "orderDiscounts": {
                  "description": "Order discounts",
                  "$ref": "#/definitions/Price"
              },
              "orgCustomer": {
                  "description": "Customer who placed the order",
                  "$ref": "#/definitions/User"
              },
              "paymentAddress": {
                  "$ref": "#/definitions/Address"
              },
              "paymentInfo": {
                  "description": "Payment information",
                  "$ref": "#/definitions/PaymentDetails"
              },
              "paymentStatus": {
                  "type": "string",
                  "example": "PAID",
                  "description": "Payment status"
              },
              "permissionResults": {
                  "type": "array",
                  "description": "Results of permissions associated with the order",
                  "items": {
                      "$ref": "#/definitions/OrderApprovalPermissionResult"
                  }
              },
              "pickupItemsQuantity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Quantity of pickup items"
              },
              "pickupOrderGroups": {
                  "type": "array",
                  "description": "List of pickup order entry group",
                  "items": {
                      "$ref": "#/definitions/PickupOrderEntryGroup"
                  }
              },
              "productDiscounts": {
                  "description": "Product discounts",
                  "$ref": "#/definitions/Price"
              },
              "purchaseOrderNumber": {
                  "type": "string",
                  "description": "Purchase order number"
              },
              "returnable": {
                  "type": "boolean",
                  "example": true,
                  "description": "Boolean flag showing if order is returnable"
              },
              "site": {
                  "type": "string",
                  "description": "Site"
              },
              "status": {
                  "type": "string",
                  "description": "Status of order"
              },
              "statusDisplay": {
                  "type": "string",
                  "description": "Status display"
              },
              "store": {
                  "type": "string",
                  "description": "Store"
              },
              "subTotal": {
                  "description": "Subtotal price",
                  "$ref": "#/definitions/Price"
              },
              "taxInvoice": {
                  "$ref": "#/definitions/TaxInvoice"
              },
              "totalDiscounts": {
                  "description": "Total discounts",
                  "$ref": "#/definitions/Price"
              },
              "totalItems": {
                  "type": "integer",
                  "format": "int32"
              },
              "totalPrice": {
                  "description": "Total price value",
                  "$ref": "#/definitions/Price"
              },
              "totalPriceWithTax": {
                  "description": "Total price with tax",
                  "$ref": "#/definitions/Price"
              },
              "totalTax": {
                  "description": "Total tax price",
                  "$ref": "#/definitions/Price"
              },
              "totalUnitCount": {
                  "type": "integer",
                  "format": "int32"
              },
              "unconsignedEntries": {
                  "type": "array",
                  "description": "List of unconsigned order entries",
                  "items": {
                      "$ref": "#/definitions/OrderEntry"
                  }
              },
              "user": {
                  "description": "User information",
                  "$ref": "#/definitions/Principal"
              }
          },
          "title": "Order",
          "description": "Representation of an Order"
      },
      "OrderApproval": {
          "type": "object",
          "required": [
              "code"
          ],
          "properties": {
              "approvalDecisionRequired": {
                  "type": "boolean",
                  "description": "Boolean flag which states whether an approval decision is required."
              },
              "code": {
                  "type": "string",
                  "example": "00000005",
                  "description": "Code that identifies the approval."
              },
              "customerOrderApprovalRecords": {
                  "type": "array",
                  "description": "Customer approval records related to this order approval.",
                  "items": {
                      "$ref": "#/definitions/OrderApprovalRecord"
                  }
              },
              "merchantOrderApprovalRecords": {
                  "type": "array",
                  "description": "Merchant approval records related to this order approval.",
                  "items": {
                      "$ref": "#/definitions/OrderApprovalRecord"
                  }
              },
              "order": {
                  "description": "Order linked to this approval.",
                  "$ref": "#/definitions/Order"
              },
              "trigger": {
                  "description": "Replenishment trigger if this is an approval for a replenishment order.",
                  "$ref": "#/definitions/Trigger"
              }
          },
          "title": "OrderApproval",
          "description": "Details of one specific order approval"
      },
      "OrderApprovalDecision": {
          "type": "object",
          "required": [
              "decision"
          ],
          "properties": {
              "comment": {
                  "type": "string",
                  "example": "Rejected because montly budget was exceeded",
                  "description": "Any comments the approver (or the workflow system) adds when approving/rejecting an order."
              },
              "decision": {
                  "type": "string",
                  "example": "APPROVE",
                  "description": "Decision from the approver when approving/rejecting an order. Typical decisions are: APPROVE, REJECT"
              }
          },
          "title": "OrderApprovalDecision",
          "description": "Decision for an order approval"
      },
      "OrderApprovalList": {
          "type": "object",
          "required": [
              "orderApprovals",
              "pagination",
              "sorts"
          ],
          "properties": {
              "orderApprovals": {
                  "type": "array",
                  "description": "List of Order Approvals",
                  "items": {
                      "$ref": "#/definitions/OrderApproval"
                  }
              },
              "pagination": {
                  "description": "Pagination items",
                  "$ref": "#/definitions/deprecatedPagination"
              },
              "sorts": {
                  "type": "array",
                  "description": "List of sorts",
                  "items": {
                      "$ref": "#/definitions/Sort"
                  }
              }
          },
          "title": "OrderApprovalList",
          "description": "Representation of a Order Approval List"
      },
      "OrderApprovalPermission": {
          "type": "object",
          "required": [
              "code"
          ],
          "properties": {
              "active": {
                  "type": "boolean",
                  "example": true,
                  "description": "Boolean flag of whether Order Approval Permission is active"
              },
              "code": {
                  "type": "string",
                  "example": "Rustic_10K_USD_MONTH",
                  "description": "Code of the Order Approval Permission"
              },
              "currency": {
                  "description": "Currency of the Order Approval Permission, used for type B2BOrderThresholdPermission and B2BOrderThresholdTimespanPermission",
                  "$ref": "#/definitions/Currency"
              },
              "orderApprovalPermissionType": {
                  "description": "Type of the Order Approval Permission",
                  "$ref": "#/definitions/OrderApprovalPermissionType"
              },
              "orgUnit": {
                  "description": "Order Approval Permission's organizational unit",
                  "$ref": "#/definitions/B2BUnit"
              },
              "periodRange": {
                  "type": "string",
                  "example": "MONTH",
                  "description": "Period range of the Order Approval Permission, used for type B2BOrderThresholdTimespanPermission",
                  "enum": [
                      "DAY",
                      "WEEK",
                      "MONTH",
                      "QUARTER",
                      "YEAR"
                  ]
              },
              "selected": {
                  "type": "boolean",
                  "example": true,
                  "description": "Boolean flag of whether the user is selected"
              },
              "threshold": {
                  "type": "number",
                  "format": "double",
                  "example": 10000.0,
                  "description": "Threshold value of the Order Approval Permission, used for type B2BOrderThresholdPermission and B2BOrderThresholdTimespanPermission"
              }
          },
          "title": "OrderApprovalPermission",
          "description": "Request body fields required and optional to operate on Order Approval Permission data."
      },
      "OrderApprovalPermissionList": {
          "type": "object",
          "required": [
              "orderApprovalPermissions",
              "pagination",
              "sorts"
          ],
          "properties": {
              "orderApprovalPermissions": {
                  "type": "array",
                  "description": "List of Order Approval Permissions",
                  "items": {
                      "$ref": "#/definitions/OrderApprovalPermission"
                  }
              },
              "pagination": {
                  "description": "Pagination items",
                  "$ref": "#/definitions/deprecatedPagination"
              },
              "sorts": {
                  "type": "array",
                  "description": "List of sorts",
                  "items": {
                      "$ref": "#/definitions/Sort"
                  }
              }
          },
          "title": "OrderApprovalPermissionList",
          "description": "Representation of a Order Approval Permission List"
      },
      "OrderApprovalPermissionResult": {
          "type": "object",
          "properties": {
              "approverName": {
                  "type": "string",
                  "description": "Name of the approver responsible for this permission result."
              },
              "approverNotes": {
                  "type": "string",
                  "example": "The order is rejected due to insufficient budget",
                  "description": "Any comments the approver added to the approval item."
              },
              "permissionType": {
                  "description": "Permission type related to the permission result.",
                  "$ref": "#/definitions/OrderApprovalPermissionType"
              },
              "statusDisplay": {
                  "type": "string",
                  "example": "Pending approval",
                  "description": "Status of the order approval."
              }
          },
          "title": "OrderApprovalPermissionResult",
          "description": "Details of an order approval permission result related to an order"
      },
      "OrderApprovalPermissionType": {
          "type": "object",
          "required": [
              "code"
          ],
          "properties": {
              "code": {
                  "type": "string",
                  "example": "B2BOrderThresholdTimespanPermission",
                  "description": "Code of the Order Approval Permission Type"
              },
              "name": {
                  "type": "string",
                  "example": "Allowed Order Threshold (per timespan)",
                  "description": "Name of the Order Approval Permission Type"
              }
          },
          "title": "OrderApprovalPermissionType",
          "description": "Request body fields required and optional to operate on Order Approval Permission Type data. Typical permission types are: B2BBudgetExceededPermission, B2BOrderThresholdTimespanPermission and B2BOrderThresholdPermission"
      },
      "OrderApprovalPermissionTypeList": {
          "type": "object",
          "required": [
              "orderApprovalPermissionTypes"
          ],
          "properties": {
              "orderApprovalPermissionTypes": {
                  "type": "array",
                  "description": "List of Order Approval Permission Types",
                  "items": {
                      "$ref": "#/definitions/OrderApprovalPermissionType"
                  }
              }
          },
          "title": "OrderApprovalPermissionTypeList",
          "description": "Representation of an Order Approval Permission Type list"
      },
      "OrderApprovalRecord": {
          "type": "object",
          "properties": {
              "approver": {
                  "description": "Principal responsible to this approval record.",
                  "$ref": "#/definitions/Principal"
              },
              "comments": {
                  "type": "string",
                  "example": "Submitted for approval",
                  "description": "Any comments the approver (or the workflow system) added to the approval item."
              },
              "permissionTypes": {
                  "type": "array",
                  "description": "List of permission types related to this approval record.",
                  "items": {
                      "$ref": "#/definitions/OrderApprovalPermissionType"
                  }
              },
              "statusDisplay": {
                  "type": "string",
                  "example": "Pending approval",
                  "description": "Status of the order approval."
              }
          },
          "title": "OrderApprovalRecord",
          "description": "Details of one order approval record"
      },
      "OrderEntry": {
          "type": "object",
          "properties": {
              "basePrice": {
                  "description": "Base price of order entry item",
                  "$ref": "#/definitions/Price"
              },
              "cancellableQuantity": {
                  "type": "integer",
                  "format": "int64",
                  "example": 5,
                  "description": "Quantity number of cancellable items in order entry"
              },
              "cancelledItemsPrice": {
                  "description": "Total price of cancelled items which belong to the order entry item",
                  "$ref": "#/definitions/Price"
              },
              "comments": {
                  "type": "array",
                  "description": "List of order entry comments.",
                  "items": {
                      "$ref": "#/definitions/Comment"
                  }
              },
              "configurationInfos": {
                  "type": "array",
                  "description": "Configuration info of order entry",
                  "items": {
                      "$ref": "#/definitions/ConfigurationInfo"
                  }
              },
              "deliveryMode": {
                  "description": "Delivery mode",
                  "$ref": "#/definitions/DeliveryMode"
              },
              "deliveryPointOfService": {
                  "description": "Point of service associated with order entry",
                  "$ref": "#/definitions/PointOfService"
              },
              "entryNumber": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Entry number of the order entry"
              },
              "product": {
                  "description": "Product details of order entry",
                  "$ref": "#/definitions/Product"
              },
              "quantity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Quantity number of items in order entry"
              },
              "quantityAllocated": {
                  "type": "integer",
                  "format": "int64"
              },
              "quantityCancelled": {
                  "type": "integer",
                  "format": "int64"
              },
              "quantityPending": {
                  "type": "integer",
                  "format": "int64"
              },
              "quantityReturned": {
                  "type": "integer",
                  "format": "int64"
              },
              "quantityShipped": {
                  "type": "integer",
                  "format": "int64"
              },
              "quantityUnallocated": {
                  "type": "integer",
                  "format": "int64"
              },
              "returnableQuantity": {
                  "type": "integer",
                  "format": "int64",
                  "example": 5,
                  "description": "Quantity number of returnable items in order entry"
              },
              "returnedItemsPrice": {
                  "description": "Total price of returned items which belong to the order entry item",
                  "$ref": "#/definitions/Price"
              },
              "statusSummaryList": {
                  "type": "array",
                  "description": "List of aggregated status information per entry, relevant if the entry is configurable and its configuration contains one or many issues in different severities. Note that configurators typically raise such issues only in case the parent document is changeable. In this case the issues (depending on their severity) need to be fixed before a checkout can be done. This means this segment can be present for a cart entry, for order entries it will always be empty",
                  "items": {
                      "$ref": "#/definitions/StatusSummary"
                  }
              },
              "totalPrice": {
                  "description": "Total price of order entry item",
                  "$ref": "#/definitions/Price"
              },
              "updateable": {
                  "type": "boolean",
                  "description": "Flag defining if order entry item is updateable"
              },
              "url": {
                  "type": "string"
              }
          },
          "title": "OrderEntry",
          "description": "Representation of an Order entry"
      },
      "OrderEntryList": {
          "type": "object",
          "properties": {
              "orderEntries": {
                  "type": "array",
                  "description": "List of order entries",
                  "items": {
                      "$ref": "#/definitions/OrderEntry"
                  }
              }
          },
          "title": "OrderEntryList",
          "description": "Representation of an Order entry list consumed"
      },
      "OrderForm": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string"
              },
              "currency": {
                  "$ref": "#/definitions/Currency"
              },
              "description": {
                  "type": "string"
              },
              "entries": {
                  "type": "array",
                  "items": {
                      "$ref": "#/definitions/OrderFormEntry"
                  }
              },
              "user": {
                  "$ref": "#/definitions/Principal"
              }
          },
          "title": "OrderForm"
      },
      "OrderFormEntry": {
          "type": "object",
          "properties": {
              "quantity": {
                  "type": "integer",
                  "format": "int32"
              },
              "sku": {
                  "type": "string"
              }
          },
          "title": "OrderFormEntry"
      },
      "OrderFormList": {
          "type": "object",
          "properties": {
              "orderForms": {
                  "type": "array",
                  "items": {
                      "$ref": "#/definitions/OrderForm"
                  }
              }
          },
          "title": "OrderFormList"
      },
      "OrderHistory": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string",
                  "description": "Code of Order History"
              },
              "costCenter": {
                  "description": "Order Cost Center",
                  "$ref": "#/definitions/B2BCostCenter"
              },
              "guid": {
                  "type": "string",
                  "description": "Guest user identifier"
              },
              "placed": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date of placing order"
              },
              "purchaseOrderNumber": {
                  "type": "string",
                  "description": "Purchase order number"
              },
              "status": {
                  "type": "string",
                  "description": "Status of Order History"
              },
              "statusDisplay": {
                  "type": "string",
                  "description": "Status display"
              },
              "total": {
                  "description": "Total price",
                  "$ref": "#/definitions/Price"
              }
          },
          "title": "OrderHistory",
          "description": "Representation of an Order History"
      },
      "OrderHistoryList": {
          "type": "object",
          "properties": {
              "orders": {
                  "type": "array",
                  "description": "List of order history items",
                  "items": {
                      "$ref": "#/definitions/OrderHistory"
                  }
              },
              "pagination": {
                  "description": "Pagination items",
                  "$ref": "#/definitions/deprecatedPagination"
              },
              "sorts": {
                  "type": "array",
                  "description": "List of sorts",
                  "items": {
                      "$ref": "#/definitions/Sort"
                  }
              }
          },
          "title": "OrderHistoryList",
          "description": "Representation of an Order History List"
      },
      "OrderStatusUpdateElement": {
          "type": "object",
          "properties": {
              "baseSiteId": {
                  "type": "string",
                  "description": "BaseSite identifier"
              },
              "code": {
                  "type": "string",
                  "description": "Code of update element of order status"
              },
              "status": {
                  "type": "string",
                  "description": "Status of update element"
              }
          },
          "title": "OrderStatusUpdateElement",
          "description": "Representation of an Order Status Update Element"
      },
      "OrderStatusUpdateElementList": {
          "type": "object",
          "properties": {
              "orderStatusUpdateElements": {
                  "type": "array",
                  "description": "List of order status update elements",
                  "items": {
                      "$ref": "#/definitions/OrderStatusUpdateElement"
                  }
              }
          },
          "title": "OrderStatusUpdateElementList",
          "description": "Representation of an Order Status Update Element List"
      },
      "OrgCustomerCreation": {
          "type": "object",
          "properties": {
              "email": {
                  "type": "string",
                  "example": "akiro.nakamura@rustic-hw.com",
                  "description": "Email of the user"
              },
              "firstName": {
                  "type": "string",
                  "example": "Akiro",
                  "description": "First name of the user"
              },
              "lastName": {
                  "type": "string",
                  "example": "Nakamura",
                  "description": "Last name of the user"
              },
              "orgUnit": {
                  "example": "Rustic",
                  "description": "The unit of the user",
                  "$ref": "#/definitions/B2BUnit"
              },
              "roles": {
                  "type": "array",
                  "description": "List of organizational approvers",
                  "items": {
                      "type": "string"
                  }
              },
              "titleCode": {
                  "type": "string",
                  "example": "mr",
                  "description": "Code of the user's title"
              }
          },
          "title": "OrgCustomerCreation",
          "description": "Representation of data used for user creation operations. Consists of fields used to create customer"
      },
      "OrgCustomerModification": {
          "type": "object",
          "properties": {
              "active": {
                  "type": "boolean",
                  "example": true,
                  "description": "Boolean flag of whether the user is active/enabled or not"
              },
              "email": {
                  "type": "string",
                  "example": "akiro.nakamura@rustic-hw.com",
                  "description": "Email of the user"
              },
              "firstName": {
                  "type": "string",
                  "example": "Akiro",
                  "description": "First name of the user"
              },
              "lastName": {
                  "type": "string",
                  "example": "Nakamura",
                  "description": "Last name of the user"
              },
              "orgUnit": {
                  "example": "Rustic",
                  "description": "The unit of the user",
                  "$ref": "#/definitions/B2BUnit"
              },
              "password": {
                  "type": "string",
                  "description": "Password of the user"
              },
              "roles": {
                  "type": "array",
                  "description": "List of organizational approvers",
                  "items": {
                      "type": "string"
                  }
              },
              "titleCode": {
                  "type": "string",
                  "example": "mr",
                  "description": "Code of the user's title"
              }
          },
          "title": "OrgCustomerModification",
          "description": "Representation of data used for user modification operations. Consists of fields used to modify customer"
      },
      "OrgUnitUserGroup": {
          "type": "object",
          "properties": {
              "members": {
                  "type": "array",
                  "description": "List of members",
                  "items": {
                      "$ref": "#/definitions/Principal"
                  }
              },
              "membersCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of members"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the user"
              },
              "orgUnit": {
                  "description": "Organizational Unit of the user group",
                  "$ref": "#/definitions/B2BUnit"
              },
              "permissions": {
                  "type": "array",
                  "description": "Order approval permission of the user group",
                  "items": {
                      "$ref": "#/definitions/OrderApprovalPermission"
                  }
              },
              "roles": {
                  "type": "array",
                  "description": "List of Roles",
                  "items": {
                      "type": "string"
                  }
              },
              "selected": {
                  "type": "boolean",
                  "example": true,
                  "description": "Boolean flag of whether a user group is selected or not"
              },
              "subGroups": {
                  "type": "array",
                  "description": "List of subgroups",
                  "items": {
                      "$ref": "#/definitions/UserGroup"
                  }
              },
              "uid": {
                  "type": "string",
                  "description": "Unique user identifier"
              }
          },
          "title": "OrgUnitUserGroup"
      },
      "OrgUnitUserGroupList": {
          "type": "object",
          "required": [
              "orgUnitUserGroups",
              "pagination",
              "sorts"
          ],
          "properties": {
              "orgUnitUserGroups": {
                  "type": "array",
                  "description": "List of organizational unit user groups",
                  "items": {
                      "$ref": "#/definitions/OrgUnitUserGroup"
                  }
              },
              "pagination": {
                  "description": "Pagination items",
                  "$ref": "#/definitions/deprecatedPagination"
              },
              "sorts": {
                  "type": "array",
                  "description": "List of sorts",
                  "items": {
                      "$ref": "#/definitions/Sort"
                  }
              }
          },
          "title": "OrgUnitUserGroupList",
          "description": "Representation of an user list used in organizational units"
      },
      "OrgUnitUserList": {
          "type": "object",
          "required": [
              "pagination",
              "sorts",
              "users"
          ],
          "properties": {
              "pagination": {
                  "description": "Pagination items",
                  "$ref": "#/definitions/deprecatedPagination"
              },
              "sorts": {
                  "type": "array",
                  "description": "List of sorts",
                  "items": {
                      "$ref": "#/definitions/Sort"
                  }
              },
              "users": {
                  "type": "array",
                  "description": "List of users",
                  "items": {
                      "$ref": "#/definitions/User"
                  }
              }
          },
          "title": "OrgUnitUserList",
          "description": "Representation of an user list used in organizational units"
      },
      "PackagingInfo": {
          "type": "object",
          "properties": {
              "dimensionUnit": {
                  "type": "string"
              },
              "grossWeight": {
                  "type": "string"
              },
              "height": {
                  "type": "string"
              },
              "insuredValue": {
                  "type": "string"
              },
              "length": {
                  "type": "string"
              },
              "weightUnit": {
                  "type": "string"
              },
              "width": {
                  "type": "string"
              }
          },
          "title": "PackagingInfo"
      },
      "PageAdaptedData": {
          "type": "object",
          "title": "PageAdaptedData",
          "properties": {
            "uuid": {
                "type": "string"
            },
            "title": {
                "type": "string"
            },
            "template": {
                "type": "string"
            },
            "typeCode": {
                "type": "string"
            },
            "name": {
                "type": "string"
            },
            "robotTag": {
                "type": "string"
            },
            "label": {
                "type": "string"
            }
        }
      },
      "PaymentDetails": {
          "type": "object",
          "properties": {
              "accountHolderName": {
                  "type": "string",
                  "description": "Name of account holder"
              },
              "billingAddress": {
                  "description": "Address details to be considered as billing address",
                  "$ref": "#/definitions/Address"
              },
              "cardNumber": {
                  "type": "string",
                  "description": "Payment card number"
              },
              "cardType": {
                  "description": "Type of payment card",
                  "$ref": "#/definitions/CardType"
              },
              "defaultPayment": {
                  "type": "boolean",
                  "description": "Flag to mark if payment the default one"
              },
              "expiryMonth": {
                  "type": "string",
                  "description": "Month of expiration of payment"
              },
              "expiryYear": {
                  "type": "string",
                  "description": "Year of expiration of payment"
              },
              "id": {
                  "type": "string",
                  "description": "Unique identifier of payment detail"
              },
              "issueNumber": {
                  "type": "string",
                  "description": "Issue number"
              },
              "saved": {
                  "type": "boolean",
                  "description": "Flag to mark if payment is saved one"
              },
              "startMonth": {
                  "type": "string",
                  "description": "Start month from which payment is valid"
              },
              "startYear": {
                  "type": "string",
                  "description": "Start year from which payment is valid"
              },
              "subscriptionId": {
                  "type": "string",
                  "description": "Identifier of subscription"
              }
          },
          "title": "PaymentDetails",
          "description": "Representation of a Payment Details"
      },
      "PaymentDetailsList": {
          "type": "object",
          "properties": {
              "payments": {
                  "type": "array",
                  "description": "List of payment details",
                  "items": {
                      "$ref": "#/definitions/PaymentDetails"
                  }
              }
          },
          "title": "PaymentDetailsList",
          "description": "Representation of a Payment details list"
      },
      "PaymentMode": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string",
                  "description": "Payment mode code"
              },
              "description": {
                  "type": "string",
                  "description": "Payment mode description"
              },
              "name": {
                  "type": "string",
                  "description": "Payment mode name"
              },
              "pspLogoUrl": {
                  "type": "string",
                  "example": "/medias/wechatpay.png?context=CONTEXT",
                  "description": "Logo url of payment mode"
              }
          },
          "title": "PaymentMode",
          "description": "Representation of a Payment Mode"
      },
      "PaymentModeList": {
          "type": "object",
          "properties": {
              "paymentModes": {
                  "type": "array",
                  "description": "List of payment modes",
                  "items": {
                      "$ref": "#/definitions/PaymentMode"
                  }
              }
          },
          "title": "PaymentModeList",
          "description": "Representation of a Payment Mode List"
      },
      "PaymentRequest": {
          "type": "object",
          "properties": {
              "mappingLabels": {
                  "type": "object",
                  "additionalProperties": {
                      "type": "string"
                  }
              },
              "parameters": {
                  "type": "object",
                  "additionalProperties": {
                      "type": "string"
                  }
              },
              "postUrl": {
                  "type": "string"
              }
          },
          "title": "PaymentRequest"
      },
      "PickupOrderEntryGroup": {
          "type": "object",
          "properties": {
              "deliveryPointOfService": {
                  "description": "Delivery point of service",
                  "$ref": "#/definitions/PointOfService"
              },
              "distance": {
                  "type": "number",
                  "format": "double",
                  "description": "Distance calculated to pickup place"
              },
              "entries": {
                  "type": "array",
                  "description": "List of order entries",
                  "items": {
                      "$ref": "#/definitions/OrderEntry"
                  }
              },
              "quantity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Quantity of order entries in a group"
              },
              "totalPriceWithTax": {
                  "description": "Total price with tax",
                  "$ref": "#/definitions/Price"
              }
          },
          "title": "PickupOrderEntryGroup",
          "description": "Representation of a Pickup Order Entry Group"
      },
      "PointOfService": {
          "type": "object",
          "properties": {
              "address": {
                  "description": "Address information of point of service",
                  "$ref": "#/definitions/Address"
              },
              "description": {
                  "type": "string",
                  "description": "Description of the point of service"
              },
              "displayName": {
                  "type": "string",
                  "description": "Display name of the point of service"
              },
              "distanceKm": {
                  "type": "number",
                  "format": "double",
                  "description": "Distance to the point of service as number value"
              },
              "features": {
                  "type": "object",
                  "description": "List of features for a given point of service",
                  "additionalProperties": {
                      "type": "string"
                  }
              },
              "formattedDistance": {
                  "type": "string",
                  "description": "Distance to the point of service as text value"
              },
              "geoPoint": {
                  "description": "Geopoint localization info about point of service",
                  "$ref": "#/definitions/GeoPoint"
              },
              "mapIcon": {
                  "description": "Image associated with the point of service",
                  "$ref": "#/definitions/Image"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the point of service"
              },
              "openingHours": {
                  "description": "Opening hours of point of service",
                  "$ref": "#/definitions/OpeningSchedule"
              },
              "storeContent": {
                  "type": "string",
                  "description": "Store content of given point of service"
              },
              "storeImages": {
                  "type": "array",
                  "description": "Collection of images associated with a point of service",
                  "items": {
                      "$ref": "#/definitions/Image"
                  }
              },
              "url": {
                  "type": "string",
                  "description": "Url address of the point of service"
              },
              "warehouseCodes": {
                  "type": "array",
                  "items": {
                      "type": "string"
                  }
              }
          },
          "title": "PointOfService",
          "description": "Representation of a Point of service"
      },
      "PointOfServiceList": {
          "type": "object",
          "properties": {
              "pointOfServices": {
                  "type": "array",
                  "description": "List of points of service",
                  "items": {
                      "$ref": "#/definitions/PointOfService"
                  }
              }
          },
          "title": "PointOfServiceList",
          "description": "Representation of a Point of Service List"
      },
      "PointOfServiceStock": {
          "type": "object",
          "properties": {
              "address": {
                  "description": "Address information of point of service",
                  "$ref": "#/definitions/Address"
              },
              "description": {
                  "type": "string",
                  "description": "Description of the point of service"
              },
              "displayName": {
                  "type": "string",
                  "description": "Display name of the point of service"
              },
              "distanceKm": {
                  "type": "number",
                  "format": "double",
                  "description": "Distance to the point of service as number value"
              },
              "features": {
                  "type": "object",
                  "description": "List of features for a given point of service",
                  "additionalProperties": {
                      "type": "string"
                  }
              },
              "formattedDistance": {
                  "type": "string",
                  "description": "Distance to the point of service as text value"
              },
              "geoPoint": {
                  "description": "Geopoint localization info about point of service",
                  "$ref": "#/definitions/GeoPoint"
              },
              "mapIcon": {
                  "description": "Image associated with the point of service",
                  "$ref": "#/definitions/Image"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the point of service"
              },
              "openingHours": {
                  "description": "Opening hours of point of service",
                  "$ref": "#/definitions/OpeningSchedule"
              },
              "stockInfo": {
                  "description": "Stock information about point of service",
                  "$ref": "#/definitions/Stock"
              },
              "storeContent": {
                  "type": "string",
                  "description": "Store content of given point of service"
              },
              "storeImages": {
                  "type": "array",
                  "description": "Collection of images associated with a point of service",
                  "items": {
                      "$ref": "#/definitions/Image"
                  }
              },
              "url": {
                  "type": "string",
                  "description": "Url address of the point of service"
              },
              "warehouseCodes": {
                  "type": "array",
                  "items": {
                      "type": "string"
                  }
              }
          },
          "title": "PointOfServiceStock",
          "description": "Representation of a Point Of Service Stock"
      },
      "Price": {
          "type": "object",
          "properties": {
              "currencyIso": {
                  "type": "string",
                  "description": "Currency iso format"
              },
              "formattedValue": {
                  "type": "string",
                  "description": "Value of price formatted"
              },
              "maxQuantity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum quantity of the price value"
              },
              "minQuantity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Minimum quantity of the price value"
              },
              "priceType": {
                  "type": "string",
                  "description": "Type of the price",
                  "enum": [
                      "BUY",
                      "FROM"
                  ]
              },
              "value": {
                  "type": "number",
                  "description": "Value of price in BigDecimal format"
              }
          },
          "title": "Price",
          "description": "Representation of a Price"
      },
      "PriceRange": {
          "type": "object",
          "properties": {
              "maxPrice": {
                  "description": "Maximum value of the Price Range",
                  "$ref": "#/definitions/Price"
              },
              "minPrice": {
                  "description": "Minium value of the Price Range",
                  "$ref": "#/definitions/Price"
              }
          },
          "title": "PriceRange",
          "description": "Representation of a Price Range"
      },
      "Principal": {
          "type": "object",
          "properties": {
              "name": {
                  "type": "string",
                  "description": "Name of the user"
              },
              "uid": {
                  "type": "string",
                  "description": "Unique user identifier"
              }
          },
          "title": "Principal",
          "description": "Representation of a Principal webservice DTO used for defining User data types"
      },
      "Product": {
          "type": "object",
          "properties": {
              "availableForPickup": {
                  "type": "boolean",
                  "description": "Flag defining if product is available for pickup"
              },
              "averageRating": {
                  "type": "number",
                  "format": "double",
                  "description": "Rating number of average value"
              },
              "baseOptions": {
                  "type": "array",
                  "description": "List of base options related to the product",
                  "items": {
                      "$ref": "#/definitions/BaseOption"
                  }
              },
              "baseProduct": {
                  "type": "string",
                  "description": "Information about base product"
              },
              "bundleTemplates": {
                  "type": "array",
                  "description": "Set of bundle templates that are identified as starter components and can initiate a bundle in the cart",
                  "items": {
                      "$ref": "#/definitions/BundleTemplate"
                  }
              },
              "categories": {
                  "type": "array",
                  "description": "List of categories product belongs to",
                  "items": {
                      "$ref": "#/definitions/Category"
                  }
              },
              "classifications": {
                  "type": "array",
                  "description": "List of classifications related to the product",
                  "items": {
                      "$ref": "#/definitions/Classification"
                  }
              },
              "code": {
                  "type": "string",
                  "description": "Code of the product"
              },
              "configurable": {
                  "type": "boolean",
                  "description": "Flag stating if product is configurable"
              },
              "configuratorType": {
                  "type": "string",
                  "description": "Configurator type related to the product"
              },
              "description": {
                  "type": "string",
                  "description": "Description of the product"
              },
              "firstVariantCode": {
                  "type": "string"
              },
              "firstVariantImage": {
                  "type": "string"
              },
              "futureStocks": {
                  "type": "array",
                  "description": "List of future stocks",
                  "items": {
                      "$ref": "#/definitions/FutureStock"
                  }
              },
              "images": {
                  "type": "array",
                  "description": "List of images linked to product",
                  "items": {
                      "$ref": "#/definitions/Image"
                  }
              },
              "manufacturer": {
                  "type": "string",
                  "description": "Data of product manufacturer"
              },
              "multidimensional": {
                  "type": "boolean",
                  "description": "Flag stating if product is multidimentional"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the product"
              },
              "numberOfReviews": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of reviews associated with the product"
              },
              "potentialPromotions": {
                  "type": "array",
                  "description": "List of potential promotions related to the product",
                  "items": {
                      "$ref": "#/definitions/Promotion"
                  }
              },
              "price": {
                  "description": "Price of the product",
                  "$ref": "#/definitions/Price"
              },
              "priceRange": {
                  "description": "Price range assigned to the product",
                  "$ref": "#/definitions/PriceRange"
              },
              "productReferences": {
                  "type": "array",
                  "description": "List of product references",
                  "items": {
                      "$ref": "#/definitions/ProductReference"
                  }
              },
              "purchasable": {
                  "type": "boolean",
                  "description": "Flag defining if product is purchasable"
              },
              "reviews": {
                  "type": "array",
                  "description": "List of reviews associated with the product",
                  "items": {
                      "$ref": "#/definitions/Review"
                  }
              },
              "stock": {
                  "description": "Stock value of the product",
                  "$ref": "#/definitions/Stock"
              },
              "summary": {
                  "type": "string",
                  "description": "Product summary"
              },
              "tags": {
                  "type": "array",
                  "description": "Tags associated with the product",
                  "items": {
                      "type": "string"
                  }
              },
              "timedAccessPromotion": {
                  "$ref": "#/definitions/Promotion"
              },
              "url": {
                  "type": "string",
                  "description": "Url address of the product"
              },
              "variantMatrix": {
                  "type": "array",
                  "description": "List of variant matrixes associated with the product",
                  "items": {
                      "$ref": "#/definitions/VariantMatrixElement"
                  }
              },
              "variantOptions": {
                  "type": "array",
                  "description": "List of variant options related to the product",
                  "items": {
                      "$ref": "#/definitions/VariantOption"
                  }
              },
              "variantType": {
                  "type": "string",
                  "description": "Variant type of the product"
              },
              "volumePrices": {
                  "type": "array",
                  "description": "List of volume prices",
                  "items": {
                      "$ref": "#/definitions/Price"
                  }
              },
              "volumePricesFlag": {
                  "type": "boolean",
                  "description": "Flag stating if volume price should be displayed"
              }
          },
          "title": "Product",
          "description": "Representation of a Product"
      },
      "ProductExpressUpdateElement": {
          "type": "object",
          "properties": {
              "catalogId": {
                  "type": "string",
                  "description": "Catalog identifier"
              },
              "catalogVersion": {
                  "type": "string",
                  "description": "Catalog version"
              },
              "code": {
                  "type": "string",
                  "description": "Code of product express update element"
              }
          },
          "title": "ProductExpressUpdateElement",
          "description": "Representation of a Product Express Update Element"
      },
      "ProductExpressUpdateElementList": {
          "type": "object",
          "properties": {
              "productExpressUpdateElements": {
                  "type": "array",
                  "description": "List of product express update element",
                  "items": {
                      "$ref": "#/definitions/ProductExpressUpdateElement"
                  }
              }
          },
          "title": "ProductExpressUpdateElementList",
          "description": "Representation of a Product Express Update Element List"
      },
      "ProductList": {
          "type": "object",
          "properties": {
              "catalog": {
                  "type": "string",
                  "description": "Catalog of product list"
              },
              "currentPage": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of current page"
              },
              "products": {
                  "type": "array",
                  "description": "List of products",
                  "items": {
                      "$ref": "#/definitions/Product"
                  }
              },
              "totalPageCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Total page count"
              },
              "totalProductCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Total product count"
              },
              "version": {
                  "type": "string",
                  "description": "Version of product list"
              }
          },
          "title": "ProductList",
          "description": "Representation of a Product List"
      },
      "ProductReference": {
          "type": "object",
          "properties": {
              "description": {
                  "type": "string",
                  "description": "Reference description"
              },
              "preselected": {
                  "type": "boolean",
                  "description": "Flag stating if product reference is preselected"
              },
              "quantity": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Reference quantity"
              },
              "referenceType": {
                  "type": "string",
                  "description": "Reference type"
              },
              "target": {
                  "description": "Target product",
                  "$ref": "#/definitions/Product"
              }
          },
          "title": "ProductReference",
          "description": "Representation of a Product Reference"
      },
      "ProductReferenceList": {
          "type": "object",
          "properties": {
              "references": {
                  "type": "array",
                  "description": "List of product references",
                  "items": {
                      "$ref": "#/definitions/ProductReference"
                  }
              }
          },
          "title": "ProductReferenceList",
          "description": "Representation of a Product Reference List"
      },
      "ProductSearchPage": {
          "type": "object",
          "properties": {
              "breadcrumbs": {
                  "type": "array",
                  "description": "List of breadcrumbs info",
                  "items": {
                      "$ref": "#/definitions/Breadcrumb"
                  }
              },
              "categoryCode": {
                  "type": "string",
                  "description": "Code of category"
              },
              "currentQuery": {
                  "description": "Current query",
                  "$ref": "#/definitions/SearchState"
              },
              "facets": {
                  "type": "array",
                  "description": "List of facets",
                  "items": {
                      "$ref": "#/definitions/Facet"
                  }
              },
              "freeTextSearch": {
                  "type": "string",
                  "description": "Free text search"
              },
              "keywordRedirectUrl": {
                  "type": "string",
                  "description": "Redirect url address keyword"
              },
              "pagination": {
                  "description": "Pagination number",
                  "$ref": "#/definitions/deprecatedPagination"
              },
              "products": {
                  "type": "array",
                  "description": "List of products",
                  "items": {
                      "$ref": "#/definitions/Product"
                  }
              },
              "sorts": {
                  "type": "array",
                  "description": "List of sorts",
                  "items": {
                      "$ref": "#/definitions/Sort"
                  }
              },
              "spellingSuggestion": {
                  "description": "Spelling suggestion",
                  "$ref": "#/definitions/SpellingSuggestion"
              }
          },
          "title": "ProductSearchPage",
          "description": "Representation of a Product Search Page"
      },
      "Promotion": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string",
                  "description": "Code of the promotion"
              },
              "couldFireMessages": {
                  "type": "array",
                  "description": "Message about promotion which is displayed when planning potential promotion. This field has higher priority over promotion description",
                  "items": {
                      "type": "string"
                  }
              },
              "description": {
                  "type": "string",
                  "description": "Description of the promotion"
              },
              "enabled": {
                  "type": "boolean",
                  "description": "Boolean flag if promotion is enabled"
              },
              "endDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Last date of validity of the promotion"
              },
              "firedMessages": {
                  "type": "array",
                  "description": "Message fired while the promotion is active. This is info how much you will get when applying the promotion",
                  "items": {
                      "type": "string"
                  }
              },
              "priority": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Priority index as numeric value of the promotion. Higher number means higher priority"
              },
              "productBanner": {
                  "description": "Image banner of the promotion",
                  "$ref": "#/definitions/Image"
              },
              "promotionGroup": {
                  "type": "string",
                  "description": "Group of the promotion"
              },
              "promotionType": {
                  "type": "string",
                  "description": "Type of the promotion"
              },
              "restrictions": {
                  "type": "array",
                  "description": "List of promotion restrictions",
                  "items": {
                      "$ref": "#/definitions/PromotionRestriction"
                  }
              },
              "startDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The initial date of the promotion"
              },
              "title": {
                  "type": "string",
                  "description": "Promotion title"
              }
          },
          "title": "Promotion",
          "description": "Representation of a Promotion"
      },
      "PromotionList": {
          "type": "object",
          "properties": {
              "promotions": {
                  "type": "array",
                  "description": "List of promotions",
                  "items": {
                      "$ref": "#/definitions/Promotion"
                  }
              }
          },
          "title": "PromotionList",
          "description": "Representation of a Promotion list"
      },
      "PromotionOrderEntryConsumed": {
          "type": "object",
          "properties": {
              "adjustedUnitPrice": {
                  "type": "number",
                  "format": "double",
                  "description": "Adjusted unit price for promotion order entry"
              },
              "code": {
                  "type": "string",
                  "description": "Order entry code"
              },
              "orderEntryNumber": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Order entry number"
              },
              "quantity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Quantity of promotion order entry"
              }
          },
          "title": "PromotionOrderEntryConsumed",
          "description": "Representation of a Promotion order entry consumed"
      },
      "PromotionRestriction": {
          "type": "object",
          "properties": {
              "description": {
                  "type": "string",
                  "description": "Description of the promotion restriction"
              },
              "restrictionType": {
                  "type": "string",
                  "description": "Type of the promotion restriction"
              }
          },
          "title": "PromotionRestriction",
          "description": "Representation of a Promotion Restriction"
      },
      "PromotionResult": {
          "type": "object",
          "properties": {
              "consumedEntries": {
                  "type": "array",
                  "description": "List of promotion order entries consumed",
                  "items": {
                      "$ref": "#/definitions/PromotionOrderEntryConsumed"
                  }
              },
              "description": {
                  "type": "string",
                  "description": "Description of promotion result"
              },
              "promotion": {
                  "description": "Promotion information for given promotion result",
                  "$ref": "#/definitions/Promotion"
              }
          },
          "title": "PromotionResult",
          "description": "Representation of a Promotion result"
      },
      "PromotionResultList": {
          "type": "object",
          "properties": {
              "promotions": {
                  "type": "array",
                  "description": "List of promotion results",
                  "items": {
                      "$ref": "#/definitions/PromotionResult"
                  }
              }
          },
          "title": "PromotionResultList",
          "description": "Representation of a Promotion result list"
      },
      "Quote": {
          "type": "object",
          "required": [
              "code",
              "creationTime",
              "expirationTime",
              "name",
              "state",
              "threshold",
              "totalItems",
              "updatedTime",
              "version"
          ],
          "properties": {
              "allowedActions": {
                  "type": "array",
                  "description": "Actions, which are allowed to perform with the quote.",
                  "items": {
                      "type": "string"
                  }
              },
              "cartId": {
                  "type": "string",
                  "example": "000350",
                  "description": "Id of the cart, which is linked to the quote."
              },
              "code": {
                  "type": "string",
                  "example": "0003005",
                  "description": "Code of the quote."
              },
              "comments": {
                  "type": "array",
                  "description": "List of quote comments.",
                  "items": {
                      "$ref": "#/definitions/Comment"
                  }
              },
              "creationTime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "yyyy-MM-dd HH:mm:ss+0000",
                  "description": "Date of quote creation."
              },
              "description": {
                  "type": "string",
                  "example": "Quote description",
                  "description": "Description of the quote."
              },
              "entries": {
                  "type": "array",
                  "description": "Entries of the cart.",
                  "items": {
                      "$ref": "#/definitions/OrderEntry"
                  }
              },
              "expirationTime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "yyyy-MM-ddTHH:mm:ss+0000",
                  "description": "Expiration time of the quote."
              },
              "name": {
                  "type": "string",
                  "example": "Quote 0003005",
                  "description": "Name of the quote."
              },
              "orderDiscounts": {
                  "description": "Discounts available for the current order.",
                  "$ref": "#/definitions/Price"
              },
              "previousEstimatedTotal": {
                  "description": "Previously estimated total price of the quote.",
                  "$ref": "#/definitions/Price"
              },
              "productDiscounts": {
                  "description": "Discount applied to the product.",
                  "$ref": "#/definitions/Price"
              },
              "quoteDiscounts": {
                  "description": "Discounts available for the current quote.",
                  "$ref": "#/definitions/Price"
              },
              "state": {
                  "type": "string",
                  "example": "CANCELLED",
                  "description": "Current state of the quote. Possible state values - DRAFT, SUBMITTED, OFFER, CANCELLED, EXPIRED, etc.. The list of the states can be extended."
              },
              "subTotalWithDiscounts": {
                  "description": "Subtotal of the quote with applied discount.",
                  "$ref": "#/definitions/Price"
              },
              "threshold": {
                  "type": "number",
                  "format": "double",
                  "example": 25000.0,
                  "description": "Minimum subtotal value for the quote in the currency of the store."
              },
              "totalItems": {
                  "type": "integer",
                  "format": "int32",
                  "example": 2,
                  "description": "Total number of the items in the quote."
              },
              "totalPrice": {
                  "description": "Total price of the cart.",
                  "$ref": "#/definitions/Price"
              },
              "totalPriceWithTax": {
                  "description": "Total price of the cart with taxes.",
                  "$ref": "#/definitions/Price"
              },
              "updatedTime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "yyyy-MM-dd HH:mm:ss+0000",
                  "description": "Date of the last quote update."
              },
              "version": {
                  "type": "integer",
                  "format": "int32",
                  "example": 1,
                  "description": "Current version of the quote."
              }
          },
          "title": "Quote",
          "description": "Representation of the quote object."
      },
      "QuoteAction": {
          "type": "object",
          "required": [
              "action"
          ],
          "properties": {
              "action": {
                  "type": "string",
                  "example": "SUBMIT",
                  "description": "User's actions with the quote. Typical actions are: CANCEL, SUBMIT, ACCEPT, APPROVE, REJECT."
              }
          },
          "title": "QuoteAction",
          "description": "Action for the quote."
      },
      "QuoteDiscount": {
          "type": "object",
          "properties": {
              "discountRate": {
                  "type": "number",
                  "format": "double",
                  "example": 10.0,
                  "description": "Value of the discount"
              },
              "discountType": {
                  "type": "string",
                  "example": "PERCENT",
                  "description": "Type of the discount - PERCENT for discount by percentage, ABSOLUTE for discount by amount, TARGET for discount by adjustment of the total value"
              }
          },
          "title": "QuoteDiscount",
          "description": "Discount applied to the quote"
      },
      "QuoteList": {
          "type": "object",
          "properties": {
              "pagination": {
                  "description": "Pagination of quotes list.",
                  "$ref": "#/definitions/deprecatedPagination"
              },
              "quotes": {
                  "type": "array",
                  "description": "List of quotes.",
                  "items": {
                      "$ref": "#/definitions/Quote"
                  }
              }
          },
          "title": "QuoteList",
          "description": "Representation of a Quote result list."
      },
      "QuoteMetadata": {
          "type": "object",
          "required": [
              "expirationTime",
              "name"
          ],
          "properties": {
              "description": {
                  "type": "string",
                  "example": "Quote Description",
                  "description": "Description of the quote."
              },
              "expirationTime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "yyyy-MM-ddTHH:mm:ss+0000",
                  "description": "Expiration time of the quote."
              },
              "name": {
                  "type": "string",
                  "example": "Quote Name",
                  "description": "Name of the quote."
              }
          },
          "title": "QuoteMetadata",
          "description": "Representation of quote metadata."
      },
      "QuoteStarter": {
          "type": "object",
          "properties": {
              "cartId": {
                  "type": "string",
                  "example": "0003050",
                  "description": "CartId of the cart from which the quote will be created."
              },
              "quoteCode": {
                  "type": "string",
                  "example": "0003060",
                  "description": "Code of the quote for the requote action."
              }
          },
          "title": "QuoteStarter",
          "description": "Object for the quote creation, either cartId or quoteCode must be specified."
      },
      "Region": {
          "type": "object",
          "properties": {
              "countryIso": {
                  "type": "string",
                  "description": "Country code in iso format"
              },
              "isocode": {
                  "type": "string",
                  "description": "Country and Region code in iso format"
              },
              "isocodeShort": {
                  "type": "string",
                  "description": "Region code in short iso form"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the region"
              }
          },
          "title": "Region",
          "description": "Response body fields which will be returned while fetching the list of country's regions."
      },
      "RegionList": {
          "type": "object",
          "properties": {
              "regions": {
                  "type": "array",
                  "description": "This is the list of Region fields that should be returned in the response body",
                  "items": {
                      "$ref": "#/definitions/Region"
                  }
              }
          },
          "title": "RegionList",
          "description": "List of Regions"
      },
      "ReplenishmentOrder": {
          "type": "object",
          "required": [
              "replenishmentOrderCode"
          ],
          "properties": {
              "active": {
                  "type": "boolean",
                  "example": false,
                  "description": "Is the Replenishment Order active"
              },
              "appliedOrderPromotions": {
                  "type": "array",
                  "description": "List of applied order promotions",
                  "items": {
                      "$ref": "#/definitions/PromotionResult"
                  }
              },
              "appliedProductPromotions": {
                  "type": "array",
                  "description": "List of applied product promotions",
                  "items": {
                      "$ref": "#/definitions/PromotionResult"
                  }
              },
              "appliedVouchers": {
                  "type": "array",
                  "description": "List of applied vouchers",
                  "items": {
                      "$ref": "#/definitions/Voucher"
                  }
              },
              "calculated": {
                  "type": "boolean",
                  "description": "Flag showing if order is calculated"
              },
              "chinesePaymentInfo": {
                  "description": "Chinese payment info",
                  "$ref": "#/definitions/ChinesePaymentInfo"
              },
              "code": {
                  "type": "string",
                  "description": "Code number of order"
              },
              "costCenter": {
                  "$ref": "#/definitions/B2BCostCenter"
              },
              "deliveryAddress": {
                  "description": "Delivery address",
                  "$ref": "#/definitions/Address"
              },
              "deliveryCost": {
                  "description": "Delivery cost",
                  "$ref": "#/definitions/Price"
              },
              "deliveryItemsQuantity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Quantity of delivery items"
              },
              "deliveryMode": {
                  "description": "Delivery mode information",
                  "$ref": "#/definitions/DeliveryMode"
              },
              "deliveryOrderGroups": {
                  "type": "array",
                  "description": "List of delivery order entries group",
                  "items": {
                      "$ref": "#/definitions/DeliveryOrderEntryGroup"
                  }
              },
              "deliveryTimeSlot": {
                  "$ref": "#/definitions/DeliveryTimeSlot"
              },
              "description": {
                  "type": "string",
                  "description": "Description of the cart"
              },
              "entries": {
                  "type": "array",
                  "description": "List of order entries",
                  "items": {
                      "$ref": "#/definitions/OrderEntry"
                  }
              },
              "entryGroups": {
                  "type": "array",
                  "description": "List of entry groups",
                  "items": {
                      "$ref": "#/definitions/EntryGroup"
                  }
              },
              "expirationTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date of cart expiration time"
              },
              "firstDate": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2020-12-31T09:00:00+0000",
                  "description": "First date of the replenishment order"
              },
              "guid": {
                  "type": "string",
                  "description": "Guest user id identifier"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the cart"
              },
              "net": {
                  "type": "boolean",
                  "description": "Flag stating iv value is net-value"
              },
              "orderDiscounts": {
                  "description": "Order discounts",
                  "$ref": "#/definitions/Price"
              },
              "paymentInfo": {
                  "description": "Payment information",
                  "$ref": "#/definitions/PaymentDetails"
              },
              "paymentStatus": {
                  "type": "string",
                  "example": "PAID",
                  "description": "Payment status"
              },
              "paymentType": {
                  "$ref": "#/definitions/B2BPaymentTypeData"
              },
              "pickupItemsQuantity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Quantity of pickup items"
              },
              "pickupOrderGroups": {
                  "type": "array",
                  "description": "List of pickup order entry group",
                  "items": {
                      "$ref": "#/definitions/PickupOrderEntryGroup"
                  }
              },
              "potentialOrderPromotions": {
                  "type": "array",
                  "description": "List of potential order promotions for cart",
                  "items": {
                      "$ref": "#/definitions/PromotionResult"
                  }
              },
              "potentialProductPromotions": {
                  "type": "array",
                  "description": "List of potential product promotions for cart",
                  "items": {
                      "$ref": "#/definitions/PromotionResult"
                  }
              },
              "productDiscounts": {
                  "description": "Product discounts",
                  "$ref": "#/definitions/Price"
              },
              "purchaseOrderNumber": {
                  "type": "string"
              },
              "replenishmentOrderCode": {
                  "type": "string",
                  "example": "502BJ",
                  "description": "Unique code for the replenishment order"
              },
              "saveTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date of saving cart"
              },
              "savedBy": {
                  "description": "Information about person who saved cart",
                  "$ref": "#/definitions/Principal"
              },
              "site": {
                  "type": "string",
                  "description": "Site"
              },
              "store": {
                  "type": "string",
                  "description": "Store"
              },
              "subTotal": {
                  "description": "Subtotal price",
                  "$ref": "#/definitions/Price"
              },
              "taxInvoice": {
                  "$ref": "#/definitions/TaxInvoice"
              },
              "totalDiscounts": {
                  "description": "Total discounts",
                  "$ref": "#/definitions/Price"
              },
              "totalItems": {
                  "type": "integer",
                  "format": "int32"
              },
              "totalPrice": {
                  "description": "Total price value",
                  "$ref": "#/definitions/Price"
              },
              "totalPriceWithTax": {
                  "description": "Total price with tax",
                  "$ref": "#/definitions/Price"
              },
              "totalTax": {
                  "description": "Total tax price",
                  "$ref": "#/definitions/Price"
              },
              "totalUnitCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Total unit count"
              },
              "trigger": {
                  "description": "Trigger for the replenishment order",
                  "$ref": "#/definitions/Trigger"
              },
              "user": {
                  "description": "User information",
                  "$ref": "#/definitions/Principal"
              }
          },
          "title": "ReplenishmentOrder",
          "description": "Request body fields required and optional to operate on Replenishment Order data."
      },
      "ReplenishmentOrderList": {
          "type": "object",
          "properties": {
              "pagination": {
                  "description": "Pagination items",
                  "$ref": "#/definitions/deprecatedPagination"
              },
              "replenishmentOrders": {
                  "type": "array",
                  "description": "List of Replenishment Orders",
                  "items": {
                      "$ref": "#/definitions/ReplenishmentOrder"
                  }
              },
              "sorts": {
                  "type": "array",
                  "description": "List of sorts",
                  "items": {
                      "$ref": "#/definitions/Sort"
                  }
              }
          },
          "title": "ReplenishmentOrderList",
          "description": "Representation of a Replenishment Order List"
      },
      "ResetPassword": {
          "type": "object",
          "required": [
              "newPassword",
              "token"
          ],
          "properties": {
              "newPassword": {
                  "type": "string",
                  "description": "new password string which is required to complete process of resetting password"
              },
              "token": {
                  "type": "string",
                  "description": "token value which will be generated as unique string that will be sent with email to allow user for completing reset-password operation"
              }
          },
          "title": "ResetPassword",
          "description": "Representation of a Reset Password"
      },
      "ReturnRequest": {
          "type": "object",
          "properties": {
              "cancellable": {
                  "type": "boolean",
                  "example": true,
                  "description": "Boolean flag for whether the return request is cancellable"
              },
              "code": {
                  "type": "string",
                  "example": "00000001",
                  "description": "Return request code"
              },
              "creationTime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2020-12-31T09:00:00+0000",
                  "description": "Date of the return request creation"
              },
              "deliveryCost": {
                  "description": "Delivery cost",
                  "$ref": "#/definitions/Price"
              },
              "order": {
                  "description": "Order related to the return request",
                  "$ref": "#/definitions/Order"
              },
              "refundDeliveryCost": {
                  "type": "boolean",
                  "example": false,
                  "description": "Boolean flag for whether there is a delivery cost for refund"
              },
              "returnEntries": {
                  "type": "array",
                  "description": "Entries of the return request which contains information about the returned product",
                  "items": {
                      "$ref": "#/definitions/ReturnRequestEntry"
                  }
              },
              "returnLabelDownloadUrl": {
                  "type": "string",
                  "description": "URL of the return label"
              },
              "rma": {
                  "type": "string",
                  "example": "00000001",
                  "description": "Return merchandise authorization number"
              },
              "status": {
                  "type": "string",
                  "description": "Status of return request"
              },
              "subTotal": {
                  "description": "Subtotal price",
                  "$ref": "#/definitions/Price"
              },
              "totalPrice": {
                  "description": "Total price",
                  "$ref": "#/definitions/Price"
              }
          },
          "title": "ReturnRequest",
          "description": "Representation of a return request for an order"
      },
      "ReturnRequestEntry": {
          "type": "object",
          "properties": {
              "expectedQuantity": {
                  "type": "integer",
                  "format": "int64",
                  "example": 5,
                  "description": "Quantity which is expected to be returned for this return request entry"
              },
              "orderEntry": {
                  "description": "Order entry related to the return request entry",
                  "$ref": "#/definitions/OrderEntry"
              },
              "refundAmount": {
                  "description": "Refund amount of the entry",
                  "$ref": "#/definitions/Price"
              }
          },
          "title": "ReturnRequestEntry",
          "description": "Representation of a return request entry which contains information about the returned product"
      },
      "ReturnRequestEntryInput": {
          "type": "object",
          "required": [
              "orderEntryNumber",
              "quantity"
          ],
          "properties": {
              "orderEntryNumber": {
                  "type": "integer",
                  "format": "int32",
                  "example": 1,
                  "description": "Order entry number of the returned product"
              },
              "quantity": {
                  "type": "integer",
                  "format": "int64",
                  "example": 5,
                  "description": "Quantity of the product which belongs to the order entry and is requested to be returned"
              }
          },
          "title": "ReturnRequestEntryInput",
          "description": "Representation of a return request entry input for an order"
      },
      "ReturnRequestEntryInputList": {
          "type": "object",
          "required": [
              "orderCode",
              "returnRequestEntryInputs"
          ],
          "properties": {
              "orderCode": {
                  "type": "string",
                  "example": "00000001",
                  "description": "Code of the order which return request is related to"
              },
              "returnRequestEntryInputs": {
                  "type": "array",
                  "description": "Return request entry inputs which contain information about the order entries which are requested to be returned",
                  "items": {
                      "$ref": "#/definitions/ReturnRequestEntryInput"
                  }
              }
          },
          "title": "ReturnRequestEntryInputList",
          "description": "Representation of a return request entry input list for an order"
      },
      "ReturnRequestList": {
          "type": "object",
          "properties": {
              "pagination": {
                  "description": "Pagination items",
                  "$ref": "#/definitions/deprecatedPagination"
              },
              "returnRequests": {
                  "type": "array",
                  "description": "List of order return requests",
                  "items": {
                      "$ref": "#/definitions/ReturnRequest"
                  }
              },
              "sorts": {
                  "type": "array",
                  "description": "List of sorts",
                  "items": {
                      "$ref": "#/definitions/Sort"
                  }
              }
          },
          "title": "ReturnRequestList",
          "description": "Representation of an Order Return Request List"
      },
      "ReturnRequestModification": {
          "type": "object",
          "properties": {
              "status": {
                  "type": "string",
                  "description": "Status of the return request",
                  "enum": [
                      "CANCELLING"
                  ]
              }
          },
          "title": "ReturnRequestModification",
          "description": "Representation of modifications for a return request"
      },
      "Review": {
          "type": "object",
          "properties": {
              "alias": {
                  "type": "string",
                  "description": "Alias name for the review"
              },
              "comment": {
                  "type": "string",
                  "description": "Review comment"
              },
              "date": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date of the review"
              },
              "headline": {
                  "type": "string",
                  "description": "Review headline"
              },
              "id": {
                  "type": "string",
                  "description": "Identifier of review"
              },
              "principal": {
                  "description": "Person related to the review",
                  "$ref": "#/definitions/User"
              },
              "rating": {
                  "type": "number",
                  "format": "double",
                  "description": "Review rating value"
              }
          },
          "title": "Review",
          "description": "Representation of a Review"
      },
      "ReviewList": {
          "type": "object",
          "properties": {
              "reviews": {
                  "type": "array",
                  "description": "List of reviews",
                  "items": {
                      "$ref": "#/definitions/Review"
                  }
              }
          },
          "title": "ReviewList",
          "description": "Representation of a Review List"
      },
      "SaveCartResult": {
          "type": "object",
          "properties": {
              "savedCartData": {
                  "description": "Cart data information for saved cart",
                  "$ref": "#/definitions/Cart"
              }
          },
          "title": "SaveCartResult",
          "description": "Representation of a Save Cart Result"
      },
      "ScheduleReplenishmentForm": {
          "type": "object",
          "properties": {
              "daysOfWeek": {
                  "type": "array",
                  "description": "List of days of week on which replenishment should occur. Mandatory with 'recurrencePeriod=WEEKLY'.",
                  "items": {
                      "type": "string",
                      "enum": [
                          "SUNDAY",
                          "MONDAY",
                          "TUESDAY",
                          "WEDNESDAY",
                          "THURSDAY",
                          "FRIDAY",
                          "SATURDAY"
                      ]
                  }
              },
              "nthDayOfMonth": {
                  "type": "string",
                  "example": 1,
                  "description": "On which date of month replenishment should be activated. Mandatory with 'recurrencePeriod=MONTHLY'."
              },
              "numberOfDays": {
                  "type": "string",
                  "example": 14,
                  "description": "How frequent replenishment should be activated expressed in days. Mandatory with 'recurrencePeriod=DAILY'."
              },
              "numberOfWeeks": {
                  "type": "string",
                  "example": 1,
                  "description": "How frequent replenishment should be activated expressed in weeks. Mandatory with 'recurrencePeriod=WEEKLY'."
              },
              "recurrencePeriod": {
                  "type": "string",
                  "example": "WEEKLY",
                  "description": "Replenishment recurrence period. Available values are DAILY, WEEKLY and MONTHLY. DAILY requires 'numberOfDays'. WEEKLY requires 'daysOfWeek' AND 'numberOfWeeks'. MONTHLY requires 'nthDayOfMonth'."
              },
              "replenishmentStartDate": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2020-12-31T09:00:00+0000",
                  "description": "First day for replenishment order"
              }
          },
          "title": "ScheduleReplenishmentForm",
          "description": "Representation of a Schedule Replenishment Form"
      },
      "SearchQuery": {
          "type": "object",
          "properties": {
              "value": {
                  "type": "string",
                  "description": "Value of search query"
              }
          },
          "title": "SearchQuery",
          "description": "Representation of a Search Query"
      },
      "SearchState": {
          "type": "object",
          "properties": {
              "query": {
                  "description": "Query of search state",
                  "$ref": "#/definitions/SearchQuery"
              },
              "url": {
                  "type": "string",
                  "description": "Url address of search state"
              }
          },
          "title": "SearchState",
          "description": "Representation of a Search State"
      },
      "Sort": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string",
                  "description": "Code of Sort"
              },
              "name": {
                  "type": "string",
                  "description": "Name of Sort"
              },
              "selected": {
                  "type": "boolean",
                  "description": "Flag stating when Sort is selected"
              }
          },
          "title": "Sort",
          "description": "Representation a Sort option"
      },
      "SpecialOpeningDay": {
          "type": "object",
          "properties": {
              "closed": {
                  "type": "boolean",
                  "description": "Flag stating if special opening day is closed"
              },
              "closingTime": {
                  "description": "Closing time of opening day",
                  "$ref": "#/definitions/Time"
              },
              "comment": {
                  "type": "string",
                  "description": "Comment field"
              },
              "date": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date of special opening day"
              },
              "formattedDate": {
                  "type": "string",
                  "description": "Text representation of the date of special opening day"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the special opening day event"
              },
              "openingTime": {
                  "description": "Starting time of opening day",
                  "$ref": "#/definitions/Time"
              }
          },
          "title": "SpecialOpeningDay",
          "description": "Representation of a special opening day"
      },
      "SpellingSuggestion": {
          "type": "object",
          "properties": {
              "query": {
                  "type": "string",
                  "description": "Query for spelling suggestion"
              },
              "suggestion": {
                  "type": "string",
                  "description": "Spelling suggestion"
              }
          },
          "title": "SpellingSuggestion",
          "description": "Representation of a Spell Checker Suggestion"
      },
      "StatusSummary": {
          "type": "object",
          "properties": {
              "numberOfIssues": {
                  "type": "integer",
                  "format": "int32",
                  "example": 3,
                  "description": "Number of issues per status"
              },
              "status": {
                  "type": "string",
                  "example": "ERROR",
                  "description": "Status or severity indicator, can be one of ERROR, WARNING, INFO or SUCCESS"
              }
          },
          "title": "StatusSummary",
          "description": "Representation of a status summary, an aggregated view on issues for a specific status or severity. These issues are attached to configurations of products or order entries"
      },
      "Stock": {
          "type": "object",
          "properties": {
              "isValueRounded": {
                  "type": "boolean",
                  "description": "Indicate whether Stock level value is rounded"
              },
              "stockLevel": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Stock level expressed as number"
              },
              "stockLevelStatus": {
                  "type": "string",
                  "description": "Status of stock level"
              }
          },
          "title": "Stock",
          "description": "Representation of a Stock"
      },
      "StoreCount": {
          "type": "object",
          "properties": {
              "count": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Count"
              },
              "isoCode": {
                  "type": "string",
                  "description": "Iso code of store"
              },
              "name": {
                  "type": "string",
                  "description": "Name of store count"
              },
              "storeCountDataList": {
                  "type": "array",
                  "description": "List of store counts",
                  "items": {
                      "$ref": "#/definitions/StoreCount"
                  }
              },
              "type": {
                  "type": "string",
                  "description": "Type of store count"
              }
          },
          "title": "StoreCount",
          "description": "Representation of a Store Count"
      },
      "StoreCountList": {
          "type": "object",
          "properties": {
              "countriesAndRegionsStoreCount": {
                  "type": "array",
                  "description": "List of store counts",
                  "items": {
                      "$ref": "#/definitions/StoreCount"
                  }
              }
          },
          "title": "StoreCountList",
          "description": "Representation of a Store Count List"
      },
      "StoreFinderSearchPage": {
          "type": "object",
          "properties": {
              "boundEastLongitude": {
                  "type": "number",
                  "format": "double",
                  "description": "Bound east longitude"
              },
              "boundNorthLatitude": {
                  "type": "number",
                  "format": "double",
                  "description": "Bound north latitude"
              },
              "boundSouthLatitude": {
                  "type": "number",
                  "format": "double",
                  "description": "Bound south latitude"
              },
              "boundWestLongitude": {
                  "type": "number",
                  "format": "double",
                  "description": "Bound west longitude"
              },
              "locationText": {
                  "type": "string",
                  "description": "Location text"
              },
              "pagination": {
                  "description": "Pagination",
                  "$ref": "#/definitions/deprecatedPagination"
              },
              "sorts": {
                  "type": "array",
                  "description": "List of sortings",
                  "items": {
                      "$ref": "#/definitions/Sort"
                  }
              },
              "sourceLatitude": {
                  "type": "number",
                  "format": "double",
                  "description": "Source latitude"
              },
              "sourceLongitude": {
                  "type": "number",
                  "format": "double",
                  "description": "Source longitude"
              },
              "stores": {
                  "type": "array",
                  "description": "List of stores",
                  "items": {
                      "$ref": "#/definitions/PointOfService"
                  }
              }
          },
          "title": "StoreFinderSearchPage",
          "description": "Representation of a Store finder search page"
      },
      "StoreFinderStockSearchPage": {
          "type": "object",
          "properties": {
              "boundEastLongitude": {
                  "type": "number",
                  "format": "double",
                  "description": "Bound to east longitude"
              },
              "boundNorthLatitude": {
                  "type": "number",
                  "format": "double",
                  "description": "Bound to north latitude"
              },
              "boundSouthLatitude": {
                  "type": "number",
                  "format": "double",
                  "description": "Bound to south latitude"
              },
              "boundWestLongitude": {
                  "type": "number",
                  "format": "double",
                  "description": "Bound to west longitude"
              },
              "locationText": {
                  "type": "string",
                  "description": "Location text"
              },
              "pagination": {
                  "description": "Pagination",
                  "$ref": "#/definitions/deprecatedPagination"
              },
              "product": {
                  "description": "Product",
                  "$ref": "#/definitions/Product"
              },
              "sorts": {
                  "type": "array",
                  "description": "List of sorts",
                  "items": {
                      "$ref": "#/definitions/Sort"
                  }
              },
              "sourceLatitude": {
                  "type": "number",
                  "format": "double",
                  "description": "Source latitude"
              },
              "sourceLongitude": {
                  "type": "number",
                  "format": "double",
                  "description": "Source longitude"
              },
              "stores": {
                  "type": "array",
                  "description": "List of stores",
                  "items": {
                      "$ref": "#/definitions/PointOfServiceStock"
                  }
              }
          },
          "title": "StoreFinderStockSearchPage",
          "description": "Representation of a Store Finder Stock Search Page"
      },
      "Suggestion": {
          "type": "object",
          "properties": {
              "value": {
                  "type": "string",
                  "description": "Suggestion value"
              }
          },
          "title": "Suggestion",
          "description": "Representation of a Suggestion"
      },
      "SuggestionList": {
          "type": "object",
          "properties": {
              "suggestions": {
                  "type": "array",
                  "description": "List of suggestions",
                  "items": {
                      "$ref": "#/definitions/Suggestion"
                  }
              }
          },
          "title": "SuggestionList",
          "description": "Representation of a Suggestion List"
      },
      "TaxInvoice": {
          "type": "object",
          "properties": {
              "recipient": {
                  "type": "string",
                  "description": "name of recipient"
              },
              "recipientType": {
                  "type": "string",
                  "example": "INDIVIDUAL,UNIT",
                  "description": "recipient type"
              },
              "taxpayerID": {
                  "type": "string",
                  "description": "taxpayer identification number"
              }
          },
          "title": "TaxInvoice",
          "description": "data type of tax invoice"
      },
      "Ticket": {
          "type": "object",
          "properties": {
              "associatedTo": {
                  "$ref": "#/definitions/TicketAssociatedObject"
              },
              "availableStatusTransitions": {
                  "type": "array",
                  "items": {
                      "$ref": "#/definitions/TicketStatus"
                  }
              },
              "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2021-01-13T10:06:57+0000",
                  "description": "Ticket creation date"
              },
              "customerId": {
                  "type": "string",
                  "example": 1000001,
                  "description": "Customer id"
              },
              "id": {
                  "type": "string",
                  "example": "0000001",
                  "description": "Ticket id"
              },
              "modifiedAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2021-01-13T10:06:57+0000",
                  "description": "Last modification date of ticket"
              },
              "status": {
                  "$ref": "#/definitions/TicketStatus"
              },
              "subject": {
                  "type": "string",
                  "example": "My drill is broken.",
                  "description": "Subject of ticket"
              },
              "ticketCategory": {
                  "$ref": "#/definitions/TicketCategory"
              },
              "ticketEvents": {
                  "type": "array",
                  "items": {
                      "$ref": "#/definitions/TicketEvent"
                  }
              }
          },
          "title": "Ticket",
          "description": "Representation of the ticket object."
      },
      "TicketAssociatedObject": {
          "type": "object",
          "required": [
              "code",
              "type"
          ],
          "properties": {
              "code": {
                  "type": "string",
                  "example": "00001000",
                  "description": "Associated object code"
              },
              "modifiedAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2021-01-13T10:06:57+0000",
                  "description": "Last modified time"
              },
              "type": {
                  "type": "string",
                  "example": "Cart",
                  "description": "Type of associated objects, Cart or Order"
              }
          },
          "title": "TicketAssociatedObject",
          "description": "Represents an object that can be associated with a ticket. The object could be a cart or an order item."
      },
      "TicketAssociatedObjectList": {
          "type": "object",
          "properties": {
              "ticketAssociatedObjects": {
                  "type": "array",
                  "items": {
                      "$ref": "#/definitions/TicketAssociatedObject"
                  }
              }
          },
          "title": "TicketAssociatedObjectList",
          "description": "Represents a list of ticket associated objects."
      },
      "TicketCategory": {
          "type": "object",
          "required": [
              "id"
          ],
          "properties": {
              "id": {
                  "type": "string",
                  "example": "ENQUIRY",
                  "description": "Category id"
              },
              "name": {
                  "type": "string",
                  "example": "Enquiry",
                  "description": "Localised category name"
              }
          },
          "title": "TicketCategory",
          "description": "Ticket category"
      },
      "TicketCategoryList": {
          "type": "object",
          "properties": {
              "ticketCategories": {
                  "type": "array",
                  "items": {
                      "$ref": "#/definitions/TicketCategory"
                  }
              }
          },
          "title": "TicketCategoryList",
          "description": "Represents a list of ticket categories."
      },
      "TicketEvent": {
          "type": "object",
          "required": [
              "message"
          ],
          "properties": {
              "addedByAgent": {
                  "type": "boolean",
                  "example": false,
                  "description": "Whether this event is added by agent or not."
              },
              "author": {
                  "type": "string",
                  "example": "Mark Rivers",
                  "description": "Name of the user who initiated this ticket event"
              },
              "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2021-01-13T10:06:57+0000",
                  "description": "Datetime when this event is created"
              },
              "message": {
                  "type": "string",
                  "example": "It is broken when I receive it. Please send one replacement to me.",
                  "description": "Detailed description of your question"
              },
              "toStatus": {
                  "$ref": "#/definitions/TicketStatus"
              }
          },
          "title": "TicketEvent",
          "description": "Representation of the ticket event object."
      },
      "TicketList": {
          "type": "object",
          "properties": {
              "pagination": {
                  "description": "Pagination of ticket list",
                  "$ref": "#/definitions/deprecatedPagination"
              },
              "sorts": {
                  "type": "array",
                  "description": "Sorts of ticket list",
                  "items": {
                      "$ref": "#/definitions/Sort"
                  }
              },
              "tickets": {
                  "type": "array",
                  "description": "List of tickets",
                  "items": {
                      "$ref": "#/definitions/Ticket"
                  }
              }
          },
          "title": "TicketList",
          "description": "Represents a list of ticket results."
      },
      "TicketStarter": {
          "type": "object",
          "required": [
              "message",
              "subject",
              "ticketCategory"
          ],
          "properties": {
              "associatedTo": {
                  "$ref": "#/definitions/TicketAssociatedObject"
              },
              "message": {
                  "type": "string",
                  "example": "It is broken when I receive it. Please send one replacement to me.",
                  "description": "Detailed description of your question"
              },
              "subject": {
                  "type": "string",
                  "example": "My drill is broken.",
                  "description": "subject of ticket"
              },
              "ticketCategory": {
                  "$ref": "#/definitions/TicketCategory"
              }
          },
          "title": "TicketStarter",
          "description": "Representation of objects containing a set of fields for ticket creation."
      },
      "TicketStatus": {
          "type": "object",
          "required": [
              "id"
          ],
          "properties": {
              "id": {
                  "type": "string",
                  "example": "CLOSED",
                  "description": "Ticket status id"
              },
              "name": {
                  "type": "string",
                  "example": "Closed",
                  "description": "Localised ticket status"
              }
          },
          "title": "TicketStatus",
          "description": "Ticket status"
      },
      "Time": {
          "type": "object",
          "properties": {
              "formattedHour": {
                  "type": "string",
                  "description": "Formatted hour"
              },
              "hour": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Hour part of the time data",
                  "minimum": -128,
                  "maximum": 127
              },
              "minute": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Minute part of the time data",
                  "minimum": -128,
                  "maximum": 127
              }
          },
          "title": "Time",
          "description": "Representation of a Time"
      },
      "Title": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string",
                  "description": "Title code"
              },
              "name": {
                  "type": "string",
                  "description": "Title name"
              }
          },
          "title": "Title",
          "description": "Representation of a Title"
      },
      "TitleList": {
          "type": "object",
          "properties": {
              "titles": {
                  "type": "array",
                  "description": "List of titles",
                  "items": {
                      "$ref": "#/definitions/Title"
                  }
              }
          },
          "title": "TitleList",
          "description": "Representation of a Title List"
      },
      "Trigger": {
          "type": "object",
          "properties": {
              "activationTime": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2020-12-31T09:00:00+0000",
                  "description": "The time the trigger will be activated"
              },
              "displayTimeTable": {
                  "type": "string",
                  "example": "Every Monday at 00:00:00",
                  "description": "Description of when the trigger is being activated"
              }
          },
          "title": "Trigger",
          "description": "Representation of a Trigger"
      },
      "User": {
          "type": "object",
          "properties": {
              "active": {
                  "type": "boolean",
                  "example": true,
                  "description": "Boolean flag of whether the user is active/enabled or not"
              },
              "approvers": {
                  "type": "array",
                  "description": "List of organizational approvers",
                  "items": {
                      "$ref": "#/definitions/User"
                  }
              },
              "currency": {
                  "description": "User preferred currency",
                  "$ref": "#/definitions/Currency"
              },
              "customerId": {
                  "type": "string",
                  "description": "Customer identifier"
              },
              "deactivationDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Deactivation date"
              },
              "defaultAddress": {
                  "description": "User address",
                  "$ref": "#/definitions/Address"
              },
              "displayUid": {
                  "type": "string",
                  "description": "User identifier"
              },
              "email": {
                  "type": "string",
                  "example": "mark.rivers@rustic-hw.com",
                  "description": "Email of the user"
              },
              "emailLanguage": {
                  "type": "string",
                  "description": "Email Language"
              },
              "firstName": {
                  "type": "string",
                  "description": "User first name"
              },
              "language": {
                  "description": "User preferred language",
                  "$ref": "#/definitions/Language"
              },
              "lastName": {
                  "type": "string",
                  "description": "User last name"
              },
              "mobileNumber": {
                  "type": "string",
                  "description": "Mobile Number"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the user"
              },
              "orgUnit": {
                  "example": "Rustic",
                  "description": "The unit of the User",
                  "$ref": "#/definitions/B2BUnit"
              },
              "roles": {
                  "type": "array",
                  "items": {
                      "type": "string"
                  }
              },
              "selected": {
                  "type": "boolean",
                  "example": true,
                  "description": "Boolean flag of whether the user is selected"
              },
              "title": {
                  "type": "string",
                  "description": "User title"
              },
              "titleCode": {
                  "type": "string",
                  "description": "User title code"
              },
              "uid": {
                  "type": "string",
                  "description": "Unique user identifier"
              }
          },
          "title": "User",
          "description": "Representation of an User"
      },
      "UserGroup": {
          "type": "object",
          "properties": {
              "members": {
                  "type": "array",
                  "description": "List of members",
                  "items": {
                      "$ref": "#/definitions/Principal"
                  }
              },
              "membersCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of members"
              },
              "name": {
                  "type": "string",
                  "description": "Name of the user"
              },
              "subGroups": {
                  "type": "array",
                  "description": "List of subgroups",
                  "items": {
                      "$ref": "#/definitions/UserGroup"
                  }
              },
              "uid": {
                  "type": "string",
                  "description": "Unique user identifier"
              }
          },
          "title": "UserGroup",
          "description": "Representation of an User Group"
      },
      "UserGroupList": {
          "type": "object",
          "properties": {
              "currentPage": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Current page"
              },
              "numberOfPages": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of pages"
              },
              "pageSize": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Page size"
              },
              "totalNumber": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Total number"
              },
              "userGroups": {
                  "type": "array",
                  "description": "List of user groups",
                  "items": {
                      "$ref": "#/definitions/UserGroup"
                  }
              }
          },
          "title": "UserGroupList",
          "description": "Representation of an User Group List"
      },
      "UserSignUp": {
          "type": "object",
          "required": [
              "firstName",
              "lastName",
              "password",
              "uid"
          ],
          "properties": {
              "firstName": {
                  "type": "string",
                  "description": "first name of the user"
              },
              "lastName": {
                  "type": "string",
                  "description": "last name of the user"
              },
              "password": {
                  "type": "string",
                  "description": "user password"
              },
              "titleCode": {
                  "type": "string"
              },
              "uid": {
                  "type": "string",
                  "description": "user id, unique string required to create new user. It can be email"
              }
          },
          "title": "UserSignUp",
          "description": "Representation of an UserSignUp. Consists of fields required to register new customer"
      },
      "VariantCategory": {
          "type": "object",
          "properties": {
              "hasImage": {
                  "type": "boolean",
                  "description": "Flag if varian category has image assigned"
              },
              "name": {
                  "type": "string",
                  "description": "Variant category name"
              },
              "priority": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Priority number of variant category"
              }
          },
          "title": "VariantCategory",
          "description": "Representation of a Variant Category"
      },
      "VariantMatrixElement": {
          "type": "object",
          "properties": {
              "elements": {
                  "type": "array",
                  "description": "List of elements with the type of variant matrix element",
                  "items": {
                      "$ref": "#/definitions/VariantMatrixElement"
                  }
              },
              "isLeaf": {
                  "type": "boolean"
              },
              "parentVariantCategory": {
                  "description": "Parent variant category for variant matrix element",
                  "$ref": "#/definitions/VariantCategory"
              },
              "variantOption": {
                  "description": "Variant option for variant matrix element",
                  "$ref": "#/definitions/VariantOption"
              },
              "variantValueCategory": {
                  "description": "Variant value category for variant matrix element",
                  "$ref": "#/definitions/VariantValueCategory"
              }
          },
          "title": "VariantMatrixElement",
          "description": "Representation of a Variant Matrix Element"
      },
      "VariantOption": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string",
                  "description": "Code of the variant option"
              },
              "priceData": {
                  "description": "Price data information of the variant option",
                  "$ref": "#/definitions/Price"
              },
              "stock": {
                  "description": "Stock value of the variant option",
                  "$ref": "#/definitions/Stock"
              },
              "url": {
                  "type": "string",
                  "description": "Url address of the variant option"
              },
              "variantOptionQualifiers": {
                  "type": "array",
                  "description": "List of variant option qualifiers",
                  "items": {
                      "$ref": "#/definitions/VariantOptionQualifier"
                  }
              }
          },
          "title": "VariantOption",
          "description": "Representation of a Variant Option"
      },
      "VariantOptionQualifier": {
          "type": "object",
          "properties": {
              "image": {
                  "description": "Image associated with variant option qualifier",
                  "$ref": "#/definitions/Image"
              },
              "name": {
                  "type": "string",
                  "description": "Name of variant option qualifier"
              },
              "qualifier": {
                  "type": "string",
                  "description": "Qualifier"
              },
              "value": {
                  "type": "string",
                  "description": "Value of variant option qualifier"
              }
          },
          "title": "VariantOptionQualifier",
          "description": "Representation of a Variant Option Qualifier"
      },
      "VariantValueCategory": {
          "type": "object",
          "properties": {
              "name": {
                  "type": "string",
                  "description": "Name of the variant value category"
              },
              "sequence": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Sequence number of variant value category"
              },
              "superCategories": {
                  "type": "array",
                  "description": "Parent category of variant value category",
                  "items": {
                      "$ref": "#/definitions/VariantCategory"
                  }
              }
          },
          "title": "VariantValueCategory",
          "description": "Representation of a Variant Value Category"
      },
      "Voucher": {
          "type": "object",
          "properties": {
              "appliedValue": {
                  "description": "Applied value when using this voucher",
                  "$ref": "#/definitions/Price"
              },
              "code": {
                  "type": "string",
                  "description": "The identifier of the Voucher. This is the first part of voucher code which holds first 3 letters, like: 123"
              },
              "currency": {
                  "description": "Currency of the voucher",
                  "$ref": "#/definitions/Currency"
              },
              "description": {
                  "type": "string",
                  "description": "Description of the voucher"
              },
              "freeShipping": {
                  "type": "boolean",
                  "description": "Specifies if the order this voucher is applied to is shipped for free (true) or not (false). Defaults to false."
              },
              "name": {
                  "type": "string",
                  "description": "Name of the voucher"
              },
              "value": {
                  "type": "number",
                  "format": "double",
                  "description": "Value of the voucher. Example of such value is: 15.0d"
              },
              "valueFormatted": {
                  "type": "string",
                  "description": "Formatted value of the voucher"
              },
              "valueString": {
                  "type": "string",
                  "description": "The value of the voucher to display. Example: 15.0%"
              },
              "voucherCode": {
                  "type": "string",
                  "description": "Voucher code, is the holder for keeping specific occasional voucher related to business usage. It can be generated and looks like: 123-H8BC-Y3D5-34AL"
              }
          },
          "title": "Voucher",
          "description": "Representation of a Voucher"
      },
      "VoucherList": {
          "type": "object",
          "properties": {
              "vouchers": {
                  "type": "array",
                  "description": "List of vouchers",
                  "items": {
                      "$ref": "#/definitions/Voucher"
                  }
              }
          },
          "title": "VoucherList",
          "description": "Representation of a Voucher List"
      },
      "WeekdayOpeningDay": {
          "type": "object",
          "properties": {
              "closed": {
                  "type": "boolean",
                  "description": "Flag stating if weekday opening day is closed"
              },
              "closingTime": {
                  "description": "Closing time of opening day",
                  "$ref": "#/definitions/Time"
              },
              "openingTime": {
                  "description": "Starting time of opening day",
                  "$ref": "#/definitions/Time"
              },
              "weekDay": {
                  "type": "string",
                  "description": "Text representation of week day opening day"
              }
          },
          "title": "WeekdayOpeningDay",
          "description": "Representation of a Weekday Opening Day"
      },
      "carrier": {
          "type": "object",
          "properties": {
              "code": {
                  "type": "string",
                  "description": "Carrier code"
              },
              "name": {
                  "type": "string",
                  "description": "Carrier name"
              }
          },
          "title": "carrier",
          "description": "Carrier"
      },
      "consignmentTracking": {
          "type": "object",
          "properties": {
              "carrierDetails": {
                  "description": "Carrier details",
                  "$ref": "#/definitions/carrier"
              },
              "statusDisplay": {
                  "type": "string",
                  "example": "inTransit",
                  "description": "Consignment status"
              },
              "targetArrivalDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Target arrival date"
              },
              "trackingEvents": {
                  "type": "array",
                  "description": "Logistics tracking information",
                  "items": {
                      "$ref": "#/definitions/consignmentTrackingEvent"
                  }
              },
              "trackingID": {
                  "type": "string",
                  "description": "Tracking identifier"
              },
              "trackingUrl": {
                  "type": "string",
                  "description": "The tracking url provided by the carrier"
              }
          },
          "title": "consignmentTracking",
          "description": "Consignment tracking data"
      },
      "consignmentTrackingEvent": {
          "type": "object",
          "properties": {
              "detail": {
                  "type": "string",
                  "description": "Tracking detail"
              },
              "eventDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date of tracking event"
              },
              "location": {
                  "type": "string",
                  "description": "Consignment location"
              },
              "referenceCode": {
                  "type": "string",
                  "description": "Logistics status"
              }
          },
          "title": "consignmentTrackingEvent",
          "description": "Consignment tracking event"
      },
      "conversation": {
          "type": "object",
          "properties": {
              "agent": {
                  "description": "the agent of conversation",
                  "$ref": "#/definitions/Principal"
              },
              "closeDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "close date"
              },
              "createDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "create date"
              },
              "customer": {
                  "description": "the customer of conversation",
                  "$ref": "#/definitions/Principal"
              },
              "id": {
                  "type": "string",
                  "description": "conversation identifier"
              },
              "latestMessage": {
                  "description": "the latest message of the conversation",
                  "$ref": "#/definitions/conversationMessage"
              },
              "status": {
                  "type": "string",
                  "description": "conversation status"
              }
          },
          "title": "conversation",
          "description": "Conversation"
      },
      "conversationList": {
          "type": "object",
          "properties": {
              "conversations": {
                  "type": "array",
                  "description": "conversation data",
                  "items": {
                      "$ref": "#/definitions/conversation"
                  }
              }
          },
          "title": "conversationList",
          "description": "Conversation list"
      },
      "conversationMessage": {
          "type": "object",
          "properties": {
              "content": {
                  "type": "string",
                  "description": "message content"
              },
              "sender": {
                  "description": "the message sender",
                  "$ref": "#/definitions/Principal"
              },
              "sentTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "sent time"
              }
          },
          "title": "conversationMessage",
          "description": "Conversation message"
      },
      "conversationMessageList": {
          "type": "object",
          "properties": {
              "conversationId": {
                  "type": "string",
                  "description": "conversation identifier"
              },
              "messages": {
                  "type": "array",
                  "description": "the messages list of this conversation",
                  "items": {
                      "$ref": "#/definitions/conversationMessage"
                  }
              }
          },
          "title": "conversationMessageList",
          "description": "Conversation message list"
      },
      "customerInterestsSearchPage": {
          "type": "object",
          "properties": {
              "pagination": {
                  "description": "Pagination information",
                  "$ref": "#/definitions/pagination"
              },
              "results": {
                  "type": "array",
                  "description": "List of product interest relation",
                  "items": {
                      "$ref": "#/definitions/productInterestRelation"
                  }
              },
              "sorts": {
                  "type": "array",
                  "description": "Sorting information",
                  "items": {
                      "$ref": "#/definitions/sort"
                  }
              }
          },
          "title": "customerInterestsSearchPage",
          "description": "Customer interests search page"
      },
      "deprecatedPagination": {
          "type": "object",
          "properties": {
              "currentPage": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The current page number. The first page is number zero (0), the second page is number one (1), and so on"
              },
              "pageSize": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of results per page. A page may have less results if there are less than a full page of results, only on the last page in the results"
              },
              "sort": {
                  "type": "string",
                  "description": "The selected sort code"
              },
              "totalPages": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The total number of pages. This is the number of pages, each of pageSize, required to display the totalResults."
              },
              "totalResults": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The total number of matched results across all pages"
              }
          },
          "title": "deprecatedPagination",
          "description": "Representation of a search results pagination"
      },
      "error": {
          "type": "object",
          "properties": {
              "errorCode": {
                  "type": "string",
                  "description": "Error code"
              },
              "exceptionMessage": {
                  "type": "string"
              },
              "language": {
                  "type": "string",
                  "example": "English"
              },
              "message": {
                  "type": "string",
                  "description": "Descriptive, human readable error message."
              },
              "position": {
                  "type": "integer",
                  "format": "int32",
                  "example": 1
              },
              "reason": {
                  "type": "string",
                  "description": "Additional classification specific for each error type e.g. 'noStock'."
              },
              "subject": {
                  "type": "string",
                  "description": "Identifier of the related object e.g. '1'."
              },
              "subjectType": {
                  "type": "string",
                  "description": "Type of the object related to the error e.g. 'entry'."
              },
              "type": {
                  "type": "string",
                  "description": "Type of the error e.g. 'LowStockError'."
              }
          },
          "title": "error",
          "description": "Error message"
      },
      "errorList": {
          "type": "object",
          "properties": {
              "errors": {
                  "type": "array",
                  "items": {
                      "$ref": "#/definitions/error"
                  }
              }
          },
          "title": "errorList",
          "description": "List of errors"
      },
      "notificationPreference": {
          "type": "object",
          "properties": {
              "channel": {
                  "type": "string",
                  "example": "email, sms, site_message",
                  "description": "preference channel"
              },
              "enabled": {
                  "type": "boolean",
                  "description": "if true, the channel is on; if false, the channel is off"
              },
              "value": {
                  "type": "string",
                  "description": "the corresponding value of current channel, for example, for SMS it should be a mobile number; for email it should be an email address"
              },
              "visible": {
                  "type": "boolean",
                  "description": "if true, the channel is visible; if false, the channel is invisible"
              }
          },
          "title": "notificationPreference",
          "description": "Notification preference"
      },
      "notificationPreferenceList": {
          "type": "object",
          "properties": {
              "preferences": {
                  "type": "array",
                  "description": "notification preferences",
                  "items": {
                      "$ref": "#/definitions/notificationPreference"
                  }
              }
          },
          "title": "notificationPreferenceList",
          "description": "Notification preference list"
      },
      "pagination": {
          "type": "object",
          "properties": {
              "count": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of elements on this page"
              },
              "hasNext": {
                  "type": "boolean",
                  "description": "Indicates if there is next page"
              },
              "hasPrevious": {
                  "type": "boolean",
                  "description": "Indicates if there is previous page"
              },
              "page": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Current page number"
              },
              "totalCount": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Total number of elements"
              },
              "totalPages": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Total number of pages"
              }
          },
          "title": "pagination",
          "description": "Pagination info"
      },
      "productInterestEntry": {
          "type": "object",
          "properties": {
              "dateAdded": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Added date of product interest"
              },
              "expirationDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Expiration date of product interest"
              },
              "interestType": {
                  "type": "string",
                  "description": "Product interest type"
              }
          },
          "title": "productInterestEntry",
          "description": "Product interest entry"
      },
      "productInterestRelation": {
          "type": "object",
          "properties": {
              "product": {
                  "description": "Product",
                  "$ref": "#/definitions/Product"
              },
              "productInterestEntry": {
                  "type": "array",
                  "description": "List of product interest entry",
                  "items": {
                      "$ref": "#/definitions/productInterestEntry"
                  }
              }
          },
          "title": "productInterestRelation",
          "description": "Product interest relation"
      },
      "siteMessage": {
          "type": "object",
          "properties": {
              "body": {
                  "type": "string",
                  "description": "message body"
              },
              "notificationType": {
                  "type": "string",
                  "description": "notification type used for this message",
                  "enum": [
                      "BACK_IN_STOCK",
                      "COUPON_EFFECTIVE",
                      "NOTIFICATION",
                      "COUPON_EXPIRE"
                  ]
              },
              "sentDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "sent date"
              },
              "subject": {
                  "type": "string",
                  "description": "message subject"
              },
              "uid": {
                  "type": "string",
                  "description": "message uid"
              }
          },
          "title": "siteMessage",
          "description": "Site message"
      },
      "siteMessageSearchResult": {
          "type": "object",
          "properties": {
              "messages": {
                  "type": "array",
                  "description": "site messages",
                  "items": {
                      "$ref": "#/definitions/siteMessage"
                  }
              },
              "pagination": {
                  "description": "pagination information",
                  "$ref": "#/definitions/pagination"
              },
              "sorts": {
                  "type": "array",
                  "description": "sorting information",
                  "items": {
                      "$ref": "#/definitions/sort"
                  }
              }
          },
          "title": "siteMessageSearchResult",
          "description": "Site message search result"
      },
      "sort": {
          "type": "object",
          "properties": {
              "asc": {
                  "type": "boolean"
              },
              "code": {
                  "type": "string"
              }
          },
          "title": "sort",
          "description": "Sort option"
      }
  },
  "security": [
      {
          "oauth2_Password": [
              "basic"
          ]
      },
      {
          "oauth2_client_credentials": [
              "extended"
          ]
      }
  ],
  "x-sap-api-type": "REST",
  "x-sap-shortText": "Enables you to manage all of the common commerce functionality.",
  "x-sap-stateInfo": {
      "state": "Active"
  },
  "x-servers": [
      {
          "templates": {
              "url": {
                  "description": "SAP Commerce Cloud server URL where the application is deployed."
              }
          },
          "description": "Commerce Webservices v2 REST API endpoint",
          "url": "https://{url}/occ/v2"
      }
  ]
}